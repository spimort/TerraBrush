<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Godot.Bindings</name>
    </assembly>
    <members>
        <member name="T:Godot.Bridge.CallError">
            <summary>
            Represents the status that can be returned when calling a <see cref="T:Godot.Bridge.CustomCallable"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.Ok">
            <summary>
            The call completed successfully.
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.InvalidMethod">
            <summary>
            The method that the callable intended to call was invalid
            (e.g.: the method was not found).
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.InvalidArgument">
            <summary>
            The callable received an invalid argument
            (e.g.: the argument couldn't be converted to the expected type).
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.TooManyArguments">
            <summary>
            The callable received more arguments than expected.
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.TooFewArguments">
            <summary>
            The callable received less arguments than expected.
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.InstanceIsNull">
            <summary>
            The callable instance or its owner is null.
            </summary>
        </member>
        <member name="F:Godot.Bridge.CallError.MethodNotConstant">
            <summary>
            The callable attempted to call a non-constant method in a read-only instance.
            Only constant methods can be called in read-only instances to prevent mutation.
            </summary>
        </member>
        <member name="T:Godot.Bridge.CustomCallable">
            <summary>
            Implements the custom behavior for an user-implemented <see cref="T:Godot.Callable"/>.
            Most users should use <see cref="T:Godot.Callable"/> directly, this is a low-level
            API to allow implementing custom behavior for special cases and it's used
            internally to implement delegate-based Callables.
            </summary>
        </member>
        <member name="M:Godot.Bridge.CustomCallable.op_Implicit(Godot.Bridge.CustomCallable)~Godot.Callable">
            <summary>
            Convert a <see cref="T:Godot.Bridge.CustomCallable"/> into a <see cref="T:Godot.Callable"/>.
            </summary>
        </member>
        <member name="M:Godot.Bridge.CustomCallable.GetObjectId">
            <summary>
            The instance ID of the object that is the owner of this callable.
            </summary>
            <returns>Instance ID of the callable's owner.</returns>
        </member>
        <member name="M:Godot.Bridge.CustomCallable.IsValid">
            <summary>
            Determines whether this callable is still valid.
            </summary>
            <returns><see langword="true"/> if the callable is valid.</returns>
        </member>
        <member name="M:Godot.Bridge.CustomCallable.TryGetArgumentCount(System.Int64@)">
            <summary>
            Try to retrieve the argument count required by this callable.
            </summary>
            <param name="argCount">The number of parameters of the function.</param>
            <returns><see langword="true"/> if the argument count was retrieved successfully.</returns>
        </member>
        <member name="M:Godot.Bridge.CustomCallable._Call(System.ReadOnlySpan{Godot.Variant},Godot.Variant@)">
            <summary>
            Implements the callback that will be invoked when this callable is called.
            </summary>
            <param name="args">Arguments that this callable is invoked with.</param>
            <param name="result">The value returned by the callable's invocation.</param>
            <returns>
            A status that indicates whether the call was successful, or the error that occurred otherwise.
            </returns>
        </member>
        <member name="T:Godot.Bridge.GodotBridge">
             <summary>
             Represents the bridge between the Godot engine and the .NET bindings.
             </summary>
             <example>
             Use the <see cref="M:Godot.Bridge.GodotBridge.Initialize(System.IntPtr,System.IntPtr,System.IntPtr,System.Action{Godot.Bridge.GodotBridgeConfiguration})"/>
             method to initialize the bridge from the extension entry-point.
             <code>
             [UnmanagedCallersOnly(EntryPoint = "my_library_init")]
             private static bool MyLibraryInit(nint getProcAddress, nint library, nint initialization)
             {
                 GodotBridge.Initialize(getProcAddress, library, initialization, config =>
                 {
                     config.SetMinimumLibraryInitializationLevel(InitializationLevel.Scene);
                     config.RegisterInitializer(InitializeMyLibrary),
                     config.RegisterTerminator(DeinitializeMyLibrary),
                 });
            
                 return true;
             }
             </code>
             </example>
        </member>
        <member name="M:Godot.Bridge.GodotBridge.Initialize(System.IntPtr,System.IntPtr,System.IntPtr,System.Action{Godot.Bridge.GodotBridgeConfiguration})">
            <summary>
            Initialize the Godot bridge between the engine and the .NET bindings.
            The <paramref name="getProcAddress"/>, <paramref name="library"/>, and
            <paramref name="initialization"/> pointers are received from the entry-point
            and must just be passed thru to this function.
            The <paramref name="configure"/> callback must be provided to configure the
            bridge for the extension. Use it to register and unregister the extension types
            on initialization/termination and set the minimum initialization level required
            by the extension.
            </summary>
            <param name="getProcAddress">Function pointer for retrieving GDExtension API.</param>
            <param name="library">Pointer that identifies the library.</param>
            <param name="initialization">Initialization object to configure.</param>
            <param name="configure">Callback to configure the bridge.</param>
        </member>
        <member name="T:Godot.Bridge.GodotBridgeConfiguration">
            <summary>
            Provides configuration to initialize the bridge between Godot and the .NET bindings.
            </summary>
        </member>
        <member name="M:Godot.Bridge.GodotBridgeConfiguration.RegisterInitializer(System.Action{Godot.Bridge.InitializationLevel})">
            <summary>
            Registers the function that will be invoked when initializing the extension.
            The initialization function will be called for all the <see cref="T:Godot.Bridge.InitializationLevel"/>
            values up to the current initialization level in the engine, skipping the
            levels below the minimum set using <see cref="M:Godot.Bridge.GodotBridgeConfiguration.SetMinimumLibraryInitializationLevel(Godot.Bridge.InitializationLevel)"/>.
            </summary>
            <param name="init">Initialization function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotBridgeConfiguration.RegisterTerminator(System.Action{Godot.Bridge.InitializationLevel})">
            <summary>
            Registers the function that will be invoked when terminating the extension.
            The termination function will be called for all the <see cref="T:Godot.Bridge.InitializationLevel"/>
            values starting from the current initialization level in the engine until reaching
            the lowest level.
            </summary>
            <param name="terminate">Termination function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotBridgeConfiguration.SetMinimumLibraryInitializationLevel(Godot.Bridge.InitializationLevel)">
            <summary>
            Sets the minimum required <see cref="T:Godot.Bridge.InitializationLevel"/> for the extension.
            The extension won't be initialized until the engine reaches the requested
            initialization level.
            </summary>
            <param name="level">Minimum initialization level.</param>
        </member>
        <member name="T:Godot.Bridge.InitializationLevel">
            <summary>
            Indicates the level reached by the Godot initialization.
            </summary>
        </member>
        <member name="F:Godot.Bridge.InitializationLevel.Core">
            <summary>
            First initialization level, only the core built-in types are available.
            </summary>
        </member>
        <member name="F:Godot.Bridge.InitializationLevel.Servers">
            <summary>
            Second initialization level, the server classes are available.
            All types initialized in previous levels are also available.
            </summary>
        </member>
        <member name="F:Godot.Bridge.InitializationLevel.Scene">
            <summary>
            Third initialization level, the scene classes are available.
            All types initialized in previous levels are also available.
            </summary>
        </member>
        <member name="F:Godot.Bridge.InitializationLevel.Editor">
            <summary>
            Fourth initialization level, the editor classes are available.
            All types initialized in previous levels are also available.
            </summary>
        </member>
        <member name="T:Godot.Bridge.ConstantInfo">
            <summary>
            Defines a constant registered for a class.
            </summary>
        </member>
        <member name="P:Godot.Bridge.ConstantInfo.Name">
            <summary>
            Name of the constant.
            </summary>
        </member>
        <member name="P:Godot.Bridge.ConstantInfo.Value">
            <summary>
            Value of the constant.
            </summary>
        </member>
        <member name="P:Godot.Bridge.ConstantInfo.EnumName">
            <summary>
            Name of the enum that contains the constant, or <see langword="null"/>
            if the constant is not contained in an enum.
            </summary>
        </member>
        <member name="P:Godot.Bridge.ConstantInfo.IsFlagsEnum">
            <summary>
            Indicates whether the enum that contains the constant can be treated as
            a bit field; that is, set of flags.
            </summary>
        </member>
        <member name="M:Godot.Bridge.ConstantInfo.#ctor(Godot.StringName,System.Int64)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.ConstantInfo"/> with the specified name and value.
            </summary>
            <param name="name">Name of the constant.</param>
            <param name="value">Value of the constant.</param>
        </member>
        <member name="T:Godot.Bridge.MethodInfo">
            <summary>
            Defines a method registered for a class.
            </summary>
        </member>
        <member name="P:Godot.Bridge.MethodInfo.Name">
            <summary>
            Name of the method.
            </summary>
        </member>
        <member name="P:Godot.Bridge.MethodInfo.Parameters">
            <summary>
            Collection of parameter information for the method.
            </summary>
        </member>
        <member name="P:Godot.Bridge.MethodInfo.Return">
            <summary>
            Return information for the method or <see langword="null"/> if the
            method has no return parameter.
            </summary>
        </member>
        <member name="P:Godot.Bridge.MethodInfo.IsStatic">
            <summary>
            Indicates whether the method is static.
            </summary>
        </member>
        <member name="P:Godot.Bridge.MethodInfo.Invoker">
            <summary>
            The <see cref="T:Godot.Bridge.MethodBindInvoker"/> that can invoke this method.
            </summary>
        </member>
        <member name="M:Godot.Bridge.MethodInfo.#ctor(Godot.StringName,Godot.Bridge.MethodBindInvoker)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.MethodInfo"/> with the specified name and an invoker.
            </summary>
            <param name="name">Name of the method.</param>
            <param name="invoker">Invoker for the method.</param>
        </member>
        <member name="T:Godot.Bridge.ParameterInfo">
            <summary>
            Defines a parameter in a <see cref="T:Godot.Bridge.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Godot.Bridge.ParameterInfo.DefaultValue">
            <summary>
            Default value for this parameter or <see langword="null"/> if this parameter is required.
            </summary>
        </member>
        <member name="M:Godot.Bridge.ParameterInfo.#ctor(Godot.StringName,Godot.VariantType,Godot.Bridge.VariantTypeMetadata)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.ParameterInfo"/> with the specified name and type.
            </summary>
            <param name="type">Type of the parameter.</param>
            <param name="name">Name of the parameter.</param>
            <param name="metadata">Type metadata of the parameter.</param>
        </member>
        <member name="M:Godot.Bridge.ParameterInfo.#ctor(Godot.StringName,Godot.VariantType,Godot.Bridge.VariantTypeMetadata,Godot.Variant)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.ParameterInfo"/> with the specified name, type, and default value.
            </summary>
            <param name="type">Type of the parameter.</param>
            <param name="name">Name of the parameter.</param>
            <param name="metadata">Type metadata of the parameter.</param>
            <param name="defaultValue">Default value for the parameter.</param>
        </member>
        <member name="T:Godot.Bridge.PropertyInfo">
            <summary>
            Defines a member registered for a class.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.Type">
            <summary>
            The member's type.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.TypeMetadata">
            <summary>
            The member's type metadata.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.Name">
            <summary>
            Name of the member.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.Hint">
            <summary>
            Hint that determines how the member should be handled by the editor.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.HintString">
            <summary>
            Additional metadata for <see cref="P:Godot.Bridge.PropertyInfo.Hint"/>.
            The contents and format of the string depend on the type of hint.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.ClassName">
            <summary>
            Name of the member's type when <see cref="P:Godot.Bridge.PropertyInfo.Type"/> is <see cref="F:Godot.VariantType.Object"/>
            and the type is a registered class. Otherwise, it should be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfo.Usage">
            <summary>
            Flags that determine how the member should be handled by the editor.
            </summary>
        </member>
        <member name="M:Godot.Bridge.PropertyInfo.#ctor(Godot.StringName,Godot.VariantType,Godot.Bridge.VariantTypeMetadata)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.PropertyInfo"/> with the specified name, type, and type metadata.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="metadata">Type metadata of the property.</param>
        </member>
        <member name="T:Godot.Bridge.PropertyInfoWithAccessors">
            <summary>
            Defines a property registered for a class.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfoWithAccessors.GetterName">
            <summary>
            Name of a registered method to be used as the getter of this property.
            </summary>
        </member>
        <member name="P:Godot.Bridge.PropertyInfoWithAccessors.SetterName">
            <summary>
            Name of a registered method to be used as the setter of this property.
            </summary>
        </member>
        <member name="M:Godot.Bridge.PropertyInfoWithAccessors.#ctor(Godot.StringName,Godot.VariantType,Godot.StringName,Godot.StringName)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.PropertyInfo"/> with the specified name, type, getter, and setter.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="getterName">Name of the registered method to be used as the getter of the property.</param>
            <param name="setterName">Name of the registered method to be used as the setter of the property.</param>
        </member>
        <member name="T:Godot.Bridge.ReturnInfo">
            <summary>
            Defines the return parameter of a <see cref="T:Godot.Bridge.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Godot.Bridge.ReturnInfo.#ctor(Godot.VariantType,Godot.Bridge.VariantTypeMetadata)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.ReturnInfo"/> with the specified type.
            </summary>
            <param name="type">Type of the return parameter.</param>
            <param name="metadata">Type metadata of the property.</param>
        </member>
        <member name="T:Godot.Bridge.SignalInfo">
            <summary>
            Defines a signal registered for a class.
            </summary>
        </member>
        <member name="P:Godot.Bridge.SignalInfo.Name">
            <summary>
            Name of the signal.
            </summary>
        </member>
        <member name="P:Godot.Bridge.SignalInfo.Parameters">
            <summary>
            Collection of parameter information for the signal delegate.
            </summary>
        </member>
        <member name="M:Godot.Bridge.SignalInfo.#ctor(Godot.StringName)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.SignalInfo"/> with the specified name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Godot.Bridge.VirtualMethodInfo">
            <summary>
            Defines a virtual method registered for a class.
            A virtual method is a method that can be overridden in user scripts
            but the extension class must call the script implementation using
            <see cref="M:Godot.GodotObject.CallVirtualMethod(Godot.StringName)"/> or
            <see cref="M:Godot.GodotObject.TryCallVirtualMethod(Godot.StringName)"/>.
            </summary>
        </member>
        <member name="P:Godot.Bridge.VirtualMethodInfo.Name">
            <summary>
            Name of the method.
            </summary>
        </member>
        <member name="P:Godot.Bridge.VirtualMethodInfo.Parameters">
            <summary>
            Collection of parameter information for the method.
            </summary>
        </member>
        <member name="P:Godot.Bridge.VirtualMethodInfo.Return">
            <summary>
            Return information for the method or <see langword="null"/> if the
            method has no return parameter.
            </summary>
        </member>
        <member name="M:Godot.Bridge.VirtualMethodInfo.#ctor(Godot.StringName)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.VirtualMethodInfo"/> with the specified name.
            </summary>
            <param name="name">Name of the method.</param>
        </member>
        <member name="T:Godot.Bridge.VirtualMethodOverrideInfo">
            <summary>
            Defines a virtual method override registered for a class.
            A virtual method override is the method in an extension class that is bound
            as the override of a virtual method in a built-in class.
            </summary>
        </member>
        <member name="P:Godot.Bridge.VirtualMethodOverrideInfo.Name">
            <summary>
            Name of the method.
            </summary>
        </member>
        <member name="P:Godot.Bridge.VirtualMethodOverrideInfo.Invoker">
            <summary>
            The <see cref="T:Godot.Bridge.MethodBindInvoker"/> that can invoke this method.
            </summary>
        </member>
        <member name="M:Godot.Bridge.VirtualMethodOverrideInfo.#ctor(Godot.StringName,Godot.Bridge.MethodBindInvoker)">
            <summary>
            Constructs a new <see cref="T:Godot.Bridge.VirtualMethodOverrideInfo"/> with the specified
            name and an invoker.
            </summary>
            <param name="name">Name of the method.</param>
            <param name="invoker">Invoker for the method.</param>
        </member>
        <member name="T:Godot.Bridge.ClassRegistrationContext">
            <summary>
            Context for registering classes and their members within the Godot engine.
            </summary>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindConstant(Godot.Bridge.ConstantInfo)">
            <summary>
            Register a constant in the class.
            </summary>
            <param name="constantInfo">Information that describes the constant to register.</param>
            <exception cref="T:System.ArgumentException">
            A constant has already been registered with the same name.
            </exception>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindConstructor(System.Func{Godot.GodotObject})">
            <summary>
            Register a function to construct a new instance of the class.
            </summary>
            <param name="constructor">Function that constructs the class.</param>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindMethod(Godot.Bridge.MethodInfo)">
            <summary>
            Register a method in the class.
            </summary>
            <param name="methodInfo">Information that describes the method to register.</param>
            <exception cref="T:System.ArgumentException">
            A method has already been registered with the same name.
            </exception>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindProperty(Godot.Bridge.PropertyInfoWithAccessors)">
            <summary>
            Register a property in the class.
            </summary>
            <remarks>
            The <paramref name="propertyInfo"/> must include the names of the methods
            to be used as getter and setter. These methods must have previously been
            registered using <see cref="M:Godot.Bridge.ClassRegistrationContext.BindMethod(Godot.Bridge.MethodInfo)"/>.
            </remarks>
            <param name="propertyInfo">Information that describes the property to register.</param>
            <exception cref="T:System.ArgumentException">
            A property has already been registered with the same name.
            </exception>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindProperty``2(Godot.Bridge.PropertyInfo,System.Func{``0,``1},System.Action{``0,``1})">
            <summary>
            Register a property in the class.
            </summary>
            <typeparam name="TInstance">Type of the class that contains the property.</typeparam>
            <typeparam name="TValue">Type of the property.</typeparam>
            <param name="propertyInfo">Information that describes the property to register.</param>
            <param name="getter">Method or lambda that gets the property's value.</param>
            <param name="setter">Method or lambda that sets the property's value.</param>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.AddPropertyGroup(System.String,System.String)">
            <summary>
            Register a property group in the class.
            </summary>
            <param name="groupName">Name of the group to register.</param>
            <param name="prefix">Prefix used by properties in the group.</param>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.AddPropertySubgroup(System.String,System.String)">
            <summary>
            Register a property subgroup in the class.
            </summary>
            <param name="subgroupName">Name of the subgroup to register.</param>
            <param name="prefix">Prefix used by properties in the subgroup.</param>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindSignal(Godot.Bridge.SignalInfo)">
            <summary>
            Register a signal in the class.
            The registered class can be emitted with
            <see cref="M:Godot.GodotObject.EmitSignal(Godot.StringName,System.ReadOnlySpan{Godot.Variant})"/>
            using the name that the signal was registered with.
            </summary>
            <param name="signalInfo">Information that describes the signal to register.</param>
            <exception cref="T:System.ArgumentException">
            A signal has already been registered with the same name.
            </exception>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindVirtualMethod(Godot.Bridge.VirtualMethodInfo)">
            <summary>
            Register a virtual method in the class.
            Virtual methods can be overridden in user scripts, but the extension implementation
            of the method must use <see cref="M:Godot.GodotObject.CallVirtualMethod(Godot.StringName)"/>
            or <see cref="M:Godot.GodotObject.TryCallVirtualMethod(Godot.StringName)"/> to call the script
            override.
            </summary>
            <param name="methodInfo">Information that describes the method to register.</param>
            <exception cref="T:System.ArgumentException">
            A method has already been registered with the same name.
            </exception>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.BindVirtualMethodOverride(Godot.Bridge.VirtualMethodOverrideInfo)">
            <summary>
            Register the override of a built-in virtual method in the class.
            This is used to bind the specified callback as the override of a virtual method
            in a built-in class. To register virtual methods provided by the extension class
            use <see cref="M:Godot.Bridge.ClassRegistrationContext.BindVirtualMethod(Godot.StringName)"/>.
            </summary>
            <param name="virtualMethodInfo">Information that describes the method to register.</param>
            <exception cref="T:System.ArgumentException">
            A method has already been registered with the same name.
            </exception>
        </member>
        <member name="P:Godot.Bridge.ClassRegistrationContext.IconPath">
            <summary>
            Path to the image that will be used as the class' icon.
            </summary>
        </member>
        <member name="M:Godot.Bridge.ClassRegistrationContext.SetIcon(System.String)">
            <summary>
            Set the icon for the class. If an icon is not provided or <paramref name="iconPath"/>
            is <see langword="null"/>, the icon will be inherited from the base class.
            </summary>
            <param name="iconPath">Path to the image that will be used as the class' icon.</param>
        </member>
        <member name="T:Godot.Bridge.GodotRegistry">
            <summary>
            Utility to register classes and their members within the Godot engine,
            and to add or remove editor plugins.
            </summary>
        </member>
        <member name="M:Godot.Bridge.GodotRegistry.RegisterClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})">
            <summary>
            Registers a class with a configuration function that registers its members.
            Classes registered with this method will also run in the editor, to avoid this
            use <see cref="M:Godot.Bridge.GodotRegistry.RegisterRuntimeClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})"/>.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <param name="configure">The configuration function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotRegistry.RegisterRuntimeClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})">
            <summary>
            Registers a runtime class with a configuration function that registers its members.
            Runtime classes don't run in the editor, to register classes that also run in the editor
            use <see cref="M:Godot.Bridge.GodotRegistry.RegisterClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})"/>.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <param name="configure">The configuration function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotRegistry.RegisterVirtualClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})">
            <summary>
            Registers a virtual class with a configuration function that registers its members.
            Virtual classes can't be instantiated in user scripts but can be derived and used
            as an export type.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <param name="configure">The configuration function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotRegistry.RegisterAbstractClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})">
            <summary>
            Registers an abstract class with a configuration function that registers its members.
            Abstract classes can't be instantiated or derived in user scripts, but can still be
            used as an export type.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <param name="configure">The configuration function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotRegistry.RegisterInternalClass``1(System.Action{Godot.Bridge.ClassRegistrationContext})">
            <summary>
            Registers an internal class with a configuration function that registers its members.
            Internal classes are hidden in the editor so users won't see them.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <param name="configure">The configuration function.</param>
        </member>
        <member name="M:Godot.Bridge.GodotRegistry.AddEditorPluginByType``1">
            <summary>
            Register <typeparamref name="T"/> as an <see cref="T:Godot.EditorPlugin"/>
            in the engine.
            </summary>
            <typeparam name="T">Type of the editor plugin.</typeparam>
            <exception cref="T:System.InvalidOperationException">
            A type has already been registered
            </exception>
        </member>
        <member name="T:Godot.Bridge.MethodBindInvoker">
            <summary>
            Helper to invoke methods registered for a class with <see cref="T:Godot.Bridge.ClassRegistrationContext"/>.
            </summary>
        </member>
        <member name="T:Godot.Bridge.VariantTypeMetadata">
            <summary>
            Describes the real type that a Variant represents.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.None">
            <summary>
            Variant type has no metadata.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.SByte">
            <summary>
            Variant integer represents a <see langword="sbyte"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Int16">
            <summary>
            Variant integer represents a <see langword="short"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Int32">
            <summary>
            Variant integer represents an <see langword="int"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Int64">
            <summary>
            Variant integer represents a <see langword="long"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Byte">
            <summary>
            Variant integer represents a <see langword="byte"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.UInt16">
            <summary>
            Variant integer represents an <see langword="ushort"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.UInt32">
            <summary>
            Variant integer represents an <see langword="uint"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.UInt64">
            <summary>
            Variant integer represents a <see langword="ulong"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Single">
            <summary>
            Variant floating point represents a <see langword="float"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Double">
            <summary>
            Variant floating point represents a <see langword="double"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Char16">
            <summary>
            Variant integer represents a <see langword="char"/>.
            </summary>
        </member>
        <member name="F:Godot.Bridge.VariantTypeMetadata.Char32">
            <summary>
            Variant integer represents a <see cref="T:System.Text.Rune"/>.
            </summary>
        </member>
        <member name="T:Godot.BindConstantAttribute">
            <summary>
            Registers the annotated constant within an extension class.
            It can also be used to annotate enum members to customize binding.
            </summary>
        </member>
        <member name="P:Godot.BindConstantAttribute.Name">
            <summary>
            Specifies the name that will be used to register the constant.
            If unspecified it will use the name of the annotated constant.
            </summary>
        </member>
        <member name="T:Godot.BindConstructorAttribute">
            <summary>
            Registers the annotated static method as the constructor of an extension class.
            </summary>
        </member>
        <member name="T:Godot.BindEnumAttribute">
            <summary>
            Registers the annotated enum within an extension class.
            </summary>
        </member>
        <member name="P:Godot.BindEnumAttribute.Name">
            <summary>
            Specifies the name that will be used to register the enum.
            If unspecified it will use the name of the annotated enum.
            </summary>
        </member>
        <member name="T:Godot.BindMethodAttribute">
            <summary>
            Registers the annotated method within an extension class.
            </summary>
        </member>
        <member name="P:Godot.BindMethodAttribute.Name">
            <summary>
            Specifies the name that will be used to register the method.
            If unspecified it will use the name of the annotated method.
            </summary>
        </member>
        <member name="P:Godot.BindMethodAttribute.Virtual">
            <summary>
            Determines whether the method is registered as a virtual method
            and if the method must be overridden in user scripts.
            </summary>
        </member>
        <member name="T:Godot.BindPropertyAttribute">
            <summary>
            Registers the annotated property within an extension class.
            It can also be used to annotate method parameters to customize marshalling.
            </summary>
        </member>
        <member name="P:Godot.BindPropertyAttribute.Name">
            <summary>
            Specifies the name that will be used to register the property.
            If unspecified it will use the name of the annotated property.
            </summary>
        </member>
        <member name="P:Godot.BindPropertyAttribute.Marshaller">
            <summary>
            Specifies the marshaller type that will be used to marshal this property.
            If unspecified the default marshaller for the annotated property's type
            will be used instead. If there is no default marshaller, a marshaller must
            be specified.
            </summary>
        </member>
        <member name="P:Godot.BindPropertyAttribute.MarshalAs">
            <summary>
            Specifies the Variant type that this property will be marshalled as.
            The marshaller will use this information to determine how to marshal the
            property.
            If unspecified (<see cref="F:Godot.VariantType.Nil"/>) the Variant type will be
            determined from the annotated property's type.
            </summary>
        </member>
        <member name="T:Godot.DisableGodotEntryPointGenerationAttribute">
            <summary>
            Disable the generation of the GDExtension entry-point, so it can
            be manually implemented.
            </summary>
        </member>
        <member name="T:Godot.GodotClassAttribute">
            <summary>
            Registers the annotated class as an extension class within the Godot engine.
            </summary>
        </member>
        <member name="P:Godot.GodotClassAttribute.Tool">
            <summary>
            Determines if the class is registered as a tool, instead of a runtime class.
            Tool classes run in the editor.
            </summary>
        </member>
        <member name="P:Godot.GodotClassAttribute.Icon">
            <summary>
            Path to an image that will be used as the class' icon in the editor.
            When not provided the icon will be inherited from the base class.
            </summary>
        </member>
        <member name="T:Godot.GodotNativeClassNameAttribute">
            <summary>
            Internal attribute used to specify the name of a built-in Godot class
            as is registered in ClassDB.
            This attribute is only added to classes that have a different name in the
            generated bindings than the one they use in ClassDB.
            The source generators use this attribute to determine the name of built-in
            classes
            </summary>
        </member>
        <member name="T:Godot.MustBeVariantAttribute">
            <summary>
            Attribute that restricts generic type parameters to be only types
            that can be marshaled from/to a <see cref="T:Godot.Variant"/>.
            </summary>
        </member>
        <member name="T:Godot.PropertyGroupAttribute">
            <summary>
            Registers a property group within an extension class.
            </summary>
        </member>
        <member name="P:Godot.PropertyGroupAttribute.Name">
            <summary>
            Specifies the name of the property group.
            </summary>
        </member>
        <member name="P:Godot.PropertyGroupAttribute.Prefix">
            <summary>
            Specifies the prefix used by the properties that will be included in the group.
            </summary>
        </member>
        <member name="M:Godot.PropertyGroupAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs a <see cref="T:Godot.PropertyGroupAttribute"/>.
            </summary>
        </member>
        <member name="T:Godot.PropertySubgroupAttribute">
            <summary>
            Registers a property subgroup within an extension class.
            </summary>
        </member>
        <member name="P:Godot.PropertySubgroupAttribute.Name">
            <summary>
            Specifies the name of the property subgroup.
            </summary>
        </member>
        <member name="P:Godot.PropertySubgroupAttribute.Prefix">
            <summary>
            Specifies the prefix used by the properties that will be included in the subgroup.
            </summary>
        </member>
        <member name="M:Godot.PropertySubgroupAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs a <see cref="T:Godot.PropertySubgroupAttribute"/>.
            </summary>
        </member>
        <member name="T:Godot.SignalAttribute">
            <summary>
            Registers the annotated delegate as a signal within an extension class.
            </summary>
        </member>
        <member name="P:Godot.SignalAttribute.Name">
            <summary>
            Specifies the name that will be used to register the signal.
            If unspecified it will use the name of the annotated delegate.
            </summary>
        </member>
        <member name="T:Godot.MissingGodotMemberException">
            <summary>
            Exception that is thrown when there is an attempt to access a member in
            Godot API that could not be found in the engine.
            Likely because the native member has been removed or changed to an
            incompatible version.
            </summary>
        </member>
        <member name="T:Godot.MissingGodotMethodException">
            <summary>
            Exception that is thrown when there is an attempt to access a method in
            Godot API that could not be found in the engine.
            Likely because the native method has been removed or changed to an
            incompatible version.
            </summary>
        </member>
        <member name="T:Godot.GD">
            <summary>
            Godot's global functions.
            </summary>
        </member>
        <member name="M:Godot.GD.BytesToVar(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes a byte array back to a <see cref="T:Godot.Variant"/> value, without decoding objects.
            Note: If you need object deserialization, see <see cref="M:Godot.GD.BytesToVarWithObjects(System.ReadOnlySpan{System.Byte})"/>.
            </summary>
            <param name="bytes">Byte array that will be decoded to a <see cref="T:Godot.Variant"/>.</param>
            <returns>The decoded <see cref="T:Godot.Variant"/>.</returns>
        </member>
        <member name="M:Godot.GD.BytesToVarWithObjects(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes a byte array back to a <see cref="T:Godot.Variant"/> value. Decoding objects is allowed.
            Warning: Deserialized object can contain code which gets executed. Do not use this
            option if the serialized object comes from untrusted sources to avoid potential security
            threats (remote code execution).
            </summary>
            <param name="bytes">Byte array that will be decoded to a <see cref="T:Godot.Variant"/>.</param>
            <returns>The decoded <see cref="T:Godot.Variant"/>.</returns>
        </member>
        <member name="M:Godot.GD.TypeConvert(Godot.Variant,Godot.VariantType)">
             <summary>
             Converts <paramref name="what"/> to <paramref name="type"/> in the best way possible.
             The <paramref name="type"/> parameter uses the <see cref="T:Godot.VariantType"/> values.
             </summary>
             <example>
             <code>
             Variant a = new GodotArray { 4, 2.5, 1.2 };
             GD.Print(a.VariantType == VariantType.Array); // Prints true
            
             var b = GD.TypeConvert(a, VariantType.PackedByteArray);
             GD.Print(b); // Prints [4, 2, 1]
             GD.Print(b.VariantType == VariantType.Array); // Prints false
             </code>
             </example>
             <returns>The <c>Variant</c> converted to the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:Godot.GD.Hash(Godot.Variant)">
            <summary>
            Returns the integer hash of the passed <paramref name="var"/>.
            </summary>
            <example>
            <code>
            GD.Print(GD.Hash("a")); // Prints 177670
            </code>
            </example>
            <param name="var">Variable that will be hashed.</param>
            <returns>Hash of the variable passed.</returns>
        </member>
        <member name="M:Godot.GD.Load(System.String)">
             <summary>
             Loads a resource from the filesystem located at <paramref name="path"/>.
             The resource is loaded on the method call (unless it's referenced already
             elsewhere, e.g. in another script or in the scene), which might cause slight delay,
             especially when loading scenes. To avoid unnecessary delays when loading something
             multiple times, either store the resource in a variable.
            
             Note: Resource paths can be obtained by right-clicking on a resource in the FileSystem
             dock and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.
            
             Important: The path must be absolute, a local path will just return <see langword="null"/>.
             This method is a simplified version of <see cref="M:Godot.ResourceLoader.Load(System.String,System.String,Godot.ResourceLoader.CacheMode)"/>, which can be used
             for more advanced scenarios.
             </summary>
             <example>
             <code>
             // Load a scene called main located in the root of the project directory and cache it in a variable.
             var main = GD.Load("res://main.tscn"); // main will contain a PackedScene resource.
             </code>
             </example>
             <param name="path">Path of the <see cref="T:Godot.Resource"/> to load.</param>
             <returns>The loaded <see cref="T:Godot.Resource"/>.</returns>
        </member>
        <member name="M:Godot.GD.Load``1(System.String)">
             <summary>
             Loads a resource from the filesystem located at <paramref name="path"/>.
             The resource is loaded on the method call (unless it's referenced already
             elsewhere, e.g. in another script or in the scene), which might cause slight delay,
             especially when loading scenes. To avoid unnecessary delays when loading something
             multiple times, either store the resource in a variable.
            
             Note: Resource paths can be obtained by right-clicking on a resource in the FileSystem
             dock and choosing "Copy Path" or by dragging the file from the FileSystem dock into the script.
            
             Important: The path must be absolute, a local path will just return <see langword="null"/>.
             This method is a simplified version of <see cref="M:Godot.ResourceLoader.Load(System.String,System.String,Godot.ResourceLoader.CacheMode)"/>, which can be used
             for more advanced scenarios.
             </summary>
             <example>
             <code>
             // Load a scene called main located in the root of the project directory and cache it in a variable.
             var main = GD.Load&lt;PackedScene&gt;("res://main.tscn"); // main will contain a PackedScene resource.
             </code>
             </example>
             <param name="path">Path of the <see cref="T:Godot.Resource"/> to load.</param>
             <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Resource"/>.</typeparam>
        </member>
        <member name="M:Godot.GD.Print(System.String)">
             <summary>
             Prints a message to the console.
            
             Note: Consider using <see cref="M:Godot.GD.PushError(System.String)"/> and <see cref="M:Godot.GD.PushWarning(System.String)"/>
             to print error and warning messages instead of <see cref="M:Godot.GD.Print(System.String)"/>.
             This distinguishes them from print messages used for debugging purposes,
             while also displaying a stack trace when an error or warning is printed.
             </summary>
             <param name="what">Message that will be printed.</param>
        </member>
        <member name="M:Godot.GD.Print(System.Object[])">
             <summary>
             Converts one or more arguments of any type to string in the best way possible
             and prints them to the console.
            
             Note: Consider using <see cref="M:Godot.GD.PushError(System.Object[])"/> and <see cref="M:Godot.GD.PushWarning(System.Object[])"/>
             to print error and warning messages instead of <see cref="M:Godot.GD.Print(System.Object[])"/>.
             This distinguishes them from print messages used for debugging purposes,
             while also displaying a stack trace when an error or warning is printed.
             </summary>
             <example>
             <code>
             GodotArray a = [1, 2, 3];
             GD.Print("a", "b", a); // Prints ab[1, 2, 3]
             </code>
             </example>
             <param name="what">Arguments that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintRich(System.String)">
             <summary>
             Prints a message to the console.
             The following BBCode tags are supported: b, i, u, s, indent, code, url, center,
             right, color, bgcolor, fgcolor.
             Color tags only support named colors such as <c>red</c>, not hexadecimal color codes.
             Unsupported tags will be left as-is in standard output.
             When printing to standard output, the supported subset of BBCode is converted to
             ANSI escape codes for the terminal emulator to display. Displaying ANSI escape codes
             is currently only supported on Linux and macOS. Support for ANSI escape codes may vary
             across terminal emulators, especially for italic and strikethrough.
            
             Note: Consider using <see cref="M:Godot.GD.PushError(System.String)"/> and <see cref="M:Godot.GD.PushWarning(System.String)"/>
             to print error and warning messages instead of <see cref="M:Godot.GD.Print(System.String)"/> or
             <see cref="M:Godot.GD.PrintRich(System.String)"/>.
             This distinguishes them from print messages used for debugging purposes,
             while also displaying a stack trace when an error or warning is printed.
             </summary>
             <param name="what">Message that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintRich(System.Object[])">
             <summary>
             Converts one or more arguments of any type to string in the best way possible
             and prints them to the console.
             The following BBCode tags are supported: b, i, u, s, indent, code, url, center,
             right, color, bgcolor, fgcolor.
             Color tags only support named colors such as <c>red</c>, not hexadecimal color codes.
             Unsupported tags will be left as-is in standard output.
             When printing to standard output, the supported subset of BBCode is converted to
             ANSI escape codes for the terminal emulator to display. Displaying ANSI escape codes
             is currently only supported on Linux and macOS. Support for ANSI escape codes may vary
             across terminal emulators, especially for italic and strikethrough.
            
             Note: Consider using <see cref="M:Godot.GD.PushError(System.Object[])"/> and <see cref="M:Godot.GD.PushWarning(System.Object[])"/>
             to print error and warning messages instead of <see cref="M:Godot.GD.Print(System.Object[])"/> or
             <see cref="M:Godot.GD.PrintRich(System.Object[])"/>.
             This distinguishes them from print messages used for debugging purposes,
             while also displaying a stack trace when an error or warning is printed.
             </summary>
             <example>
             <code>
             GD.PrintRich("[code][b]Hello world![/b][/code]"); // Prints out: [b]Hello world![/b]
             </code>
             </example>
             <param name="what">Arguments that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintErr(System.String)">
            <summary>
            Prints a message to standard error line.
            </summary>
            <param name="what">Message that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintErr(System.Object[])">
            <summary>
            Prints one or more arguments to strings in the best way possible to standard error line.
            </summary>
            <example>
            <code>
            GD.PrintErr("prints to stderr");
            </code>
            </example>
            <param name="what">Arguments that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintRaw(System.String)">
            <summary>
            Prints a message to the OS terminal.
            Unlike <see cref="M:Godot.GD.Print(System.String)"/>, no newline is added at the end.
            </summary>
            <param name="what">Message that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintRaw(System.Object[])">
            <summary>
            Prints one or more arguments to strings in the best way possible to the OS terminal.
            Unlike <see cref="M:Godot.GD.Print(System.Object[])"/>, no newline is added at the end.
            </summary>
            <example>
            <code>
            GD.PrintRaw("A");
            GD.PrintRaw("B");
            GD.PrintRaw("C");
            // Prints ABC to terminal
            </code>
            </example>
            <param name="what">Arguments that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintS(System.Object[])">
            <summary>
            Prints one or more arguments to the console with a space between each argument.
            </summary>
            <example>
            <code>
            GD.PrintS("A", "B", "C"); // Prints A B C
            </code>
            </example>
            <param name="what">Arguments that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PrintT(System.Object[])">
            <summary>
            Prints one or more arguments to the console with a tab between each argument.
            </summary>
            <example>
            <code>
            GD.PrintT("A", "B", "C"); // Prints A       B       C
            </code>
            </example>
            <param name="what">Arguments that will be printed.</param>
        </member>
        <member name="M:Godot.GD.PushError(System.String)">
             <summary>
             Pushes an error message to Godot's built-in debugger and to the OS terminal.
            
             Note: Errors printed this way will not pause project execution.
             </summary>
             <example>
             <code>
             GD.PushError("test error"); // Prints "test error" to debugger and terminal as error call
             </code>
             </example>
             <param name="message">Error message.</param>
        </member>
        <member name="M:Godot.GD.PushError(System.Object[])">
             <summary>
             Pushes an error message to Godot's built-in debugger and to the OS terminal.
            
             Note: Errors printed this way will not pause project execution.
             </summary>
             <example>
             <code>
             GD.PushError("test_error"); // Prints "test error" to debugger and terminal as error call
             </code>
             </example>
             <param name="what">Arguments that form the error message.</param>
        </member>
        <member name="M:Godot.GD.PushWarning(System.String)">
            <summary>
            Pushes a warning message to Godot's built-in debugger and to the OS terminal.
            </summary>
            <example>
            <code>
            GD.PushWarning("test warning"); // Prints "test warning" to debugger and terminal as warning call
            </code>
            </example>
            <param name="message">Warning message.</param>
        </member>
        <member name="M:Godot.GD.PushWarning(System.Object[])">
            <summary>
            Pushes a warning message to Godot's built-in debugger and to the OS terminal.
            </summary>
            <example>
            <code>
            GD.PushWarning("test warning"); // Prints "test warning" to debugger and terminal as warning call
            </code>
            </example>
            <param name="what">Arguments that form the warning message.</param>
        </member>
        <member name="M:Godot.GD.Randf">
            <summary>
            Returns a random floating point value between <c>0.0</c> and <c>1.0</c> (inclusive).
            </summary>
            <example>
            <code>
            GD.Randf(); // Returns e.g. 0.375671
            </code>
            </example>
            <returns>A random <see langword="float"/> number.</returns>
        </member>
        <member name="M:Godot.GD.Randfn(System.Double,System.Double)">
            <summary>
            Returns a normally-distributed pseudo-random floating point value
            using Box-Muller transform with the specified <pararmref name="mean"/>
            and a standard <paramref name="deviation"/>.
            This is also called Gaussian distribution.
            </summary>
            <returns>A random normally-distributed <see langword="float"/> number.</returns>
        </member>
        <member name="M:Godot.GD.Randi">
            <summary>
            Returns a random unsigned 32-bit integer.
            Use remainder to obtain a random value in the interval <c>[0, N - 1]</c>
            (where N is smaller than 2^32).
            </summary>
            <example>
            <code>
            GD.Randi();           // Returns random integer between 0 and 2^32 - 1
            GD.Randi() % 20;      // Returns random integer between 0 and 19
            GD.Randi() % 100;     // Returns random integer between 0 and 99
            GD.Randi() % 100 + 1; // Returns random integer between 1 and 100
            </code>
            </example>
            <returns>A random <see langword="uint"/> number.</returns>
        </member>
        <member name="M:Godot.GD.Randomize">
             <summary>
             Randomizes the seed (or the internal state) of the random number generator.
             The current implementation uses a number based on the device's time.
            
             Note: This method is called automatically when the project is run.
             If you need to fix the seed to have consistent, reproducible results,
             use <see cref="M:Godot.GD.Seed(System.UInt64)"/> to initialize the random number generator.
             </summary>
        </member>
        <member name="M:Godot.GD.RandRange(System.Double,System.Double)">
            <summary>
            Returns a random floating point value between <paramref name="from"/>
            and <paramref name="to"/> (inclusive).
            </summary>
            <example>
            <code>
            GD.RandRange(0.0, 20.5);   // Returns e.g. 7.45315
            GD.RandRange(-10.0, 10.0); // Returns e.g. -3.844535
            </code>
            </example>
            <returns>A random <see langword="double"/> number inside the given range.</returns>
        </member>
        <member name="M:Godot.GD.RandRange(System.Int32,System.Int32)">
            <summary>
            Returns a random signed 32-bit integer between <paramref name="from"/>
            and <paramref name="to"/> (inclusive). If <paramref name="to"/> is lesser than
            <paramref name="from"/>, they are swapped.
            </summary>
            <example>
            <code>
            GD.RandRange(0, 1);      // Returns either 0 or 1
            GD.RandRange(-10, 1000); // Returns random integer between -10 and 1000
            </code>
            </example>
            <returns>A random <see langword="int"/> number inside the given range.</returns>
        </member>
        <member name="M:Godot.GD.RandFromSeed(System.UInt64@)">
             <summary>
             Given a <paramref name="seed"/>, returns a randomized <see langword="uint"/>
             value. The <paramref name="seed"/> may be modified.
             Passing the same <paramref name="seed"/> consistently returns the same value.
            
             Note: "Seed" here refers to the internal state of the pseudo random number
             generator, currently implemented as a 64 bit integer.
             </summary>
             <example>
             <code>
             var a = GD.RandFromSeed(4);
             </code>
             </example>
             <param name="seed">
             Seed to use to generate the random number.
             If a different seed is used, its value will be modified.
             </param>
             <returns>A random <see langword="uint"/> number.</returns>
        </member>
        <member name="M:Godot.GD.Range(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> that iterates from
            <c>0</c> (inclusive) to <paramref name="end"/> (exclusive)
            in steps of <c>1</c>.
            </summary>
            <param name="end">The last index.</param>
        </member>
        <member name="M:Godot.GD.Range(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> that iterates from
            <paramref name="start"/> (inclusive) to <paramref name="end"/> (exclusive)
            in steps of <c>1</c>.
            </summary>
            <param name="start">The first index.</param>
            <param name="end">The last index.</param>
        </member>
        <member name="M:Godot.GD.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> that iterates from
            <paramref name="start"/> (inclusive) to <paramref name="end"/> (exclusive)
            in steps of <paramref name="step"/>.
            The argument <paramref name="step"/> can be negative, but not <c>0</c>.
            </summary>
            <exception cref="T:System.ArgumentException">
            <paramref name="step"/> is 0.
            </exception>
            <param name="start">The first index.</param>
            <param name="end">The last index.</param>
            <param name="step">The amount by which to increment the index on each iteration.</param>
        </member>
        <member name="M:Godot.GD.Seed(System.UInt64)">
            <summary>
            Sets seed for the random number generator to <paramref name="seed"/>.
            Setting the seed manually can ensure consistent, repeatable results for
            most random functions.
            </summary>
            <example>
            <code>
            ulong mySeed = (ulong)GD.Hash("Godot Rocks");
            GD.Seed(mySeed);
            var a = GD.Randf() + GD.Randi();
            GD.Seed(mySeed);
            var b = GD.Randf() + GD.Randi();
            // a and b are now identical
            </code>
            </example>
            <param name="seed">Seed that will be used.</param>
        </member>
        <member name="M:Godot.GD.StrToVar(System.String)">
            <summary>
            Converts a formatted string that was returned by <see cref="M:Godot.GD.VarToStr(Godot.Variant)"/>
            to the original value.
            </summary>
            <example>
            <code>
            string a = "{ \"a\": 1, \"b\": 2 }";        // a is a string
            var b = GD.StrToVar(a).AsGodotDictionary(); // b is a Dictionary
            GD.Print(b["a"]);                           // Prints 1
            </code>
            </example>
            <param name="str">String that will be converted to Variant.</param>
            <returns>The decoded <c>Variant</c>.</returns>
        </member>
        <member name="M:Godot.GD.VarToBytes(Godot.Variant)">
            <summary>
            Encodes a <see cref="T:Godot.Variant"/> value to a byte array, without encoding objects.
            Deserialization can be done with <see cref="M:Godot.GD.BytesToVar(System.ReadOnlySpan{System.Byte})"/>.
            Note: If you need object serialization, see <see cref="M:Godot.GD.VarToBytesWithObjects(Godot.Variant)"/>.
            </summary>
            <param name="var"><see cref="T:Godot.Variant"/> that will be encoded.</param>
            <returns>The <see cref="T:Godot.Variant"/> encoded as an array of bytes.</returns>
        </member>
        <member name="M:Godot.GD.VarToBytesWithObjects(Godot.Variant)">
            <summary>
            Encodes a <see cref="T:Godot.Variant"/>. Encoding objects is allowed (and can potentially
            include executable code). Deserialization can be done with <see cref="M:Godot.GD.BytesToVarWithObjects(System.ReadOnlySpan{System.Byte})"/>.
            </summary>
            <param name="var"><see cref="T:Godot.Variant"/> that will be encoded.</param>
            <returns>The <see cref="T:Godot.Variant"/> encoded as an array of bytes.</returns>
        </member>
        <member name="M:Godot.GD.VarToStr(Godot.Variant)">
            <summary>
            Converts a <see cref="T:Godot.Variant"/> <paramref name="var"/> to a formatted string that
            can later be parsed using <see cref="M:Godot.GD.StrToVar(System.String)"/>.
            </summary>
            <example>
            <code>
            var a = new GodotDictionary { ["a"] = 1, ["b"] = 2 };
            GD.Print(GD.VarToStr(a));
            // Prints:
            // {
            //     "a": 1,
            //     "b": 2
            // }
            </code>
            </example>
            <param name="var">Variant that will be converted to string.</param>
            <returns>The <see cref="T:Godot.Variant"/> encoded as a string.</returns>
        </member>
        <member name="M:Godot.GodotObject._Notification(System.Int32)">
            <summary>
            Called when the object receives a notification, which can be identified in
            <paramref name="what"/> by comparing it with a constant. See also
            <see cref="M:Godot.GodotObject.Notification(System.Int32,System.Boolean)"/>.
            </summary>
            <example>
            <code>
            protected override void _Notification(int what)
            {
                if (what == NotificationPredelete)
                {
                    GD.Print("Goodbye!");
                }
            }
            </code>
            </example>
            <param name="what">Identifies the notification that was received.</param>
        </member>
        <member name="M:Godot.GodotObject._Set(Godot.StringName,Godot.Variant)">
             <summary>
             Override this method to customize the behavior of <see cref="M:Godot.GodotObject.Set(Godot.StringName,Godot.Variant)"/>.
             Should set the property to <paramref name="value"/> and return <see langword="true"/>,
             or <see langword="false"/> if the property should be handled normally.
             The <i>exact</i> way to set the property is up to this method's implementation.
             Combined with <see cref="M:Godot.GodotObject._Get(Godot.StringName,Godot.Variant@)"/> and
             <see cref="M:Godot.GodotObject._GetPropertyList(System.Collections.Generic.IList{Godot.Bridge.PropertyInfo})"/>, this method allows defining custom
             properties, which is particularly useful for editor plugin. Note that a property
             <i>must</i> be present in <see cref="M:Godot.GodotObject.GetPropertyList"/>, otherwise this method will
             not be called.
             </summary>
             <example>
             <code>
             private GodotDictionary _internalData = [];
            
             protected override bool _Set(StringName property, Variant value)
             {
                 if (property == new StringName("FakeProperty"))
                 {
                     // Storing the value in the fake property.
                     _internalData["FakeProperty"] = value;
                     return true;
                 }
            
                 return false;
             }
            
             protected override void _GetPropertyList(IList&lt;PropertyInfo&gt; properties)
             {
                 properties.Add(new PropertyInfo(VariantType.Int, new StringName("FakeProperty")));
             }
             </code>
             </example>
             <param name="property">Name of the property to handle.</param>
             <param name="value">The value that should be assigned to the property.</param>
             <returns>Whether the property was handled.</returns>
        </member>
        <member name="M:Godot.GodotObject._Get(Godot.StringName,Godot.Variant@)">
             <summary>
             Override this method to customize the behavior of <see cref="M:Godot.GodotObject.Get(Godot.StringName)"/>.
             Should set <paramref name="value"/> to the given property's value and return
             <see langword="true"/>, or <see langword="false"/> if the property should be
             handled normally.
             Combined with <see cref="M:Godot.GodotObject._Set(Godot.StringName,Godot.Variant)"/> and
             <see cref="M:Godot.GodotObject._GetPropertyList(System.Collections.Generic.IList{Godot.Bridge.PropertyInfo})"/>, this method allows defining custom
             properties, which is particularly useful for editor plugin. Note that a property
             <i>must</i> be present in <see cref="M:Godot.GodotObject.GetPropertyList"/>, otherwise this method will
             not be called.
             </summary>
             <example>
             <code>
             private GodotDictionary _internalData = [];
            
             protected override bool _Get(StringName property, out Variant value)
             {
                 if (property == new StringName("FakeProperty"))
                 {
                     GD.Print("Getting my property!");
                     value = 4;
                     return true;
                 }
            
                 value = default;
                 return false;
             }
            
             protected override void _GetPropertyList(IList&lt;PropertyInfo&gt; properties)
             {
                 properties.Add(new PropertyInfo(VariantType.Int, new StringName("FakeProperty")));
             }
             </code>
             </example>
             <param name="property">Name of the property to handle.</param>
             <param name="value">The current value for the property.</param>
             <returns>Whether the property was handled.</returns>
        </member>
        <member name="M:Godot.GodotObject._GetPropertyList(System.Collections.Generic.IList{Godot.Bridge.PropertyInfo})">
             <summary>
             Override this method to provide a custom list of additional properties to
             handle by the engine.
             Should add properties to <paramref name="properties"/>. The result is added
             to the array of <see cref="M:Godot.GodotObject.GetPropertyList"/>.
             You can use <see cref="M:Godot.GodotObject._PropertyCanRevert(Godot.StringName)"/> and
             <see cref="M:Godot.GodotObject._PropertyGetRevert(Godot.StringName,Godot.Variant@)"/> to customize
             the default values of the properties added by this method.
             </summary>
             <example>
             The example below displays a list of numbers shown as words going from
             <c>Zero</c> to <c>Five</c>, with <c>_numberCount</c> controlling the size
             of the list:
             <code>
             [GodotClass(Tool = true)]
             public partial class MyNode : Node
             {
                 private int _numberCount;
            
                 [BindProperty]
                 public int NumberCount
                 {
                     get =&gt; _numberCount;
                     set
                     {
                         _numberCount = value;
                         _numbers.Resize(_numberCount);
                         NotifyPropertyListChanged();
                     }
                 }
            
                 private GodotArray&lt;int&gt; _numbers = new();
            
                 protected override void _GetPropertyList(IList&lt;PropertyInfo&gt; properties)
                 {
                     for (int i = 0; i &lt; _numberCount; i++)
                     {
                         properties.Add(new PropertyInfo(VariantType.Int, new StringName($"number_{i}"))
                         {
                             Hint = PropertyHint.Enum,
                             HintString = "Zero,One,Two,Three,Four,Five",
                         });
                     }
                 }
            
                 protected override bool _Get(StringName property, out Variant value)
                 {
                     string propertyName = property.ToString();
                     if (propertyName.StartsWith("number_"))
                     {
                         int index = int.Parse(propertyName.Substring("number_".Length));
                         return _numbers[index];
                     }
                     return default;
                 }
            
                 protected override bool _Set(StringName property, Variant value)
                 {
                     string propertyName = property.ToString();
                     if (propertyName.StartsWith("number_"))
                     {
                         int index = int.Parse(propertyName.Substring("number_".Length));
                         numbers[index] = value.As&lt;int&gt;();
                         return true;
                     }
                     return false;
                 }
             }
             </code>
             </example>
             <param name="properties">The list of properties that should be populated.</param>
        </member>
        <member name="M:Godot.GodotObject._PropertyCanRevert(Godot.StringName)">
            <summary>
            Override this method to customize the given property's revert behavior.
            Should return <see langword="true"/> if the property has a custom default
            value and is revertible in the Inspector dock.
            Use <see cref="M:Godot.GodotObject._PropertyGetRevert(Godot.StringName,Godot.Variant@)"/> to specify
            the property's default value.
            <b>Note:</b> This method must return consistently, regardless of the current
            value of the property.
            </summary>
            <param name="property">Name of the property to handle.</param>
            <returns>Whether the given property can be reverted.</returns>
        </member>
        <member name="M:Godot.GodotObject._PropertyGetRevert(Godot.StringName,Godot.Variant@)">
            <summary>
            Override this method to customize the given property's revert behavior.
            Should return the default value for the property. If the default value
            differs from the property's current value, a revert icon is displayed in
            the Inspector dock.
            <b>Note:</b> <see cref="M:Godot.GodotObject.PropertyCanRevert(Godot.StringName)"/> must also be
            overridden for this method to be called.
            </summary>
            <param name="property">Name of the property to handle.</param>
            <param name="value">Default value for the given property.</param>
            <returns>Whether the given property has a default value.</returns>
        </member>
        <member name="M:Godot.GodotObject._ValidateProperty(Godot.Bridge.PropertyInfo)">
             <summary>
             Override this method to customize existing properties. Every property info
             goes through this method, except properties added with
             <see cref="M:Godot.GodotObject._GetPropertyList(System.Collections.Generic.IList{Godot.Bridge.PropertyInfo})"/>.
             </summary>
             <example>
             <code>
             [GodotClass(Tool = true)]
             public partial class MyNode : Node
             {
                 private bool _isNumberEditable;
            
                 [BindProperty]
                 public bool IsNumberEditable
                 {
                     get =&gt; _isNumberEditable;
                     set
                     {
                         _isNumberEditable = value;
                         NotifyPropertyListChanged();
                     }
                 }
            
                 [BindProperty]
                 public int Number { get; set; }
            
                 protected override void _ValidateProperty(PropertyInfo property)
                 {
                     if (property.Name == PropertyName.Number &amp;&amp; !IsNumberEditable)
                     {
                         property.Usage |= PropertyUsageFlags.ReadOnly;
                     }
                 }
             }
             </code>
             </example>
             <param name="property">Property to validate.</param>
        </member>
        <member name="M:Godot.GodotObject.TryCallVirtualMethodCore(Godot.StringName,Godot.NativeInterop.NativeGodotVariantPtrSpan,Godot.NativeInterop.NativeGodotVariant@)">
             <summary>
             Try to call the script implementation of a method that was bound as virtual in ClassDB.
             If this instance doesn't have a script attached, or the attached script doesn't override
             the method it returns <see langword="false"/>.
             If the virtual method is required to be implemented by scripts, use
             <see cref="M:Godot.GodotObject.CallVirtualMethodCore(Godot.StringName,Godot.NativeInterop.NativeGodotVariantPtrSpan)"/> to invoke it instead.
             <example>
             <code>
             public int GetEnemyBaseHealth(string enemyName)
             {
                 // Try to call the virtual method if it was implemented by an user script.
                 if (TryCallVirtualMethod(MethodName.GetEnemyBaseHealth, enemyName, out int baseHealth))
                 {
                     return baseHealth;
                 }
            
                 // The user script doesn't override the method, return the default base health.
                 return 100;
             }
             </code>
             </example>
             </summary>
             <param name="name">Name of the virtual method.</param>
             <param name="args">Arguments to use in the method invocation.</param>
             <param name="returnValue">The method's return value.</param>
             <returns>Whether the method was invoked successfully.</returns>
        </member>
        <member name="M:Godot.GodotObject.CallVirtualMethodCore(Godot.StringName,Godot.NativeInterop.NativeGodotVariantPtrSpan)">
            <summary>
            Call the script implementation of a method that was bound as virtual in ClassDB.
            If this instance has an script attached and doesn't override the method, it
            throws an exception.
            If the virtual method is not required to be implemented by scripts, use
            <see cref="M:Godot.GodotObject.TryCallVirtualMethodCore(Godot.StringName,Godot.NativeInterop.NativeGodotVariantPtrSpan,Godot.NativeInterop.NativeGodotVariant@)"/> to invoke it instead.
            <example>
            <code>
            public int GetEnemyBaseHealth(string enemyName)
            {
                // Call the required virtual method implemented by an user script.
                return CallVirtualMethod&lt;string, int&gt;(MethodName.GetEnemyBaseHealth, enemyName));
            }
            </code>
            </example>
            </summary>
            <param name="name">Name of the virtual method.</param>
            <param name="args">Arguments to use in the method invocation.</param>
            <returns>The method's return value.</returns>
            <exception cref="T:System.InvalidOperationException">
            There is no script attached.
            -or-
            The attached script doesn't implement the required virtual method.
            </exception>
        </member>
        <member name="M:Godot.GodotObject.#ctor(System.IntPtr)">
            <summary>
            Constructs a <see cref="T:Godot.GodotObject"/> with the given <paramref name="nativePtr"/>.
            </summary>
            <param name="nativePtr">The pointer to the native object in the engine's side.</param>
        </member>
        <member name="M:Godot.GodotObject.#ctor(Godot.NativeInterop.NativeGodotStringName)">
            <summary>
            Constructs a <see cref="T:Godot.GodotObject"/> with the given <paramref name="nativeClassName"/>.
            </summary>
            <param name="nativeClassName">The name of the Godot engine class.</param>
        </member>
        <member name="M:Godot.GodotObject.#ctor">
            <summary>
            Constructs a new <see cref="T:Godot.GodotObject"/>.
            </summary>
        </member>
        <member name="M:Godot.GodotObject.GetNativePtr(Godot.GodotObject)">
            <summary>
            Get the pointer to the native instance represented by the object <paramref name="instance"/>,
            or <see cref="F:System.IntPtr.Zero"/> if the object is null.
            </summary>
            <param name="instance">Godot object to get the pointer from.</param>
            <returns>The pointer to the Godot object.</returns>
            <exception cref="T:System.ObjectDisposedException">
            <paramref name="instance"/> has been previously disposed or its native instance has been released.
            </exception>
        </member>
        <member name="M:Godot.GodotObject.InstanceFromId(System.UInt64)">
             <summary>
             Returns the <see cref="T:Godot.GodotObject"/> that corresponds to <paramref name="instanceId"/>.
             All Objects have a unique instance ID. See also <see cref="M:Godot.GodotObject.GetInstanceId"/>.
             </summary>
             <example>
             <code>
             public partial class MyNode : Node
             {
                 public string Foo { get; set; } = "bar";
            
                 public override void _Ready()
                 {
                     ulong id = GetInstanceId();
                     var inst = (MyNode)InstanceFromId(Id);
                     GD.Print(inst.Foo); // Prints bar
                 }
             }
             </code>
             </example>
             <param name="instanceId">Instance ID of the Object to retrieve.</param>
             <returns>The <see cref="T:Godot.GodotObject"/> instance.</returns>
        </member>
        <member name="M:Godot.GodotObject.GetInstanceId">
            <summary>
            Returns the object's unique instance ID. This ID can be saved in <see cref="T:Godot.EncodedObjectAsId"/>,
            and can be used to retrieve this object instance with <see cref="M:Godot.GodotObject.InstanceFromId(System.UInt64)"/>.
            </summary>
        </member>
        <member name="M:Godot.GodotObject.IsInstanceIdValid(System.UInt64)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.GodotObject"/> that corresponds
            to <paramref name="instanceId"/> is a valid object (e.g. has not been deleted from
            memory). All Objects have a unique instance ID.
            </summary>
            <param name="instanceId">The Object ID to check.</param>
            <returns>If the instance with the given ID is a valid object.</returns>
        </member>
        <member name="M:Godot.GodotObject.IsInstanceValid(Godot.GodotObject)">
            <summary>
            Returns <see langword="true"/> if <paramref name="instance"/> is a
            valid <see cref="T:Godot.GodotObject"/> (e.g. has not been deleted from memory).
            </summary>
            <param name="instance">The instance to check.</param>
            <returns>If the instance is a valid object.</returns>
        </member>
        <member name="M:Godot.GodotObject.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.GodotObject"/> instance.
            </summary>
        </member>
        <member name="M:Godot.GodotObject.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.GodotObject"/>.
            </summary>
        </member>
        <member name="M:Godot.GodotObject.Dispose(System.Boolean)">
            <summary>
            Disposes implementation of this <see cref="T:Godot.GodotObject"/>.
            </summary>
        </member>
        <member name="M:Godot.GodotObject.ToString">
            <summary>
            Converts this <see cref="T:Godot.GodotObject"/> to a string.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:Godot.GodotObject.WeakRef(Godot.GodotObject)">
            <summary>
            Returns a weak reference to an object, or <see langword="null"/>
            if the argument is invalid.
            A weak reference to an object is not enough to keep the object alive:
            when the only remaining references to a referent are weak references,
            garbage collection is free to destroy the referent and reuse its memory
            for something else. However, until the object is actually destroyed the
            weak reference may return the object even if there are no strong references
            to it.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The <see cref="M:Godot.GodotObject.WeakRef(Godot.GodotObject)"/> reference to the object or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Godot.GodotObject.ToSignal(Godot.GodotObject,Godot.StringName)">
            <summary>
            Returns a new <see cref="T:Godot.SignalAwaiter"/> awaiter configured to complete when the instance
            <paramref name="source"/> emits the signal specified by the <paramref name="signal"/> parameter.
            </summary>
            <param name="source">
            The instance the awaiter will be listening to.
            </param>
            <param name="signal">
            The signal the awaiter will be waiting for.
            </param>
            <example>
            This sample prints a message once every frame up to 100 times.
            <code>
            public override void _Ready()
            {
                for (int i = 0; i &lt; 100; i++)
                {
                    await ToSignal(GetTree(), "process_frame");
                    GD.Print($"Frame {i}");
                }
            }
            </code>
            </example>
            <returns>
            A <see cref="T:Godot.SignalAwaiter"/> that completes when
            <paramref name="source"/> emits the <paramref name="signal"/>.
            </returns>
        </member>
        <member name="M:Godot.GodotObject.GetGodotNativeName(System.Type)">
            <summary>
            Get the native Godot type name for <paramref name="type"/>.
            If <paramref name="type"/> is not a native Godot type, iterates the
            inheritance chain until a native Godot type is found and gets its
            native name.
            If there's no native Godot type in the inheritance chain, returns
            <see langword="null"/>.
            </summary>
            <param name="type">Type to get the native Godot name for.</param>
            <returns>The native Godot type name or <see langword="null"/>.</returns>
        </member>
        <member name="M:Godot.GodotObject.GetGodotNativeType(System.Type)">
            <summary>
            Get the native Godot type that <paramref name="type"/> derives from,
            or <see langword="null"/> if the type does not derive from a native
            Godot type.
            </summary>
            <param name="type">Type to get the native Godot type for.</param>
            <returns>The native Godot base type.</returns>
        </member>
        <member name="T:Godot.IAwaitable">
            <summary>
            A type that implements the required shape so it can be awaited and has no return value.
            </summary>
        </member>
        <member name="M:Godot.IAwaitable.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="T:Godot.IAwaitable`2">
            <summary>
            A type that implements the required shape so it can be awaited and has a return value.
            </summary>
            <typeparam name="TAwaiter">The type of the object that implements the awaiter shape.</typeparam>
            <typeparam name="TResult">The type of the result received after awaiting.</typeparam>
        </member>
        <member name="M:Godot.IAwaitable`2.GetAwaiter">
            <summary>
            Gets an awaiter for this awaitable.
            </summary>
        </member>
        <member name="T:Godot.IAwaiter">
            <summary>
            A type that implements the required shape so it can be awaited and has no return value.
            </summary>
        </member>
        <member name="P:Godot.IAwaiter.IsCompleted">
            <summary>
            Indicates whether the await is completed.
            </summary>
        </member>
        <member name="M:Godot.IAwaiter.GetResult">
            <summary>
            Gets the result of the await.
            </summary>
        </member>
        <member name="T:Godot.IAwaiter`1">
            <summary>
            A type that implements the required shape so it can be awaited and has a return value.
            </summary>
            <typeparam name="TResult">The type of the result received after awaiting.</typeparam>
        </member>
        <member name="P:Godot.IAwaiter`1.IsCompleted">
            <summary>
            Indicates whether the await is completed.
            </summary>
        </member>
        <member name="M:Godot.IAwaiter`1.GetResult">
            <summary>
            Gets the result of the await.
            </summary>
        </member>
        <member name="T:Godot.Mathf">
            <summary>
            Provides constants and static methods for common mathematical functions.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Tau">
            <summary>
            The circle constant, the circumference of the unit circle in radians.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Pi">
            <summary>
            Constant that represents how many times the diameter of a circle
            fits around its perimeter. This is equivalent to <c>Mathf.Tau / 2</c>.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Inf">
            <summary>
            Positive infinity. For negative infinity, use <c>-Mathf.Inf</c>.
            </summary>
        </member>
        <member name="F:Godot.Mathf.NaN">
            <summary>
            "Not a Number", an invalid value. <c>NaN</c> has special properties, including
            that it is not equal to itself. It is output by some invalid operations,
            such as dividing zero by zero.
            </summary>
        </member>
        <member name="M:Godot.Mathf.Abs(System.Int32)">
            <summary>
            Returns the absolute value of <paramref name="s"/> (i.e. positive value).
            </summary>
            <param name="s">The input number.</param>
            <returns>The absolute value of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Abs(System.Single)">
            <summary>
            Returns the absolute value of <paramref name="s"/> (i.e. positive value).
            </summary>
            <param name="s">The input number.</param>
            <returns>The absolute value of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Abs(System.Double)">
            <summary>
            Returns the absolute value of <paramref name="s"/> (i.e. positive value).
            </summary>
            <param name="s">The input number.</param>
            <returns>The absolute value of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Acos(System.Single)">
            <summary>
            Returns the arc cosine of <paramref name="s"/> in radians.
            Use to get the angle of cosine <paramref name="s"/>.
            </summary>
            <param name="s">The input cosine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>
            An angle that would result in the given cosine value. On the range <c>0</c> to <c>Tau/2</c>.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Acos(System.Double)">
            <summary>
            Returns the arc cosine of <paramref name="s"/> in radians.
            Use to get the angle of cosine <paramref name="s"/>.
            </summary>
            <param name="s">The input cosine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>
            An angle that would result in the given cosine value. On the range <c>0</c> to <c>Tau/2</c>.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Acosh(System.Single)">
            <summary>
            Returns the hyperbolic arc (also called inverse) cosine of <paramref name="s"/> in radians.
            Use it to get the angle from an angle's cosine in hyperbolic space if
            <paramref name="s"/> is larger or equal to 1.
            </summary>
            <param name="s">The input hyperbolic cosine value.</param>
            <returns>
            An angle that would result in the given hyperbolic cosine value.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Acosh(System.Double)">
            <summary>
            Returns the hyperbolic arc (also called inverse) cosine of <paramref name="s"/> in radians.
            Use it to get the angle from an angle's cosine in hyperbolic space if
            <paramref name="s"/> is larger or equal to 1.
            </summary>
            <param name="s">The input hyperbolic cosine value.</param>
            <returns>
            An angle that would result in the given hyperbolic cosine value.
            </returns>
        </member>
        <member name="M:Godot.Mathf.AngleDifference(System.Single,System.Single)">
            <summary>
            Returns the difference between the two angles,
            in range of -<see cref="F:Godot.Mathf.Pi"/>, <see cref="F:Godot.Mathf.Pi"/>.
            When <paramref name="from"/> and <paramref name="to"/> are opposite,
            returns -<see cref="F:Godot.Mathf.Pi"/> if <paramref name="from"/> is smaller than <paramref name="to"/>,
            or <see cref="F:Godot.Mathf.Pi"/> otherwise.
            </summary>
            <param name="from">The start angle.</param>
            <param name="to">The destination angle.</param>
            <returns>The difference between the two angles.</returns>
        </member>
        <member name="M:Godot.Mathf.AngleDifference(System.Double,System.Double)">
            <summary>
            Returns the difference between the two angles,
            in range of -<see cref="F:Godot.Mathf.Pi"/>, <see cref="F:Godot.Mathf.Pi"/>.
            When <paramref name="from"/> and <paramref name="to"/> are opposite,
            returns -<see cref="F:Godot.Mathf.Pi"/> if <paramref name="from"/> is smaller than <paramref name="to"/>,
            or <see cref="F:Godot.Mathf.Pi"/> otherwise.
            </summary>
            <param name="from">The start angle.</param>
            <param name="to">The destination angle.</param>
            <returns>The difference between the two angles.</returns>
        </member>
        <member name="M:Godot.Mathf.Asin(System.Single)">
            <summary>
            Returns the arc sine of <paramref name="s"/> in radians.
            Use to get the angle of sine <paramref name="s"/>.
            </summary>
            <param name="s">The input sine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>
            An angle that would result in the given sine value. On the range <c>-Tau/4</c> to <c>Tau/4</c>.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Asin(System.Double)">
            <summary>
            Returns the arc sine of <paramref name="s"/> in radians.
            Use to get the angle of sine <paramref name="s"/>.
            </summary>
            <param name="s">The input sine value. Must be on the range of -1.0 to 1.0.</param>
            <returns>
            An angle that would result in the given sine value. On the range <c>-Tau/4</c> to <c>Tau/4</c>.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Asinh(System.Single)">
            <summary>
            Returns the hyperbolic arc (also called inverse) sine of <paramref name="s"/> in radians.
            Use it to get the angle from an angle's sine in hyperbolic space if
            <paramref name="s"/> is larger or equal to 1.
            </summary>
            <param name="s">The input hyperbolic sine value.</param>
            <returns>
            An angle that would result in the given hyperbolic sine value.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Asinh(System.Double)">
            <summary>
            Returns the hyperbolic arc (also called inverse) sine of <paramref name="s"/> in radians.
            Use it to get the angle from an angle's sine in hyperbolic space if
            <paramref name="s"/> is larger or equal to 1.
            </summary>
            <param name="s">The input hyperbolic sine value.</param>
            <returns>
            An angle that would result in the given hyperbolic sine value.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Atan(System.Single)">
             <summary>
             Returns the arc tangent of <paramref name="s"/> in radians.
             Use to get the angle of tangent <paramref name="s"/>.
            
             The method cannot know in which quadrant the angle should fall.
             See <see cref="M:Godot.Mathf.Atan2(System.Single,System.Single)"/> if you have both <c>y</c> and <c>x</c>.
             </summary>
             <param name="s">The input tangent value.</param>
             <returns>
             An angle that would result in the given tangent value. On the range <c>-Tau/4</c> to <c>Tau/4</c>.
             </returns>
        </member>
        <member name="M:Godot.Mathf.Atan(System.Double)">
             <summary>
             Returns the arc tangent of <paramref name="s"/> in radians.
             Use to get the angle of tangent <paramref name="s"/>.
            
             The method cannot know in which quadrant the angle should fall.
             See <see cref="M:Godot.Mathf.Atan2(System.Double,System.Double)"/> if you have both <c>y</c> and <c>x</c>.
             </summary>
             <param name="s">The input tangent value.</param>
             <returns>
             An angle that would result in the given tangent value. On the range <c>-Tau/4</c> to <c>Tau/4</c>.
             </returns>
        </member>
        <member name="M:Godot.Mathf.Atan2(System.Single,System.Single)">
             <summary>
             Returns the arc tangent of <paramref name="y"/> and <paramref name="x"/> in radians.
             Use to get the angle of the tangent of <c>y/x</c>. To compute the value, the method takes into
             account the sign of both arguments in order to determine the quadrant.
            
             Important note: The Y coordinate comes first, by convention.
             </summary>
             <param name="y">The Y coordinate of the point to find the angle to.</param>
             <param name="x">The X coordinate of the point to find the angle to.</param>
             <returns>
             An angle that would result in the given tangent value. On the range <c>-Tau/2</c> to <c>Tau/2</c>.
             </returns>
        </member>
        <member name="M:Godot.Mathf.Atan2(System.Double,System.Double)">
             <summary>
             Returns the arc tangent of <paramref name="y"/> and <paramref name="x"/> in radians.
             Use to get the angle of the tangent of <c>y/x</c>. To compute the value, the method takes into
             account the sign of both arguments in order to determine the quadrant.
            
             Important note: The Y coordinate comes first, by convention.
             </summary>
             <param name="y">The Y coordinate of the point to find the angle to.</param>
             <param name="x">The X coordinate of the point to find the angle to.</param>
             <returns>
             An angle that would result in the given tangent value. On the range <c>-Tau/2</c> to <c>Tau/2</c>.
             </returns>
        </member>
        <member name="M:Godot.Mathf.Atanh(System.Single)">
            <summary>
            Returns the hyperbolic arc (also called inverse) tangent of <paramref name="s"/> in radians.
            Use it to get the angle from an angle's tangent in hyperbolic space if
            <paramref name="s"/> is between -1 and 1 (non-inclusive).
            </summary>
            <param name="s">The input hyperbolic tangent value.</param>
            <returns>
            An angle that would result in the given hyperbolic tangent value.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Atanh(System.Double)">
            <summary>
            Returns the hyperbolic arc (also called inverse) tangent of <paramref name="s"/> in radians.
            Use it to get the angle from an angle's tangent in hyperbolic space if
            <paramref name="s"/> is between -1 and 1 (non-inclusive).
            </summary>
            <param name="s">The input hyperbolic tangent value.</param>
            <returns>
            An angle that would result in the given hyperbolic tangent value.
            </returns>
        </member>
        <member name="M:Godot.Mathf.Ceil(System.Single)">
            <summary>
            Rounds <paramref name="s"/> upward (towards positive infinity).
            </summary>
            <param name="s">The number to ceil.</param>
            <returns>The smallest whole number that is not less than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Ceil(System.Double)">
            <summary>
            Rounds <paramref name="s"/> upward (towards positive infinity).
            </summary>
            <param name="s">The number to ceil.</param>
            <returns>The smallest whole number that is not less than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.CeilToInt(System.Single)">
             <summary>
             Rounds <paramref name="s"/> upward (towards positive infinity).
            
             This is the same as <see cref="M:Godot.Mathf.Ceil(System.Single)"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to ceil.</param>
             <returns>The smallest whole number that is not less than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.CeilToInt(System.Double)">
             <summary>
             Rounds <paramref name="s"/> upward (towards positive infinity).
            
             This is the same as <see cref="M:Godot.Mathf.Ceil(System.Double)"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to ceil.</param>
             <returns>The smallest whole number that is not less than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a <paramref name="value"/> so that it is not less than <paramref name="min"/>
            and not more than <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a <paramref name="value"/> so that it is not less than <paramref name="min"/>
            and not more than <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a <paramref name="value"/> so that it is not less than <paramref name="min"/>
            and not more than <paramref name="max"/>.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Cos(System.Single)">
            <summary>
            Returns the cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Cos(System.Double)">
            <summary>
            Returns the cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Cosh(System.Single)">
            <summary>
            Returns the hyperbolic cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Cubic interpolates between two values by the factor defined in <paramref name="weight"/>
            with pre and post values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cubic interpolates between two values by the factor defined in <paramref name="weight"/>
            with pre and post values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolateAngle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Cubic interpolates between two rotation values with shortest path
            by the factor defined in <paramref name="weight"/> with pre and post values.
            See also <see cref="M:Godot.Mathf.LerpAngle(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolateAngle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cubic interpolates between two rotation values with shortest path
            by the factor defined in <paramref name="weight"/> with pre and post values.
            See also <see cref="M:Godot.Mathf.LerpAngle(System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolateInTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Cubic interpolates between two values by the factor defined in <paramref name="weight"/>
            with pre and post values.
            It can perform smoother interpolation than
            <see cref="M:Godot.Mathf.CubicInterpolate(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
            by the time values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="toT"></param>
            <param name="preT"></param>
            <param name="postT"></param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolateInTime(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cubic interpolates between two values by the factor defined in <paramref name="weight"/>
            with pre and post values.
            It can perform smoother interpolation than
            <see cref="M:Godot.Mathf.CubicInterpolate(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            by the time values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="toT"></param>
            <param name="preT"></param>
            <param name="postT"></param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolateAngleInTime(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Cubic interpolates between two rotation values with shortest path
            by the factor defined in <paramref name="weight"/> with pre and post values.
            See also <see cref="M:Godot.Mathf.LerpAngle(System.Single,System.Single,System.Single)"/>.
            It can perform smoother interpolation than
            <see cref="M:Godot.Mathf.CubicInterpolateAngle(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
            by the time values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="toT"></param>
            <param name="preT"></param>
            <param name="postT"></param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.CubicInterpolateAngleInTime(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cubic interpolates between two rotation values with shortest path
            by the factor defined in <paramref name="weight"/> with pre and post values.
            See also <see cref="M:Godot.Mathf.LerpAngle(System.Double,System.Double,System.Double)"/>.
            It can perform smoother interpolation than
            <see cref="M:Godot.Mathf.CubicInterpolateAngle(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            by the time values.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="pre">The value which before "from" value for interpolation.</param>
            <param name="post">The value which after "to" value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="toT"></param>
            <param name="preT"></param>
            <param name="postT"></param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.BezierInterpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the point at the given <paramref name="t"/> on a one-dimensional Bezier curve defined by
            the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="start">The start value for the interpolation.</param>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.BezierInterpolate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the point at the given <paramref name="t"/> on a one-dimensional Bezier curve defined by
            the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="start">The start value for the interpolation.</param>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.BezierDerivative(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the derivative at the given <paramref name="t"/> on a one dimensional Bezier curve defined by
            the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="start">The start value for the interpolation.</param>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.BezierDerivative(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the derivative at the given <paramref name="t"/> on a one dimensional Bezier curve defined by
            the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="start">The start value for the interpolation.</param>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.DbToLinear(System.Single)">
            <summary>
            Converts from decibels to linear energy (audio).
            </summary>
            <seealso cref="M:Godot.Mathf.LinearToDb(System.Single)"/>
            <param name="db">Decibels to convert.</param>
            <returns>Audio volume as linear energy.</returns>
        </member>
        <member name="M:Godot.Mathf.DbToLinear(System.Double)">
            <summary>
            Converts from decibels to linear energy (audio).
            </summary>
            <seealso cref="M:Godot.Mathf.LinearToDb(System.Double)"/>
            <param name="db">Decibels to convert.</param>
            <returns>Audio volume as linear energy.</returns>
        </member>
        <member name="M:Godot.Mathf.DegToRad(System.Single)">
            <summary>
            Converts an angle expressed in degrees to radians.
            </summary>
            <param name="deg">An angle expressed in degrees.</param>
            <returns>The same angle expressed in radians.</returns>
        </member>
        <member name="M:Godot.Mathf.DegToRad(System.Double)">
            <summary>
            Converts an angle expressed in degrees to radians.
            </summary>
            <param name="deg">An angle expressed in degrees.</param>
            <returns>The same angle expressed in radians.</returns>
        </member>
        <member name="M:Godot.Mathf.Ease(System.Single,System.Single)">
            <summary>
            Easing function, based on exponent. The <paramref name="curve"/> values are:
            <c>0</c> is constant, <c>1</c> is linear, <c>0</c> to <c>1</c> is ease-in, <c>1</c> or more is ease-out.
            Negative values are in-out/out-in.
            </summary>
            <param name="s">The value to ease.</param>
            <param name="curve">
            <c>0</c> is constant, <c>1</c> is linear, <c>0</c> to <c>1</c> is ease-in, <c>1</c> or more is ease-out.
            </param>
            <returns>The eased value.</returns>
        </member>
        <member name="M:Godot.Mathf.Ease(System.Double,System.Double)">
            <summary>
            Easing function, based on exponent. The <paramref name="curve"/> values are:
            <c>0</c> is constant, <c>1</c> is linear, <c>0</c> to <c>1</c> is ease-in, <c>1</c> or more is ease-out.
            Negative values are in-out/out-in.
            </summary>
            <param name="s">The value to ease.</param>
            <param name="curve">
            <c>0</c> is constant, <c>1</c> is linear, <c>0</c> to <c>1</c> is ease-in, <c>1</c> or more is ease-out.
            </param>
            <returns>The eased value.</returns>
        </member>
        <member name="M:Godot.Mathf.Exp(System.Single)">
            <summary>
            The natural exponential function. It raises the mathematical
            constant <c>e</c> to the power of <paramref name="s"/> and returns it.
            </summary>
            <param name="s">The exponent to raise <c>e</c> to.</param>
            <returns><c>e</c> raised to the power of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Exp(System.Double)">
            <summary>
            The natural exponential function. It raises the mathematical
            constant <c>e</c> to the power of <paramref name="s"/> and returns it.
            </summary>
            <param name="s">The exponent to raise <c>e</c> to.</param>
            <returns><c>e</c> raised to the power of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Floor(System.Single)">
            <summary>
            Rounds <paramref name="s"/> downward (towards negative infinity).
            </summary>
            <param name="s">The number to floor.</param>
            <returns>The largest whole number that is not more than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Floor(System.Double)">
            <summary>
            Rounds <paramref name="s"/> downward (towards negative infinity).
            </summary>
            <param name="s">The number to floor.</param>
            <returns>The largest whole number that is not more than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.FloorToInt(System.Single)">
             <summary>
             Rounds <paramref name="s"/> downward (towards negative infinity).
            
             This is the same as <see cref="M:Godot.Mathf.Floor(System.Single)"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to floor.</param>
             <returns>The largest whole number that is not more than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.FloorToInt(System.Double)">
             <summary>
             Rounds <paramref name="s"/> downward (towards negative infinity).
            
             This is the same as <see cref="M:Godot.Mathf.Floor(System.Double)"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to floor.</param>
             <returns>The largest whole number that is not more than <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Returns a normalized value considering the given range.
            This is the opposite of <see cref="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">The interpolated value.</param>
            <returns>
            The resulting value of the inverse interpolation.
            The returned value will be between 0.0 and 1.0 if <paramref name="weight"/> is
            between <paramref name="from"/> and <paramref name="to"/> (inclusive).
            </returns>
        </member>
        <member name="M:Godot.Mathf.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
            Returns a normalized value considering the given range.
            This is the opposite of <see cref="M:Godot.Mathf.Lerp(System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">The interpolated value.</param>
            <returns>
            The resulting value of the inverse interpolation.
            The returned value will be between 0.0 and 1.0 if <paramref name="weight"/> is
            between <paramref name="from"/> and <paramref name="to"/> (inclusive).
            </returns>
        </member>
        <member name="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)">
            <summary>
            Returns <see langword="true"/> if <paramref name="a"/> and <paramref name="b"/> are approximately equal
            to each other.
            The comparison is done using a tolerance calculation with <see cref="F:Godot.Mathf.Epsilon"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>A <see langword="bool"/> for whether or not the two values are approximately equal.</returns>
        </member>
        <member name="M:Godot.Mathf.IsEqualApprox(System.Double,System.Double)">
            <summary>
            Returns <see langword="true"/> if <paramref name="a"/> and <paramref name="b"/> are approximately equal
            to each other.
            The comparison is done using a tolerance calculation with <see cref="F:Godot.Mathf.Epsilon"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>A <see langword="bool"/> for whether or not the two values are approximately equal.</returns>
        </member>
        <member name="M:Godot.Mathf.IsFinite(System.Single)">
            <summary>
            Returns whether <paramref name="s"/> is a finite value, i.e. it is not
            <see cref="F:Godot.Mathf.NaN"/>, positive infinite, or negative infinity.
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is a finite value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsFinite(System.Double)">
            <summary>
            Returns whether <paramref name="s"/> is a finite value, i.e. it is not
            <see cref="F:Godot.Mathf.NaN"/>, positive infinite, or negative infinity.
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is a finite value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsInf(System.Single)">
            <summary>
            Returns whether <paramref name="s"/> is an infinity value (either positive infinity or negative infinity).
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is an infinity value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsInf(System.Double)">
            <summary>
            Returns whether <paramref name="s"/> is an infinity value (either positive infinity or negative infinity).
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is an infinity value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsNaN(System.Single)">
            <summary>
            Returns whether <paramref name="s"/> is a <c>NaN</c> ("Not a Number" or invalid) value.
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is a <c>NaN</c> value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsNaN(System.Double)">
            <summary>
            Returns whether <paramref name="s"/> is a <c>NaN</c> ("Not a Number" or invalid) value.
            </summary>
            <param name="s">The value to check.</param>
            <returns>A <see langword="bool"/> for whether or not the value is a <c>NaN</c> value.</returns>
        </member>
        <member name="M:Godot.Mathf.IsZeroApprox(System.Single)">
             <summary>
             Returns <see langword="true"/> if <paramref name="s"/> is zero or almost zero.
             The comparison is done using a tolerance calculation with <see cref="F:Godot.Mathf.Epsilon"/>.
            
             This method is faster than using <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> with
             one value as zero.
             </summary>
             <param name="s">The value to check.</param>
             <returns>A <see langword="bool"/> for whether or not the value is nearly zero.</returns>
        </member>
        <member name="M:Godot.Mathf.IsZeroApprox(System.Double)">
             <summary>
             Returns <see langword="true"/> if <paramref name="s"/> is zero or almost zero.
             The comparison is done using a tolerance calculation with <see cref="F:Godot.Mathf.Epsilon"/>.
            
             This method is faster than using <see cref="M:Godot.Mathf.IsEqualApprox(System.Double,System.Double)"/> with
             one value as zero.
             </summary>
             <param name="s">The value to check.</param>
             <returns>A <see langword="bool"/> for whether or not the value is nearly zero.</returns>
        </member>
        <member name="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two values by a normalized value.
            This is the opposite <see cref="M:Godot.Mathf.InverseLerp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values by a normalized value.
            This is the opposite <see cref="M:Godot.Mathf.InverseLerp(System.Double,System.Double,System.Double)"/>.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
             <summary>
             Linearly interpolates between two angles (in radians) by a normalized value.
            
             Similar to <see cref="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)"/>,
             but interpolates correctly when the angles wrap around <see cref="F:Godot.Mathf.Tau"/>.
             </summary>
             <param name="from">The start angle for interpolation.</param>
             <param name="to">The destination angle for interpolation.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting angle of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.LerpAngle(System.Double,System.Double,System.Double)">
             <summary>
             Linearly interpolates between two angles (in radians) by a normalized value.
            
             Similar to <see cref="M:Godot.Mathf.Lerp(System.Double,System.Double,System.Double)"/>,
             but interpolates correctly when the angles wrap around <see cref="F:Godot.Mathf.Tau"/>.
             </summary>
             <param name="from">The start angle for interpolation.</param>
             <param name="to">The destination angle for interpolation.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting angle of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.LinearToDb(System.Single)">
            <summary>
            Converts from linear energy to decibels (audio).
            This can be used to implement volume sliders that behave as expected (since volume isn't linear).
            </summary>
            <seealso cref="M:Godot.Mathf.DbToLinear(System.Single)"/>
            <example>
            <code>
            // "slider" refers to a node that inherits Range such as HSlider or VSlider.
            // Its range must be configured to go from 0 to 1.
            // Change the bus name if you'd like to change the volume of a specific bus only.
            AudioServer.SetBusVolumeDb(AudioServer.GetBusIndex("Master"), GD.LinearToDb(slider.value));
            </code>
            </example>
            <param name="linear">The linear energy to convert.</param>
            <returns>Audio as decibels.</returns>
        </member>
        <member name="M:Godot.Mathf.LinearToDb(System.Double)">
            <summary>
            Converts from linear energy to decibels (audio).
            This can be used to implement volume sliders that behave as expected (since volume isn't linear).
            </summary>
            <seealso cref="M:Godot.Mathf.DbToLinear(System.Double)"/>
            <example>
            <code>
            // "slider" refers to a node that inherits Range such as HSlider or VSlider.
            // Its range must be configured to go from 0 to 1.
            // Change the bus name if you'd like to change the volume of a specific bus only.
            AudioServer.SetBusVolumeDb(AudioServer.GetBusIndex("Master"), GD.LinearToDb(slider.value));
            </code>
            </example>
            <param name="linear">The linear energy to convert.</param>
            <returns>Audio as decibels.</returns>
        </member>
        <member name="M:Godot.Mathf.Log(System.Single)">
             <summary>
             Natural logarithm. The amount of time needed to reach a certain level of continuous growth.
            
             Note: This is not the same as the "log" function on most calculators, which uses a base 10 logarithm.
             </summary>
             <param name="s">The input value.</param>
             <returns>The natural log of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Log(System.Double)">
             <summary>
             Natural logarithm. The amount of time needed to reach a certain level of continuous growth.
            
             Note: This is not the same as the "log" function on most calculators, which uses a base 10 logarithm.
             </summary>
             <param name="s">The input value.</param>
             <returns>The natural log of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Max(System.Int32,System.Int32)">
            <summary>
            Returns the maximum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is higher.</returns>
        </member>
        <member name="M:Godot.Mathf.Max(System.Single,System.Single)">
            <summary>
            Returns the maximum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is higher.</returns>
        </member>
        <member name="M:Godot.Mathf.Max(System.Double,System.Double)">
            <summary>
            Returns the maximum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is higher.</returns>
        </member>
        <member name="M:Godot.Mathf.Min(System.Int32,System.Int32)">
            <summary>
            Returns the minimum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is lower.</returns>
        </member>
        <member name="M:Godot.Mathf.Min(System.Single,System.Single)">
            <summary>
            Returns the minimum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is lower.</returns>
        </member>
        <member name="M:Godot.Mathf.Min(System.Double,System.Double)">
            <summary>
            Returns the minimum of two values.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <returns>Whichever of the two values is lower.</returns>
        </member>
        <member name="M:Godot.Mathf.MoveToward(System.Single,System.Single,System.Single)">
             <summary>
             Moves <paramref name="from"/> toward <paramref name="to"/> by the <paramref name="delta"/> value.
            
             Use a negative <paramref name="delta"/> value to move away.
             </summary>
             <param name="from">The start value.</param>
             <param name="to">The value to move towards.</param>
             <param name="delta">The amount to move by.</param>
             <returns>The value after moving.</returns>
        </member>
        <member name="M:Godot.Mathf.MoveToward(System.Double,System.Double,System.Double)">
             <summary>
             Moves <paramref name="from"/> toward <paramref name="to"/> by the <paramref name="delta"/> value.
            
             Use a negative <paramref name="delta"/> value to move away.
             </summary>
             <param name="from">The start value.</param>
             <param name="to">The value to move towards.</param>
             <param name="delta">The amount to move by.</param>
             <returns>The value after moving.</returns>
        </member>
        <member name="M:Godot.Mathf.NearestPo2(System.Int32)">
            <summary>
            Returns the nearest larger power of 2 for the integer <paramref name="value"/>.
            </summary>
            <param name="value">The input value.</param>
            <returns>The nearest larger power of 2.</returns>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Int32,System.Int32)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range [0, <paramref name="b"/>).
            </summary>
            <param name="a">The dividend, the primary input.</param>
            <param name="b">The divisor. The output is on the range [0, <paramref name="b"/>).</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Single,System.Single)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range [0, <paramref name="b"/>).
            </summary>
            <param name="a">The dividend, the primary input.</param>
            <param name="b">The divisor. The output is on the range [0, <paramref name="b"/>).</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="M:Godot.Mathf.PosMod(System.Double,System.Double)">
            <summary>
            Performs a canonical Modulus operation, where the output is on the range [0, <paramref name="b"/>).
            </summary>
            <param name="a">The dividend, the primary input.</param>
            <param name="b">The divisor. The output is on the range [0, <paramref name="b"/>).</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="M:Godot.Mathf.Pow(System.Single,System.Single)">
            <summary>
            Returns the result of <paramref name="x"/> raised to the power of <paramref name="y"/>.
            </summary>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns><paramref name="x"/> raised to the power of <paramref name="y"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Pow(System.Double,System.Double)">
            <summary>
            Returns the result of <paramref name="x"/> raised to the power of <paramref name="y"/>.
            </summary>
            <param name="x">The base.</param>
            <param name="y">The exponent.</param>
            <returns><paramref name="x"/> raised to the power of <paramref name="y"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.RadToDeg(System.Single)">
            <summary>
            Converts an angle expressed in radians to degrees.
            </summary>
            <param name="rad">An angle expressed in radians.</param>
            <returns>The same angle expressed in degrees.</returns>
        </member>
        <member name="M:Godot.Mathf.RadToDeg(System.Double)">
            <summary>
            Converts an angle expressed in radians to degrees.
            </summary>
            <param name="rad">An angle expressed in radians.</param>
            <returns>The same angle expressed in degrees.</returns>
        </member>
        <member name="M:Godot.Mathf.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a <paramref name="value"/> from [<paramref name="inFrom"/>, <paramref name="inTo"/>]
            to [<paramref name="outFrom"/>, <paramref name="outTo"/>].
            </summary>
            <param name="value">The value to map.</param>
            <param name="inFrom">The start value for the input interpolation.</param>
            <param name="inTo">The destination value for the input interpolation.</param>
            <param name="outFrom">The start value for the output interpolation.</param>
            <param name="outTo">The destination value for the output interpolation.</param>
            <returns>The resulting mapped value mapped.</returns>
        </member>
        <member name="M:Godot.Mathf.Remap(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Maps a <paramref name="value"/> from [<paramref name="inFrom"/>, <paramref name="inTo"/>]
            to [<paramref name="outFrom"/>, <paramref name="outTo"/>].
            </summary>
            <param name="value">The value to map.</param>
            <param name="inFrom">The start value for the input interpolation.</param>
            <param name="inTo">The destination value for the input interpolation.</param>
            <param name="outFrom">The start value for the output interpolation.</param>
            <param name="outTo">The destination value for the output interpolation.</param>
            <returns>The resulting mapped value mapped.</returns>
        </member>
        <member name="M:Godot.Mathf.RotateToward(System.Single,System.Single,System.Single)">
            <summary>
            Rotates <paramref name="from"/> toward <paramref name="to"/> by the <paramref name="delta"/> amount.
            Will not go past <paramref name="to"/>.
            Similar to <see cref="M:Godot.Mathf.MoveToward(System.Single,System.Single,System.Single)"/> but interpolates correctly when
            the angles wrap around <see cref="F:Godot.Mathf.Tau"/>.
            If <paramref name="delta"/> is negative, this function will rotate away from <paramref name="to"/>,
            toward the opposite angle, and will not go past the opposite angle.
            </summary>
            <param name="from">The start angle.</param>
            <param name="to">The angle to move towards.</param>
            <param name="delta">The amount to move by.</param>
            <returns>The angle after moving.</returns>
        </member>
        <member name="M:Godot.Mathf.RotateToward(System.Double,System.Double,System.Double)">
            <summary>
            Rotates <paramref name="from"/> toward <paramref name="to"/> by the <paramref name="delta"/> amount.
            Will not go past <paramref name="to"/>.
            Similar to <see cref="M:Godot.Mathf.MoveToward(System.Double,System.Double,System.Double)"/> but interpolates correctly when
            the angles wrap around <see cref="F:Godot.Mathf.Tau"/>.
            If <paramref name="delta"/> is negative, this function will rotate away from <paramref name="to"/>,
            toward the opposite angle, and will not go past the opposite angle.
            </summary>
            <param name="from">The start angle.</param>
            <param name="to">The angle to move towards.</param>
            <param name="delta">The amount to move by.</param>
            <returns>The angle after moving.</returns>
        </member>
        <member name="M:Godot.Mathf.Round(System.Single)">
            <summary>
            Rounds <paramref name="s"/> to the nearest whole number,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <param name="s">The number to round.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Godot.Mathf.Round(System.Double)">
            <summary>
            Rounds <paramref name="s"/> to the nearest whole number,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <param name="s">The number to round.</param>
            <returns>The rounded number.</returns>
        </member>
        <member name="M:Godot.Mathf.RoundToInt(System.Single)">
             <summary>
             Rounds <paramref name="s"/> to the nearest whole number.
            
             This is the same as <see cref="M:Godot.Mathf.Round(System.Single)"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to round.</param>
             <returns>The rounded number.</returns>
        </member>
        <member name="M:Godot.Mathf.RoundToInt(System.Double)">
             <summary>
             Rounds <paramref name="s"/> to the nearest whole number.
            
             This is the same as <see cref="M:Godot.Mathf.Round(System.Double)"/>, but returns an <see langword="int"/>.
             </summary>
             <param name="s">The number to round.</param>
             <returns>The rounded number.</returns>
        </member>
        <member name="M:Godot.Mathf.Sign(System.Int32)">
            <summary>
            Returns the sign of <paramref name="s"/>: <c>-1</c> or <c>1</c>.
            Returns <c>0</c> if <paramref name="s"/> is <c>0</c>.
            </summary>
            <param name="s">The input number.</param>
            <returns>One of three possible values: <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Mathf.Sign(System.Single)">
            <summary>
            Returns the sign of <paramref name="s"/>: <c>-1</c> or <c>1</c>.
            Returns <c>0</c> if <paramref name="s"/> is <c>0</c>.
            </summary>
            <param name="s">The input number.</param>
            <returns>One of three possible values: <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Mathf.Sign(System.Double)">
            <summary>
            Returns the sign of <paramref name="s"/>: <c>-1</c> or <c>1</c>.
            Returns <c>0</c> if <paramref name="s"/> is <c>0</c>.
            </summary>
            <param name="s">The input number.</param>
            <returns>One of three possible values: <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Mathf.Sin(System.Single)">
            <summary>
            Returns the sine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The sine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Sin(System.Double)">
            <summary>
            Returns the sine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The sine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Sinh(System.Single)">
            <summary>
            Returns the hyperbolic sine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic sine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic sine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Returns a number smoothly interpolated between <paramref name="from"/> and <paramref name="to"/>,
            based on the <paramref name="weight"/>. Similar to <see cref="M:Godot.Mathf.Lerp(System.Single,System.Single,System.Single)"/>,
            but interpolates faster at the beginning and slower at the end.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.SmoothStep(System.Double,System.Double,System.Double)">
            <summary>
            Returns a number smoothly interpolated between <paramref name="from"/> and <paramref name="to"/>,
            based on the <paramref name="weight"/>. Similar to <see cref="M:Godot.Mathf.Lerp(System.Double,System.Double,System.Double)"/>,
            but interpolates faster at the beginning and slower at the end.
            </summary>
            <param name="from">The start value for interpolation.</param>
            <param name="to">The destination value for interpolation.</param>
            <param name="weight">A value representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Mathf.Sqrt(System.Single)">
             <summary>
             Returns the square root of <paramref name="s"/>, where <paramref name="s"/> is a non-negative number.
            
             If you need negative inputs, use <see cref="T:System.Numerics.Complex"/>.
             </summary>
             <param name="s">The input number. Must not be negative.</param>
             <returns>The square root of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.Sqrt(System.Double)">
             <summary>
             Returns the square root of <paramref name="s"/>, where <paramref name="s"/> is a non-negative number.
            
             If you need negative inputs, use <see cref="T:System.Numerics.Complex"/>.
             </summary>
             <param name="s">The input number. Must not be negative.</param>
             <returns>The square root of <paramref name="s"/>.</returns>
        </member>
        <member name="M:Godot.Mathf.StepDecimals(System.Double)">
            <summary>
            Returns the position of the first non-zero digit, after the
            decimal point. Note that the maximum return value is 10,
            which is a design decision in the implementation.
            </summary>
            <param name="step">The input value.</param>
            <returns>The position of the first non-zero digit.</returns>
        </member>
        <member name="M:Godot.Mathf.Snapped(System.Single,System.Single)">
            <summary>
            Snaps float value <paramref name="s"/> to a given <paramref name="step"/>.
            This can also be used to round a floating point number to an arbitrary number of decimals.
            </summary>
            <param name="s">The value to snap.</param>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Snapped(System.Double,System.Double)">
            <summary>
            Snaps float value <paramref name="s"/> to a given <paramref name="step"/>.
            This can also be used to round a floating point number to an arbitrary number of decimals.
            </summary>
            <param name="s">The value to snap.</param>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Tan(System.Single)">
            <summary>
            Returns the tangent of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The tangent of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Tan(System.Double)">
            <summary>
            Returns the tangent of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The tangent of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Tanh(System.Single)">
            <summary>
            Returns the hyperbolic tangent of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic tangent of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The hyperbolic tangent of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps <paramref name="value"/> between <paramref name="min"/> and <paramref name="max"/>.
            Usable for creating loop-alike behavior or infinite surfaces.
            If <paramref name="min"/> is <c>0</c>, this is equivalent
            to <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/>, so prefer using that instead.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum allowed value and lower bound of the range.</param>
            <param name="max">The maximum allowed value and upper bound of the range.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps <paramref name="value"/> between <paramref name="min"/> and <paramref name="max"/>.
            Usable for creating loop-alike behavior or infinite surfaces.
            If <paramref name="min"/> is <c>0</c>, this is equivalent
            to <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/>, so prefer using that instead.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum allowed value and lower bound of the range.</param>
            <param name="max">The maximum allowed value and upper bound of the range.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:Godot.Mathf.Wrap(System.Double,System.Double,System.Double)">
            <summary>
            Wraps <paramref name="value"/> between <paramref name="min"/> and <paramref name="max"/>.
            Usable for creating loop-alike behavior or infinite surfaces.
            If <paramref name="min"/> is <c>0</c>, this is equivalent
            to <see cref="M:Godot.Mathf.PosMod(System.Double,System.Double)"/>, so prefer using that instead.
            </summary>
            <param name="value">The value to wrap.</param>
            <param name="min">The minimum allowed value and lower bound of the range.</param>
            <param name="max">The maximum allowed value and upper bound of the range.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:Godot.Mathf.PingPong(System.Single,System.Single)">
            <summary>
            Returns the <paramref name="value"/> wrapped between <c>0</c> and the <paramref name="length"/>.
            If the limit is reached, the next value the function returned is decreased to the <c>0</c> side
            or increased to the <paramref name="length"/> side (like a triangle wave).
            If <paramref name="length"/> is less than zero, it becomes positive.
            </summary>
            <param name="value">The value to pingpong.</param>
            <param name="length">The maximum value of the function.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="M:Godot.Mathf.PingPong(System.Double,System.Double)">
            <summary>
            Returns the <paramref name="value"/> wrapped between <c>0</c> and the <paramref name="length"/>.
            If the limit is reached, the next value the function returned is decreased to the <c>0</c> side
            or increased to the <paramref name="length"/> side (like a triangle wave).
            If <paramref name="length"/> is less than zero, it becomes positive.
            </summary>
            <param name="value">The value to pingpong.</param>
            <param name="length">The maximum value of the function.</param>
            <returns>The ping-ponged value.</returns>
        </member>
        <member name="F:Godot.Mathf.E">
            <summary>
            The natural number <c>e</c>.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Sqrt2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="F:Godot.Mathf.Epsilon">
            <summary>
            A very small number used for float comparison with error tolerance.
            1e-06 with single-precision floats, but 1e-14 if <c>REAL_T_IS_DOUBLE</c>.
            </summary>
        </member>
        <member name="M:Godot.Mathf.DecimalCount(System.Double)">
            <summary>
            Returns the amount of digits after the decimal place.
            </summary>
            <param name="s">The input value.</param>
            <returns>The amount of digits.</returns>
        </member>
        <member name="M:Godot.Mathf.DecimalCount(System.Decimal)">
            <summary>
            Returns the amount of digits after the decimal place.
            </summary>
            <param name="s">The input <see langword="decimal"/> value.</param>
            <returns>The amount of digits.</returns>
        </member>
        <member name="M:Godot.Mathf.SinCos(System.Single)">
            <summary>
            Returns the sine and cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The sine and cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.SinCos(System.Double)">
            <summary>
            Returns the sine and cosine of angle <paramref name="s"/> in radians.
            </summary>
            <param name="s">The angle in radians.</param>
            <returns>The sine and cosine of that angle.</returns>
        </member>
        <member name="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single,System.Single)">
            <summary>
            Returns <see langword="true"/> if <paramref name="a"/> and <paramref name="b"/> are approximately
            equal to each other.
            The comparison is done using the provided tolerance value.
            If you want the tolerance to be calculated for you, use <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <param name="tolerance">The pre-calculated tolerance value.</param>
            <returns>A <see langword="bool"/> for whether or not the two values are equal.</returns>
        </member>
        <member name="M:Godot.Mathf.IsEqualApprox(System.Double,System.Double,System.Double)">
            <summary>
            Returns <see langword="true"/> if <paramref name="a"/> and <paramref name="b"/> are approximately
            equal to each other.
            The comparison is done using the provided tolerance value.
            If you want the tolerance to be calculated for you, use <see cref="M:Godot.Mathf.IsEqualApprox(System.Double,System.Double)"/>.
            </summary>
            <param name="a">One of the values.</param>
            <param name="b">The other value.</param>
            <param name="tolerance">The pre-calculated tolerance value.</param>
            <returns>A <see langword="bool"/> for whether or not the two values are equal.</returns>
        </member>
        <member name="T:Godot.SignalAwaiter">
            <summary>
            Provides an awaiter that can wait for the next emission of a signal.
            </summary>
        </member>
        <member name="M:Godot.SignalAwaiter.#ctor(Godot.GodotObject,Godot.StringName,Godot.GodotObject)">
            <summary>
            Constructs a new <see cref="T:Godot.SignalAwaiter"/> that connects to the given
            signal and can wait for the next emission.
            </summary>
            <param name="source">Owner of the signal that will be awaited.</param>
            <param name="signal">Name of the signal that will be awaited.</param>
            <param name="target">Object that constructs the awaiter.</param>
            <exception cref="T:System.InvalidOperationException">
            Error connecting to the signal.
            </exception>
        </member>
        <member name="P:Godot.SignalAwaiter.IsCompleted">
            <summary>
            Whether the signal being awaited has been emitted.
            </summary>
        </member>
        <member name="M:Godot.SignalAwaiter.OnCompleted(System.Action)">
            <summary>
            Sets the action to perform when the <see cref="T:Godot.SignalAwaiter"/> object
            stops waiting for the signal to be emitted.
            </summary>
            <param name="continuation">The action to perform when the wait operation completes.</param>
        </member>
        <member name="M:Godot.SignalAwaiter.GetResult">
            <summary>
            Gets the <see cref="T:Godot.Variant"/> arguments sent by the signal, or an empty
            array if the signal hasn't been emitted yet.
            </summary>
            <returns>Signal arguments.</returns>
        </member>
        <member name="M:Godot.SignalAwaiter.GetAwaiter">
            <summary>
            Gets an awaiter used to await the signal associated with this <see cref="T:Godot.SignalAwaiter"/>.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="M:Godot.SignalAwaiter.ToString">
            <summary>
            Converts this <see cref="T:Godot.SignalAwaiter"/> to a string.
            </summary>
            <returns>A string representation of this signal awaiter.</returns>
        </member>
        <member name="T:Godot.Aabb">
            <summary>
            Axis-Aligned Bounding Box. AABB consists of a position, a size, and
            several utility functions. It is typically used for fast overlap tests.
            </summary>
        </member>
        <member name="P:Godot.Aabb.Position">
            <summary>
            Beginning corner. Typically has values lower than <see cref="P:Godot.Aabb.End"/>.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Aabb.Size">
            <summary>
            Size from <see cref="P:Godot.Aabb.Position"/> to <see cref="P:Godot.Aabb.End"/>. Typically all components are positive.
            If the size is negative, you can use <see cref="M:Godot.Aabb.Abs"/> to fix it.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Aabb.End">
            <summary>
            Ending corner. This is calculated as <see cref="P:Godot.Aabb.Position"/> plus
            <see cref="P:Godot.Aabb.Size"/>. Setting this value will change the size.
            </summary>
            <value>
            Getting is equivalent to <paramref name="value"/> = <see cref="P:Godot.Aabb.Position"/> + <see cref="P:Godot.Aabb.Size"/>,
            setting is equivalent to <see cref="P:Godot.Aabb.Size"/> = <paramref name="value"/> - <see cref="P:Godot.Aabb.Position"/>
            </value>
        </member>
        <member name="P:Godot.Aabb.Volume">
            <summary>
            The volume of this <see cref="T:Godot.Aabb"/>.
            See also <see cref="M:Godot.Aabb.HasVolume"/>.
            </summary>
        </member>
        <member name="M:Godot.Aabb.Abs">
            <summary>
            Returns an <see cref="T:Godot.Aabb"/> with equivalent position and size, modified so that
            the most-negative corner is the origin and the size is positive.
            </summary>
            <returns>The modified <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetCenter">
            <summary>
            Returns the center of the <see cref="T:Godot.Aabb"/>, which is equal
            to <see cref="P:Godot.Aabb.Position"/> + (<see cref="P:Godot.Aabb.Size"/> / 2).
            </summary>
            <returns>The center.</returns>
        </member>
        <member name="M:Godot.Aabb.Encloses(Godot.Aabb)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Godot.Aabb"/> completely encloses another one.
            </summary>
            <param name="with">The other <see cref="T:Godot.Aabb"/> that may be enclosed.</param>
            <returns>
            A <see langword="bool"/> for whether or not this <see cref="T:Godot.Aabb"/> encloses <paramref name="with"/>.
            </returns>
        </member>
        <member name="M:Godot.Aabb.Expand(Godot.Vector3)">
            <summary>
            Returns this <see cref="T:Godot.Aabb"/> expanded to include a given point.
            </summary>
            <param name="point">The point to include.</param>
            <returns>The expanded <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetEndpoint(System.Int32)">
            <summary>
            Gets the position of one of the 8 endpoints of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <param name="idx">Which endpoint to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="idx"/> is less than 0 or greater than 7.
            </exception>
            <returns>An endpoint of the <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetLongestAxis">
            <summary>
            Returns the normalized longest axis of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>A vector representing the normalized longest axis of the <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetLongestAxisIndex">
            <summary>
            Returns the <see cref="T:Godot.Vector3.Axis"/> index of the longest axis of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>A <see cref="T:Godot.Vector3.Axis"/> index for which axis is longest.</returns>
        </member>
        <member name="M:Godot.Aabb.GetLongestAxisSize">
            <summary>
            Returns the scalar length of the longest axis of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>The scalar length of the longest axis of the <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetShortestAxis">
            <summary>
            Returns the normalized shortest axis of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>A vector representing the normalized shortest axis of the <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetShortestAxisIndex">
            <summary>
            Returns the <see cref="T:Godot.Vector3.Axis"/> index of the shortest axis of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>A <see cref="T:Godot.Vector3.Axis"/> index for which axis is shortest.</returns>
        </member>
        <member name="M:Godot.Aabb.GetShortestAxisSize">
            <summary>
            Returns the scalar length of the shortest axis of the <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>The scalar length of the shortest axis of the <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.GetSupport(Godot.Vector3)">
            <summary>
            Returns the support point in a given direction.
            This is useful for collision detection algorithms.
            </summary>
            <param name="direction">The direction to find support for.</param>
            <returns>A vector representing the support.</returns>
        </member>
        <member name="M:Godot.Aabb.Grow(System.Single)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Aabb"/> grown a given amount of units towards all the sides.
            </summary>
            <param name="by">The amount to grow by.</param>
            <returns>The grown <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.HasPoint(Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Aabb"/> contains a point,
            or <see langword="false"/> otherwise.
            </summary>
            <param name="point">The point to check.</param>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Aabb"/> contains <paramref name="point"/>.
            </returns>
        </member>
        <member name="M:Godot.Aabb.HasSurface">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Aabb"/>
            has a surface or a length, and <see langword="false"/>
            if the <see cref="T:Godot.Aabb"/> is empty (all components
            of <see cref="P:Godot.Aabb.Size"/> are zero or negative).
            </summary>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Aabb"/> has surface.
            </returns>
        </member>
        <member name="M:Godot.Aabb.HasVolume">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Aabb"/> has
            area, and <see langword="false"/> if the <see cref="T:Godot.Aabb"/>
            is linear, empty, or has a negative <see cref="P:Godot.Aabb.Size"/>.
            See also <see cref="P:Godot.Aabb.Volume"/>.
            </summary>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Aabb"/> has volume.
            </returns>
        </member>
        <member name="M:Godot.Aabb.Intersection(Godot.Aabb)">
            <summary>
            Returns the intersection of this <see cref="T:Godot.Aabb"/> and <paramref name="with"/>.
            </summary>
            <param name="with">The other <see cref="T:Godot.Aabb"/>.</param>
            <returns>The clipped <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.Intersects(Godot.Aabb)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Aabb"/> overlaps with <paramref name="with"/>
            (i.e. they have at least one point in common).
            </summary>
            <param name="with">The other <see cref="T:Godot.Aabb"/> to check for intersections with.</param>
            <returns>
            A <see langword="bool"/> for whether or not they are intersecting.
            </returns>
        </member>
        <member name="M:Godot.Aabb.IntersectsPlane(Godot.Plane)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Aabb"/> is on both sides of <paramref name="plane"/>.
            </summary>
            <param name="plane">The <see cref="T:Godot.Plane"/> to check for intersection.</param>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Aabb"/> intersects the <see cref="T:Godot.Plane"/>.
            </returns>
        </member>
        <member name="M:Godot.Aabb.IntersectsSegment(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Aabb"/> intersects
            the line segment between <paramref name="from"/> and <paramref name="to"/>.
            </summary>
            <param name="from">The start of the line segment.</param>
            <param name="to">The end of the line segment.</param>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Aabb"/> intersects the line segment.
            </returns>
        </member>
        <member name="M:Godot.Aabb.IsFinite">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Godot.Aabb"/> is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Aabb.Merge(Godot.Aabb)">
            <summary>
            Returns a larger <see cref="T:Godot.Aabb"/> that contains this <see cref="T:Godot.Aabb"/> and <paramref name="with"/>.
            </summary>
            <param name="with">The other <see cref="T:Godot.Aabb"/>.</param>
            <returns>The merged <see cref="T:Godot.Aabb"/>.</returns>
        </member>
        <member name="M:Godot.Aabb.#ctor(Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs an <see cref="T:Godot.Aabb"/> from a position and size.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size, typically positive.</param>
        </member>
        <member name="M:Godot.Aabb.#ctor(Godot.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an <see cref="T:Godot.Aabb"/> from a <paramref name="position"/>,
            <paramref name="width"/>, <paramref name="height"/>, and <paramref name="depth"/>.
            </summary>
            <param name="position">The position.</param>
            <param name="width">The width, typically positive.</param>
            <param name="height">The height, typically positive.</param>
            <param name="depth">The depth, typically positive.</param>
        </member>
        <member name="M:Godot.Aabb.#ctor(System.Single,System.Single,System.Single,Godot.Vector3)">
            <summary>
            Constructs an <see cref="T:Godot.Aabb"/> from <paramref name="x"/>,
            <paramref name="y"/>, <paramref name="z"/>, and <paramref name="size"/>.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="z">The position's Z coordinate.</param>
            <param name="size">The size, typically positive.</param>
        </member>
        <member name="M:Godot.Aabb.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an <see cref="T:Godot.Aabb"/> from <paramref name="x"/>,
            <paramref name="y"/>, <paramref name="z"/>, <paramref name="width"/>,
            <paramref name="height"/>, and <paramref name="depth"/>.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="z">The position's Z coordinate.</param>
            <param name="width">The width, typically positive.</param>
            <param name="height">The height, typically positive.</param>
            <param name="depth">The depth, typically positive.</param>
        </member>
        <member name="M:Godot.Aabb.op_Equality(Godot.Aabb,Godot.Aabb)">
            <summary>
            Returns <see langword="true"/> if the AABBs are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Aabb.IsEqualApprox(Godot.Aabb)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left AABB.</param>
            <param name="right">The right AABB.</param>
            <returns>Whether or not the AABBs are exactly equal.</returns>
        </member>
        <member name="M:Godot.Aabb.op_Inequality(Godot.Aabb,Godot.Aabb)">
            <summary>
            Returns <see langword="true"/> if the AABBs are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Aabb.IsEqualApprox(Godot.Aabb)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left AABB.</param>
            <param name="right">The right AABB.</param>
            <returns>Whether or not the AABBs are not equal.</returns>
        </member>
        <member name="M:Godot.Aabb.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the AABB is exactly equal
            to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Aabb.IsEqualApprox(Godot.Aabb)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the AABB and the object are equal.</returns>
        </member>
        <member name="M:Godot.Aabb.Equals(Godot.Aabb)">
            <summary>
            Returns <see langword="true"/> if the AABBs are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Aabb.IsEqualApprox(Godot.Aabb)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other AABB.</param>
            <returns>Whether or not the AABBs are exactly equal.</returns>
        </member>
        <member name="M:Godot.Aabb.IsEqualApprox(Godot.Aabb)">
            <summary>
            Returns <see langword="true"/> if this AABB and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> on each component.
            </summary>
            <param name="other">The other AABB to compare.</param>
            <returns>Whether or not the AABBs structures are approximately equal.</returns>
        </member>
        <member name="M:Godot.Aabb.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Aabb"/>.
            </summary>
            <returns>A hash code for this AABB.</returns>
        </member>
        <member name="M:Godot.Aabb.ToString">
            <summary>
            Converts this <see cref="T:Godot.Aabb"/> to a string.
            </summary>
            <returns>A string representation of this AABB.</returns>
        </member>
        <member name="M:Godot.Aabb.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Aabb"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this AABB.</returns>
        </member>
        <member name="T:Godot.Basis">
             <summary>
             3×3 matrix used for 3D rotation and scale.
             Almost always used as an orthogonal basis for a Transform.
            
             Contains 3 vector fields X, Y and Z as its columns, which are typically
             interpreted as the local basis vectors of a 3D transformation. For such use,
             it is composed of a scaling and a rotation matrix, in that order (M = R.S).
            
             Can also be accessed as array of 3D vectors. These vectors are normally
             orthogonal to each other, but are not necessarily normalized (due to scaling).
            
             For more information, read this documentation article:
             https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html
             </summary>
        </member>
        <member name="P:Godot.Basis.X">
            <summary>
            The basis matrix's X vector (column 0).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Column0"/> and array index <c>[0]</c>.</value>
        </member>
        <member name="P:Godot.Basis.Y">
            <summary>
            The basis matrix's Y vector (column 1).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Column1"/> and array index <c>[1]</c>.</value>
        </member>
        <member name="P:Godot.Basis.Z">
            <summary>
            The basis matrix's Z vector (column 2).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Column2"/> and array index <c>[2]</c>.</value>
        </member>
        <member name="F:Godot.Basis.Row0">
            <summary>
            Row 0 of the basis matrix. Shows which vectors contribute
            to the X direction. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
        </member>
        <member name="F:Godot.Basis.Row1">
            <summary>
            Row 1 of the basis matrix. Shows which vectors contribute
            to the Y direction. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
        </member>
        <member name="F:Godot.Basis.Row2">
            <summary>
            Row 2 of the basis matrix. Shows which vectors contribute
            to the Z direction. Rows are not very useful for user code,
            but are more efficient for some internal calculations.
            </summary>
        </member>
        <member name="P:Godot.Basis.Column0">
            <summary>
            Column 0 of the basis matrix (the X vector).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.X"/> and array index <c>[0]</c>.</value>
        </member>
        <member name="P:Godot.Basis.Column1">
            <summary>
            Column 1 of the basis matrix (the Y vector).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Y"/> and array index <c>[1]</c>.</value>
        </member>
        <member name="P:Godot.Basis.Column2">
            <summary>
            Column 2 of the basis matrix (the Z vector).
            </summary>
            <value>Equivalent to <see cref="P:Godot.Basis.Z"/> and array index <c>[2]</c>.</value>
        </member>
        <member name="P:Godot.Basis.Scale">
            <summary>
            Assuming that the matrix is the combination of a rotation and scaling,
            return the absolute value of scaling factors along each axis.
            </summary>
        </member>
        <member name="P:Godot.Basis.Item(System.Int32)">
            <summary>
            Access whole columns in the form of <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="column">Which column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="column"/> is not 0, 1, 2 or 3.
            </exception>
            <value>The basis column.</value>
        </member>
        <member name="P:Godot.Basis.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix elements in column-major order.
            </summary>
            <param name="column">Which column, the matrix horizontal position.</param>
            <param name="row">Which row, the matrix vertical position.</param>
            <value>The matrix element.</value>
        </member>
        <member name="M:Godot.Basis.Determinant">
             <summary>
             Returns the determinant of the basis matrix. If the basis is
             uniformly scaled, its determinant is the square of the scale.
            
             A negative determinant means the basis has a negative scale.
             A zero determinant means the basis isn't invertible,
             and is usually considered invalid.
             </summary>
             <returns>The determinant of the basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.GetEuler(Godot.EulerOrder)">
             <summary>
             Returns the basis's rotation in the form of Euler angles.
             The Euler order depends on the <paramref name="order"/> parameter,
             by default it uses the YXZ convention: when decomposing,
             first Z, then X, and Y last. The returned vector contains
             the rotation angles in the format (X angle, Y angle, Z angle).
            
             Consider using the <see cref="M:Godot.Basis.GetRotationQuaternion"/> method instead, which
             returns a <see cref="T:Godot.Quaternion"/> quaternion instead of Euler angles.
             </summary>
             <param name="order">The Euler order to use. By default, use YXZ order (most common).</param>
             <returns>A <see cref="T:Godot.Vector3"/> representing the basis rotation in Euler angles.</returns>
        </member>
        <member name="M:Godot.Basis.GetRotationQuaternion">
            <summary>
            Returns the <see cref="T:Godot.Basis"/>'s rotation in the form of a
            <see cref="T:Godot.Quaternion"/>. See <see cref="M:Godot.Basis.GetEuler(Godot.EulerOrder)"/> if you
            need Euler angles, but keep in mind quaternions should generally
            be preferred to Euler angles.
            </summary>
            <returns>The basis rotation.</returns>
        </member>
        <member name="M:Godot.Basis.Inverse">
            <summary>
            Returns the inverse of the matrix.
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:Godot.Basis.IsFinite">
            <summary>
            Returns <see langword="true"/> if this basis is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Basis.LookingAt(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean)">
            <summary>
            Creates a <see cref="T:Godot.Basis"/> with a rotation such that the forward
            axis (-Z) points towards the <paramref name="target"/> position.
            The up axis (+Y) points as close to the <paramref name="up"/> vector
            as possible while staying perpendicular to the forward axis.
            The resulting Basis is orthonormalized.
            The <paramref name="target"/> and <paramref name="up"/> vectors
            cannot be zero, and cannot be parallel to each other.
            </summary>
            <param name="target">The position to look at.</param>
            <param name="up">The relative up direction.</param>
            <param name="useModelFront">
            If true, then the model is oriented in reverse,
            towards the model front axis (+Z, Vector3.ModelFront),
            which is more useful for orienting 3D models.
            </param>
            <returns>The resulting basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Orthonormalized">
            <summary>
            Returns the orthonormalized version of the basis matrix (useful to
            call occasionally to avoid rounding errors for orthogonal matrices).
            This performs a Gram-Schmidt orthonormalization on the basis of the matrix.
            </summary>
            <returns>An orthonormalized basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Rotated(Godot.Vector3,System.Single)">
            <summary>
            Introduce an additional rotation around the given <paramref name="axis"/>
            by <paramref name="angle"/> (in radians). The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate, in radians.</param>
            <returns>The rotated basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Scaled(Godot.Vector3)">
            <summary>
            Introduce an additional scaling specified by the given 3D scaling factor.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.ScaledLocal(Godot.Vector3)">
            <summary>
            Returns this basis with each axis scaled by the corresponding component in the given <paramref name="scale"/>.
            The basis matrix's columns are multiplied by <paramref name="scale"/>'s components.
            This operation is a local scale (relative to self).
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.Slerp(Godot.Basis,System.Single)">
            <summary>
            Assuming that the matrix is a proper rotation matrix, slerp performs
            a spherical-linear interpolation with another rotation matrix.
            </summary>
            <param name="target">The destination basis for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting basis matrix of the interpolation.</returns>
        </member>
        <member name="M:Godot.Basis.Tdotx(Godot.Vector3)">
            <summary>
            Transposed dot product with the X axis of the matrix.
            </summary>
            <param name="with">A vector to calculate the dot product with.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Godot.Basis.Tdoty(Godot.Vector3)">
            <summary>
            Transposed dot product with the Y axis of the matrix.
            </summary>
            <param name="with">A vector to calculate the dot product with.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Godot.Basis.Tdotz(Godot.Vector3)">
            <summary>
            Transposed dot product with the Z axis of the matrix.
            </summary>
            <param name="with">A vector to calculate the dot product with.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Godot.Basis.Transposed">
            <summary>
            Returns the transposed version of the basis matrix.
            </summary>
            <returns>The transposed basis matrix.</returns>
        </member>
        <member name="P:Godot.Basis.Identity">
            <summary>
            The identity basis, with no rotation or scaling applied.
            This is used as a replacement for <c>Basis()</c> in GDScript.
            Do not use <c>new Basis()</c> with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to <c>new Basis(Vector3.Right, Vector3.Up, Vector3.Back)</c>.</value>
        </member>
        <member name="P:Godot.Basis.FlipX">
            <summary>
            The basis that will flip something along the X axis when used in a transformation.
            </summary>
            <value>Equivalent to <c>new Basis(Vector3.Left, Vector3.Up, Vector3.Back)</c>.</value>
        </member>
        <member name="P:Godot.Basis.FlipY">
            <summary>
            The basis that will flip something along the Y axis when used in a transformation.
            </summary>
            <value>Equivalent to <c>new Basis(Vector3.Right, Vector3.Down, Vector3.Back)</c>.</value>
        </member>
        <member name="P:Godot.Basis.FlipZ">
            <summary>
            The basis that will flip something along the Z axis when used in a transformation.
            </summary>
            <value>Equivalent to <c>new Basis(Vector3.Right, Vector3.Up, Vector3.Forward)</c>.</value>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Quaternion)">
            <summary>
            Constructs a pure rotation basis matrix from the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to create the basis from.</param>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Vector3,System.Single)">
            <summary>
            Constructs a pure rotation basis matrix, rotated around the given <paramref name="axis"/>
            by <paramref name="angle"/> (in radians). The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate, in radians.</param>
        </member>
        <member name="M:Godot.Basis.#ctor(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a basis matrix from 3 axis vectors (matrix columns).
            </summary>
            <param name="column0">The X vector, or Column0.</param>
            <param name="column1">The Y vector, or Column1.</param>
            <param name="column2">The Z vector, or Column2.</param>
        </member>
        <member name="M:Godot.Basis.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a transformation matrix from the given components.
            Arguments are named such that xy is equal to calling <c>X.Y</c>.
            </summary>
            <param name="xx">The X component of the X column vector, accessed via <c>b.X.X</c> or <c>[0][0]</c>.</param>
            <param name="yx">The X component of the Y column vector, accessed via <c>b.Y.X</c> or <c>[1][0]</c>.</param>
            <param name="zx">The X component of the Z column vector, accessed via <c>b.Z.X</c> or <c>[2][0]</c>.</param>
            <param name="xy">The Y component of the X column vector, accessed via <c>b.X.Y</c> or <c>[0][1]</c>.</param>
            <param name="yy">The Y component of the Y column vector, accessed via <c>b.Y.Y</c> or <c>[1][1]</c>.</param>
            <param name="zy">The Y component of the Z column vector, accessed via <c>b.Y.Y</c> or <c>[2][1]</c>.</param>
            <param name="xz">The Z component of the X column vector, accessed via <c>b.X.Y</c> or <c>[0][2]</c>.</param>
            <param name="yz">The Z component of the Y column vector, accessed via <c>b.Y.Y</c> or <c>[1][2]</c>.</param>
            <param name="zz">The Z component of the Z column vector, accessed via <c>b.Y.Y</c> or <c>[2][2]</c>.</param>
        </member>
        <member name="M:Godot.Basis.FromEuler(Godot.Vector3,Godot.EulerOrder)">
            <summary>
            Constructs a Basis matrix from Euler angles in the specified rotation order. By default, use YXZ order (most common).
            </summary>
            <param name="euler">The Euler angles to use.</param>
            <param name="order">The order to compose the Euler angles.</param>
        </member>
        <member name="M:Godot.Basis.FromScale(Godot.Vector3)">
            <summary>
            Constructs a pure scale basis matrix with no rotation or shearing.
            The scale values are set as the main diagonal of the matrix,
            and all of the other parts of the matrix are zero.
            </summary>
            <param name="scale">The scale Vector3.</param>
            <returns>A pure scale Basis matrix.</returns>
        </member>
        <member name="M:Godot.Basis.op_Multiply(Godot.Basis,Godot.Basis)">
            <summary>
            Composes these two basis matrices by multiplying them
            together. This has the effect of transforming the second basis
            (the child) by the first basis (the parent).
            </summary>
            <param name="left">The parent basis.</param>
            <param name="right">The child basis.</param>
            <returns>The composed basis.</returns>
        </member>
        <member name="M:Godot.Basis.op_Multiply(Godot.Basis,Godot.Vector3)">
            <summary>
            Returns a Vector3 transformed (multiplied) by the inverse basis matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>vector * basis</c> is equivalent to <c>basis.Transposed() * vector</c>.
            See <see cref="M:Godot.Basis.Transposed"/>.
            For transforming by inverse of a non-orthonormal basis (e.g. with scaling)
            <c>basis.Inverse() * vector</c> can be used instead. See <see cref="M:Godot.Basis.Inverse"/>.
            </summary>
            <param name="basis">The basis matrix transformation to apply.</param>
            <param name="vector">A Vector3 to transform.</param>
            <returns>The transformed Vector3.</returns>
        </member>
        <member name="M:Godot.Basis.op_Multiply(Godot.Vector3,Godot.Basis)">
             <summary>
             Returns a Vector3 transformed (multiplied) by the transposed basis matrix.
            
             Note: This results in a multiplication by the inverse of the
             basis matrix only if it represents a rotation-reflection.
             </summary>
             <param name="vector">A Vector3 to inversely transform.</param>
             <param name="basis">The basis matrix transformation to apply.</param>
             <returns>The inversely transformed vector.</returns>
        </member>
        <member name="M:Godot.Basis.op_Equality(Godot.Basis,Godot.Basis)">
            <summary>
            Returns <see langword="true"/> if the basis matrices are exactly
            equal. Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Basis.IsEqualApprox(Godot.Basis)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left basis.</param>
            <param name="right">The right basis.</param>
            <returns>Whether or not the basis matrices are exactly equal.</returns>
        </member>
        <member name="M:Godot.Basis.op_Inequality(Godot.Basis,Godot.Basis)">
            <summary>
            Returns <see langword="true"/> if the basis matrices are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Basis.IsEqualApprox(Godot.Basis)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left basis.</param>
            <param name="right">The right basis.</param>
            <returns>Whether or not the basis matrices are not equal.</returns>
        </member>
        <member name="M:Godot.Basis.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Basis"/> is
            exactly equal to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Basis.IsEqualApprox(Godot.Basis)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the basis matrix and the object are exactly equal.</returns>
        </member>
        <member name="M:Godot.Basis.Equals(Godot.Basis)">
            <summary>
            Returns <see langword="true"/> if the basis matrices are exactly
            equal. Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Basis.IsEqualApprox(Godot.Basis)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other basis.</param>
            <returns>Whether or not the basis matrices are exactly equal.</returns>
        </member>
        <member name="M:Godot.Basis.IsEqualApprox(Godot.Basis)">
            <summary>
            Returns <see langword="true"/> if this basis and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> on each component.
            </summary>
            <param name="other">The other basis to compare.</param>
            <returns>Whether or not the bases are approximately equal.</returns>
        </member>
        <member name="M:Godot.Basis.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Basis"/>.
            </summary>
            <returns>A hash code for this basis.</returns>
        </member>
        <member name="M:Godot.Basis.ToString">
            <summary>
            Converts this <see cref="T:Godot.Basis"/> to a string.
            </summary>
            <returns>A string representation of this basis.</returns>
        </member>
        <member name="M:Godot.Basis.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Basis"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this basis.</returns>
        </member>
        <member name="T:Godot.Callable">
             <summary>
             Callable is a first class object which can be held in variables and passed to functions.
             It represents a given method in an Object, and is typically used for signal callbacks.
             </summary>
             <example>
             <code>
             public void PrintArgs(object ar1, object arg2, object arg3 = null)
             {
                 GD.PrintS(arg1, arg2, arg3);
             }
            
             public void Test()
             {
                 // This Callable object will call the PrintArgs method defined above.
                 Callable callable = new Callable(this, nameof(PrintArgs));
                 callable.Call("hello", "world"); // Prints "hello world null".
                 callable.Call(Vector2.Up, 42, callable); // Prints "(0, -1) 42 Node(Node.cs)::PrintArgs".
                 callable.Call("invalid"); // Invalid call, should have at least 2 arguments.
             }
             </code>
             </example>
        </member>
        <member name="P:Godot.Callable.Target">
            <summary>
            Object that contains the method or delegate. May be <see langword="null"/>
            if the method is static, or the object is not a <see cref="T:Godot.GodotObject"/>.
            </summary>
        </member>
        <member name="P:Godot.Callable.Method">
            <summary>
            Name of the method that will be called if this Callable was created from a method name.
            </summary>
        </member>
        <member name="P:Godot.Callable.Custom">
            <summary>
            If this is a custom Callable, contains the <see cref="T:Godot.Bridge.CustomCallable"/> that created it.
            Otherwise, <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Godot.Callable.Delegate">
            <summary>
            Delegate of the method that will be called if this Callable was created from a delegate.
            </summary>
        </member>
        <member name="M:Godot.Callable.CreateTakingOwnership(Godot.NativeInterop.NativeGodotCallable)">
            <summary>
            Constructs a new <see cref="T:Godot.Callable"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Callable.CreateCopying(Godot.NativeInterop.NativeGodotCallable)">
            <summary>
            Constructs a new <see cref="T:Godot.Callable"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Callable.CreateTakingOwnership(Godot.Bridge.CustomCallable)">
            <summary>
            Constructs a new <see cref="T:Godot.Callable"/> from the value borrowed from
            <paramref name="customCallable"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Callable.#ctor(Godot.GodotObject,Godot.StringName)">
            <summary>
            Constructs a new <see cref="T:Godot.Callable"/> for the method called <paramref name="method"/>
            in the specified <paramref name="target"/>.
            </summary>
            <param name="target">Object that contains the method.</param>
            <param name="method">Name of the method that will be called.</param>
        </member>
        <member name="M:Godot.Callable.Call(System.ReadOnlySpan{Godot.Variant})">
            <summary>
            Calls the method represented by this <see cref="T:Godot.Callable"/>.
            Arguments can be passed and should match the method's signature.
            </summary>
            <param name="args">Arguments that will be passed to the method call.</param>
            <returns>The value returned by the method.</returns>
        </member>
        <member name="M:Godot.Callable.CallDeferred(System.ReadOnlySpan{Godot.Variant})">
            <summary>
            Calls the method represented by this <see cref="T:Godot.Callable"/> in deferred mode, i.e. during the idle frame.
            Arguments can be passed and should match the method's signature.
            </summary>
            <param name="args">Arguments that will be passed to the method call.</param>
        </member>
        <member name="M:Godot.Callable.Bind(System.ReadOnlySpan{Godot.Variant})">
            <summary>
            Constructs a new <see cref="T:Godot.Callable"/> with one or more arguments bound.
            When called, the bound arguments are passed <i>after</i> the arguments supplied by
            <see cref="M:Godot.Callable.Call(System.ReadOnlySpan{Godot.Variant})"/>. See also <see cref="M:Godot.Callable.Unbind(System.Int32)"/>.
            <b>Note:</b> When this method is chained with other similar methods, the order in
            which the argument list is modified is read from right to left.
            </summary>
            <param name="args">Arguments to bind to the new Callable.</param>
            <returns>A new Callable with the arguments bound.</returns>
        </member>
        <member name="M:Godot.Callable.Unbind(System.Int32)">
            <summary>
            Constructs a new <see cref="T:Godot.Callable"/> with a number of arguments unbound.
            In other words, when the new callable is called the last few arguments supplied
            by the user are ignored, according to <paramref name="argCount"/>.
            The remaining arguments are passed to the callable. This allows to use the
            original callable in a context that attempts to pass more arguments than this
            callable can handle, e.g. a signal with a fixed number of arguments.
            See also <see cref="M:Godot.Callable.Bind(System.ReadOnlySpan{Godot.Variant})"/>.
            <b>Note:</b> When this method is chained with other similar methods, the order in
            which the argument list is modified is read from right to left.
            </summary>
            <example>
            <code>
            foo.Unbind(1).Call(1, 2); // Calls foo(1).
            foo.Bind(3, 4).Unbind(1).Call(1, 2); // Calls foo(1, 3, 4), note that it does not change the arguments from bind.
            </code>
            </example>
            <param name="argCount">Number of arguments to unbind in the new Callable.</param>
            <returns>A new Callable with the arguments unbound.</returns>
        </member>
        <member name="M:Godot.Callable.CreateWithUnsafeTrampoline(System.Delegate,)">
             <summary>
             <para>
             Constructs a new <see cref="T:Godot.Callable"/> using the <paramref name="trampoline"/>
             function pointer to dynamically invoke the given <paramref name="delegate"/>.
             </para>
             <para>
             The parameters passed to the <paramref name="trampoline"/> function are:
             </para>
             <list type="number">
                <item>
                    <term>delegateObj</term>
                    <description>The given <paramref name="delegate"/>, upcast to <see cref="T:System.Object"/>.</description>
                </item>
                <item>
                    <term>args</term>
                    <description>Array of <see cref="T:Godot.NativeInterop.NativeGodotVariant"/> arguments.</description>
                </item>
                <item>
                    <term>ret</term>
                    <description>Return value of type <see cref="T:Godot.NativeInterop.NativeGodotVariant"/>.</description>
                </item>
            </list>
             <para>
             The delegate should be downcast to a more specific delegate type before invoking.
             </para>
             </summary>
             <example>
             Usage example:
            
             <code>
                 static void Trampoline(object delegateObj, NativeGodotVariantPtrSpan args, out NativeGodotVariant ret)
                 {
                     if (args.Count != 1)
                         throw new ArgumentException($&quot;Callable expected {1} arguments but received {args.Count}.&quot;);
            
                     TResult res = ((Func&lt;int, string&gt;)delegateObj)(
                         VariantConversionCallbacks.GetToManagedCallback&lt;int&gt;()(args[0])
                     );
            
                     ret = VariantConversionCallbacks.GetToVariantCallback&lt;string&gt;()(res);
                 }
            
                 var callable = Callable.CreateWithUnsafeTrampoline((int num) =&gt; &quot;foo&quot; + num.ToString(), &amp;Trampoline);
                 var res = (string)callable.Call(10);
                 Console.WriteLine(res);
             </code>
             </example>
             <param name="delegate">Delegate method that will be called.</param>
             <param name="trampoline">Trampoline function pointer for invoking the delegate.</param>
        </member>
        <member name="T:Godot.Collections.GodotArray">
            <summary>
            Wrapper around Godot's Array class, an array of Variant
            typed elements allocated in the engine in C++. Useful when
            interfacing with the engine. Otherwise prefer .NET collections
            such as <see cref="T:System.Array"/> or <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor(System.Collections.Generic.IEnumerable{Godot.Variant})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor(System.ReadOnlySpan{Godot.Variant})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given Variants.
            </summary>
            <param name="array">The Variants to put in the new array.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor(System.ReadOnlySpan{Godot.StringName})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given StringNames.
            </summary>
            <param name="array">The StringNames to put in the new array.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor(System.ReadOnlySpan{Godot.NodePath})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given NodePaths.
            </summary>
            <param name="array">The NodePaths to put in the new array.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor(System.ReadOnlySpan{Godot.Rid})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given RIDs.
            </summary>
            <param name="array">The RIDs to put in the new array.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.#ctor(System.ReadOnlySpan{Godot.GodotObject})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given objects.
            </summary>
            <param name="array">The objects to put in the new array.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.CreateTakingOwnership(Godot.NativeInterop.NativeGodotArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.CreateCopying(Godot.NativeInterop.NativeGodotArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.Create(System.ReadOnlySpan{Godot.Variant})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Create``1(System.ReadOnlySpan{``0})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.GodotArray"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.op_Addition(Godot.Collections.GodotArray,Godot.Collections.GodotArray)">
            <summary>
            Concatenates two <see cref="T:Godot.Collections.GodotArray"/>s together, with the <paramref name="right"/>
            being added to the end of the <see cref="T:Godot.Collections.GodotArray"/> specified in <paramref name="left"/>.
            For example, <c>[1, 2] + [3, 4]</c> results in <c>[1, 2, 3, 4]</c>.
            </summary>
            <param name="left">The first array.</param>
            <param name="right">The second array.</param>
            <returns>A new Godot Array with the contents of both arrays.</returns>
        </member>
        <member name="P:Godot.Collections.GodotArray.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The property is assigned and the array is read-only.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see cref="T:Godot.Variant"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.GodotArray.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.GodotArray"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="P:Godot.Collections.GodotArray.IsReadOnly">
            <summary>
            Returns <see langword="true"/> if the array is read-only.
            See <see cref="M:Godot.Collections.GodotArray.MakeReadOnly"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.MakeReadOnly">
            <summary>
            Makes the <see cref="T:Godot.Collections.GodotArray"/> read-only, i.e. disabled modying of the
            array's elements. Does not apply to nested content, e.g. content of
            nested arrays.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray.Add(Godot.Variant)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.GodotArray"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="item">The <see cref="T:Godot.Variant"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see cref="T:Godot.Variant"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.BinarySearch(System.Int32,System.Int32,Godot.Variant)">
            <summary>
            Finds the index of an existing value using binary search.
            If the value is not present in the array, it returns the bitwise
            complement of the insertion index that maintains sorting order.
            Note: Calling <see cref="M:Godot.Collections.GodotArray.BinarySearch(System.Int32,System.Int32,Godot.Variant)"/> on an
            unsorted array results in unexpected behavior.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range in the <see cref="T:Godot.Collections.GodotArray"/>.
            </exception>
            <param name="index">The starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate.</param>
            <returns>
            The index of the item in the array, if <paramref name="item"/> is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than <paramref name="item"/> or, if
            there is no larger element, the bitwise complement of <see cref="P:Godot.Collections.GodotArray.Count"/>.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.BinarySearch(Godot.Variant)">
            <summary>
            Finds the index of an existing value using binary search.
            If the value is not present in the array, it returns the bitwise
            complement of the insertion index that maintains sorting order.
            Note: Calling <see cref="M:Godot.Collections.GodotArray.BinarySearch(Godot.Variant)"/> on an unsorted
            array results in unexpected behavior.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>
            The index of the item in the array, if <paramref name="item"/> is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than <paramref name="item"/> or, if
            there is no larger element, the bitwise complement of <see cref="P:Godot.Collections.GodotArray.Count"/>.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.GodotArray.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray.Contains(Godot.Variant)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <example>
            <code>
            GodotArray arr = ["inside", 7];
            GD.Print(arr.Contains("inside")); // True
            GD.Print(arr.Contains("outside")); // False
            GD.Print(arr.Contains(7)); // True
            GD.Print(arr.Contains("7")); // False
            </code>
            </example>
            <param name="item">The <see cref="T:Godot.Variant"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.CopyTo(Godot.Variant[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.GodotArray"/> to the given
            <see cref="T:Godot.Variant"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.Duplicate(System.Boolean)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.GodotArray"/>.
            If <paramref name="deep"/> is <see langword="true"/>, a deep copy if performed:
            all nested arrays and dictionaries are duplicated and will not be shared with
            the original array. If <see langword="false"/>, a shallow copy is made and
            references to the original nested arrays and dictionaries are kept, so that
            modifying a sub-array or dictionary in the copy will also impact those
            referenced in the source array. Note that any <see cref="T:Godot.GodotObject"/> derived
            elements will be shallow copied regardless of the <paramref name="deep"/>
            setting.
            </summary>
            <param name="deep">If <see langword="true"/>, performs a deep copy.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Fill(Godot.Variant)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.GodotArray.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            Note: If <paramref name="value"/> is of a reference type (<see cref="T:Godot.GodotObject"/>
            derived, <see cref="T:Godot.Collections.GodotArray"/> or <see cref="T:Godot.Collections.GodotDictionary"/>, etc.) then the array
            is filled with the references to the same object, i.e. no duplicates are
            created.
            </summary>
            <example>
            <code>
            var array = new GodotArray();
            array.Resize(10);
            array.Fill(0); // Initialize the 10 elements to 0.
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.IndexOf(Godot.Variant)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.IndexOf(Godot.Variant,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.LastIndexOf(Godot.Variant)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.LastIndexOf(Godot.Variant,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Insert(System.Int32,Godot.Variant)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see cref="T:Godot.Variant"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.Max">
            <summary>
            Returns the maximum value contained in the array if all elements are of
            comparable types. If the elements can't be compared, <see langword="null"/>
            is returned.
            </summary>
            <returns>The maximum value contained in the array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Min">
            <summary>
            Returns the minimum value contained in the array if all elements are of
            comparable types. If the elements can't be compared, <see langword="null"/>
            is returned.
            </summary>
            <returns>The minimum value contained in the array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.PickRandom">
            <summary>
            Returns a random value from the target array.
            </summary>
            <example>
            <code>
            GodotArray array = [1, 2, 3, 4];
            GD.Print(array.PickRandom()); // Prints either of the four numbers.
            </code>
            </example>
            <returns>A random element from the array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.RecursiveEqual(Godot.Collections.GodotArray)">
            <summary>
            Compares this <see cref="T:Godot.Collections.GodotArray"/> against the <paramref name="other"/>
            <see cref="T:Godot.Collections.GodotArray"/> recursively. Returns <see langword="true"/> if the
            sizes and contents of the arrays are equal, <see langword="false"/>
            otherwise.
            </summary>
            <param name="other">The other array to compare against.</param>
            <returns>
            <see langword="true"/> if the sizes and contents of the arrays are equal,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Remove(Godot.Variant)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.GodotArray.Remove(Godot.Variant)"/> instead.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are
            <see langword="null"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray.Shuffle">
            <summary>
            Shuffles the array such that the items will have a random order.
            This method uses the global random number generator common to methods
            such as <see cref="M:Godot.GD.Randi"/>. Call <see cref="M:Godot.GD.Randomize"/> to
            ensure that a new seed will be used each time if you want
            non-reproducible shuffling.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray.Slice(System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.SliceCore(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the slice of the <see cref="T:Godot.Collections.GodotArray"/>, from <paramref name="start"/>
            (inclusive) to <paramref name="end"/> (exclusive), as a new <see cref="T:Godot.Collections.GodotArray"/>.
            The absolute value of <paramref name="start"/> and <paramref name="end"/>
            will be clamped to the array size.
            If either <paramref name="start"/> or <paramref name="end"/> are negative, they
            will be relative to the end of the array (i.e. <c>arr.SliceCore(0, -2)</c>
            is a shorthand for <c>arr.SliceCore(0, arr.Count - 2)</c>).
            If specified, <paramref name="step"/> is the relative index between source
            elements. It can be negative, then <paramref name="start"/> must be higher than
            <paramref name="end"/>. For example, <c>[0, 1, 2, 3, 4, 5].SliceCore(5, 1, -2)</c>
            returns <c>[5, 3]</c>.
            If <paramref name="deep"/> is true, each element will be copied by value
            rather than by reference.
            </summary>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="end">The zero-based index at which the range ends.</param>
            <param name="step">The relative index between source elements to take.</param>
            <param name="deep">If <see langword="true"/>, performs a deep copy.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.Sort">
            <summary>
            Sorts the array.
            Note: The sorting algorithm used is not stable. This means that values
            considered equal may have their order changed when using <see cref="M:Godot.Collections.GodotArray.Sort"/>.
            Note: Strings are sorted in alphabetical order (as opposed to natural order).
            This may lead to unexpected behavior when sorting an array of strings ending
            with a sequence of numbers.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
            <example>
            <code>
            GodotArray strings = ["string1", "string2", "string10", "string11"];
            strings.Sort();
            GD.Print(strings); // Prints [string1, string10, string11, string2]
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.GodotArray.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotArray.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.GodotArray.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.GodotArray.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.GodotArray.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.GodotArray"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray.GetVariantBorrowElementAt(System.Int32,Godot.NativeInterop.NativeGodotVariant@)">
            <summary>
            The variant returned via the <paramref name="elem"/> parameter is owned by the Array and must not be disposed.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
        </member>
        <member name="T:Godot.Collections.GodotArray`1">
            <summary>
            Typed wrapper around Godot's Array class, an array of <typeparamref name="T"/>
            annotated, Variant typed elements allocated in the engine in C++.
            Useful when interfacing with the engine. Otherwise prefer .NET collections
            such as arrays or <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <remarks>
            While the elements are statically annotated to <typeparamref name="T"/>,
            the underlying array still stores <see cref="T:Godot.Variant"/>, which has the same
            memory footprint per element as an untyped <see cref="T:Godot.Collections.GodotArray"/>.
            </remarks>
            <typeparam name="T">The type of the array's elements.</typeparam>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.#ctor(Godot.Collections.GodotArray)">
            <summary>
            Constructs a typed <see cref="T:Godot.Collections.GodotArray`1"/> from an untyped <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <param name="underlyingArray">The untyped array to use as the underlying array.</param>
            <returns>A new Godot Array instance with the same underlying array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray`1"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray`1"/> from the given items.
            </summary>
            <param name="array">The items to put in the new array.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.CreateTakingOwnership(Godot.NativeInterop.NativeGodotArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray`1"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.CreateCopying(Godot.NativeInterop.NativeGodotArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotArray`1"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.op_Explicit(Godot.Collections.GodotArray)~Godot.Collections.GodotArray{`0}">
            <summary>
            Converts an untyped <see cref="T:Godot.Collections.GodotArray"/> to a typed <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <param name="from">The untyped array to convert.</param>
            <returns>
            A new Godot Array instance with the same underlying array,
            or <see langword="null"/> if <see paramref="from"/> was null.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.op_Explicit(Godot.Collections.GodotArray{`0})~Godot.Collections.GodotArray">
            <summary>
            Converts this typed <see cref="T:Godot.Collections.GodotArray`1"/> to an untyped <see cref="T:Godot.Collections.GodotArray"/>.
            </summary>
            <param name="from">The typed array to convert.</param>
            <returns>
            The underlying Godot Array instance, or <see langword="null"/> if
            <see paramref="from"/> was null.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.GodotArray`1"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.op_Addition(Godot.Collections.GodotArray{`0},Godot.Collections.GodotArray{`0})">
            <summary>
            Concatenates two <see cref="T:Godot.Collections.GodotArray`1"/>s together, with the <paramref name="right"/>
            being added to the end of the <see cref="T:Godot.Collections.GodotArray`1"/> specified in <paramref name="left"/>.
            For example, <c>[1, 2] + [3, 4]</c> results in <c>[1, 2, 3, 4]</c>.
            </summary>
            <param name="left">The first array.</param>
            <param name="right">The second array.</param>
            <returns>A new Godot Array with the contents of both arrays.</returns>
        </member>
        <member name="P:Godot.Collections.GodotArray`1.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The property is assigned and the array is read-only.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see cref="T:Godot.Variant"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.GodotArray`1.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.GodotArray`1"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="P:Godot.Collections.GodotArray`1.IsReadOnly">
            <summary>
            Returns <see langword="true"/> if the array is read-only.
            See <see cref="M:Godot.Collections.GodotArray`1.MakeReadOnly"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.MakeReadOnly">
            <summary>
            Makes the <see cref="T:Godot.Collections.GodotArray`1"/> read-only, i.e. disabled modying of the
            array's elements. Does not apply to nested content, e.g. content of
            nested arrays.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Add(`0)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.GodotArray`1"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="item">The <see cref="T:Godot.Variant"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see cref="T:Godot.Variant"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.BinarySearch(System.Int32,System.Int32,`0)">
            <summary>
            Finds the index of an existing value using binary search.
            If the value is not present in the array, it returns the bitwise
            complement of the insertion index that maintains sorting order.
            Note: Calling <see cref="M:Godot.Collections.GodotArray`1.BinarySearch(System.Int32,System.Int32,`0)"/> on an unsorted
            array results in unexpected behavior.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range in the <see cref="T:Godot.Collections.GodotArray`1"/>.
            </exception>
            <param name="index">The starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate.</param>
            <returns>
            The index of the item in the array, if <paramref name="item"/> is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than <paramref name="item"/> or, if
            there is no larger element, the bitwise complement of <see cref="P:Godot.Collections.GodotArray`1.Count"/>.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.BinarySearch(`0)">
            <summary>
            Finds the index of an existing value using binary search.
            If the value is not present in the array, it returns the bitwise
            complement of the insertion index that maintains sorting order.
            Note: Calling <see cref="M:Godot.Collections.GodotArray`1.BinarySearch(`0)"/> on an unsorted
            array results in unexpected behavior.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>
            The index of the item in the array, if <paramref name="item"/> is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than <paramref name="item"/> or, if
            there is no larger element, the bitwise complement of <see cref="P:Godot.Collections.GodotArray`1.Count"/>.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.GodotArray`1.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Contains(`0)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <example>
            <code>
            GodotArray&lt;string&gt; arr = ["inside", "7"];
            GD.Print(arr.Contains("inside")); // True
            GD.Print(arr.Contains("outside")); // False
            GD.Print(arr.Contains(7)); // False
            GD.Print(arr.Contains("7")); // True
            </code>
            </example>
            <param name="item">The item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.GodotArray`1"/> to the given
            C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The C# array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Duplicate(System.Boolean)">
            <summary>
            Duplicates this <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <param name="deep">If <see langword="true"/>, performs a deep copy.</param>
            <returns>A new Godot Array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Fill(`0)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.GodotArray`1.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            Note: If <paramref name="value"/> is of a reference type (<see cref="T:Godot.GodotObject"/>
            derived, <see cref="T:Godot.Collections.GodotArray"/> or <see cref="T:Godot.Collections.GodotDictionary"/>, etc.) then the array
            is filled with the references to the same object, i.e. no duplicates are
            created.
            </summary>
            <example>
            <code>
            var array = new GodotArray&lt;int&gt;();
            array.Resize(10);
            array.Fill(0); // Initialize the 10 elements to 0.
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.IndexOf(`0)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.LastIndexOf(Godot.Variant)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.LastIndexOf(Godot.Variant,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see cref="T:Godot.Variant"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see cref="T:Godot.Variant"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Max">
            <summary>
            Returns the maximum value contained in the array if all elements are of
            comparable types. If the elements can't be compared, <see langword="default"/>
            is returned.
            </summary>
            <returns>The maximum value contained in the array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Min">
            <summary>
            Returns the minimum value contained in the array if all elements are of
            comparable types. If the elements can't be compared, <see langword="default"/>
            is returned.
            </summary>
            <returns>The minimum value contained in the array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.PickRandom">
            <summary>
            Returns a random value from the target array.
            </summary>
            <example>
            <code>
            GodotArray&lt;int&gt; array = [1, 2, 3, 4];
            GD.Print(array.PickRandom()); // Prints either of the four numbers.
            </code>
            </example>
            <returns>A random element from the array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.RecursiveEqual(Godot.Collections.GodotArray{`0})">
            <summary>
            Compares this <see cref="T:Godot.Collections.GodotArray`1"/> against the <paramref name="other"/>
            <see cref="T:Godot.Collections.GodotArray`1"/> recursively. Returns <see langword="true"/> if the
            sizes and contents of the arrays are equal, <see langword="false"/>
            otherwise.
            </summary>
            <param name="other">The other array to compare against.</param>
            <returns>
            <see langword="true"/> if the sizes and contents of the arrays are equal,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="item">The value to remove.</param>
            <returns>A <see langword="bool"/> indicating success or failure.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.GodotArray`1.Remove(`0)"/> instead.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Resize(System.Int32)">
            <summary>
            Resizes this <see cref="T:Godot.Collections.GodotArray`1"/> to the given size.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Shuffle">
            <summary>
            Shuffles the array such that the items will have a random order.
            This method uses the global random number generator common to methods
            such as <see cref="M:Godot.GD.Randi"/>. Call <see cref="M:Godot.GD.Randomize"/> to
            ensure that a new seed will be used each time if you want
            non-reproducible shuffling.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Slice(System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.SliceCore(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the slice of the <see cref="T:Godot.Collections.GodotArray`1"/>, from <paramref name="start"/>
            (inclusive) to <paramref name="end"/> (exclusive), as a new <see cref="T:Godot.Collections.GodotArray`1"/>.
            The absolute value of <paramref name="start"/> and <paramref name="end"/>
            will be clamped to the array size.
            If either <paramref name="start"/> or <paramref name="end"/> are negative, they
            will be relative to the end of the array (i.e. <c>arr.GetSliceRange(0, -2)</c>
            is a shorthand for <c>arr.GetSliceRange(0, arr.Count - 2)</c>).
            If specified, <paramref name="step"/> is the relative index between source
            elements. It can be negative, then <paramref name="start"/> must be higher than
            <paramref name="end"/>. For example, <c>[0, 1, 2, 3, 4, 5].GetSliceRange(5, 1, -2)</c>
            returns <c>[5, 3]</c>.
            If <paramref name="deep"/> is true, each element will be copied by value
            rather than by reference.
            </summary>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="end">The zero-based index at which the range ends.</param>
            <param name="step">The relative index between source elements to take.</param>
            <param name="deep">If <see langword="true"/>, performs a deep copy.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Sort">
            <summary>
            Sorts the array.
            Note: The sorting algorithm used is not stable. This means that values
            considered equal may have their order changed when using <see cref="M:Godot.Collections.GodotArray`1.Sort"/>.
            Note: Strings are sorted in alphabetical order (as opposed to natural order).
            This may lead to unexpected behavior when sorting an array of strings ending
            with a sequence of numbers.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
            <example>
            <code>
            GodotArray&lt;string&gt; strings = ["string1", "string2", "string10", "string11"];
            strings.Sort();
            GD.Print(strings); // Prints [string1, string10, string11, string2]
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The array is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.GodotArray`1.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotArray`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.GodotArray`1"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.op_Implicit(Godot.Collections.GodotArray{`0})~Godot.Variant">
            <summary>
            Converts this <see cref="T:Godot.Collections.GodotArray`1"/> to a <see cref="T:Godot.Variant"/>.
            </summary>
            <returns>A Variant that contains this array.</returns>
        </member>
        <member name="M:Godot.Collections.GodotArray`1.op_Explicit(Godot.Variant)~Godot.Collections.GodotArray{`0}">
            <summary>
            Converts the <see cref="T:Godot.Variant"/> to a <see cref="T:Godot.Collections.GodotArray`1"/>.
            </summary>
            <returns>The array contained in the Variant.</returns>
        </member>
        <member name="T:Godot.Collections.GodotDictionary">
            <summary>
            Wrapper around Godot's Dictionary class, a dictionary of Variant
            typed elements allocated in the engine in C++. Useful when
            interfacing with the engine.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
            <returns>A new Godot Dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.CreateTakingOwnership(Godot.NativeInterop.NativeGodotDictionary)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotDictionary"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.CreateCopying(Godot.NativeInterop.NativeGodotDictionary)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotDictionary"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.GodotDictionary"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotDictionary.Item(Godot.Variant)">
            <summary>
            Returns the value at the given <paramref name="key"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The property is assigned and the dictionary is read-only.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and an entry for <paramref name="key"/>
            does not exist in the dictionary.
            </exception>
            <value>The value at the given <paramref name="key"/>.</value>
        </member>
        <member name="P:Godot.Collections.GodotDictionary.Keys">
            <summary>
            Gets the collection of keys in this <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotDictionary.Values">
            <summary>
            Gets the collection of elements in this <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotDictionary.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.GodotDictionary"/>.
            This is also known as the size or length of the dictionary.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="P:Godot.Collections.GodotDictionary.IsReadOnly">
            <summary>
            Returns <see langword="true"/> if the dictionary is read-only.
            See <see cref="M:Godot.Collections.GodotDictionary.MakeReadOnly"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.MakeReadOnly">
            <summary>
            Makes the <see cref="T:Godot.Collections.GodotDictionary"/> read-only, i.e. disabled modying of the
            dictionary's elements. Does not apply to nested content, e.g. content of
            nested dictionaries.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Add(Godot.Variant,Godot.Variant)">
            <summary>
            Adds an value <paramref name="value"/> at key <paramref name="key"/>
            to this <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            An entry for <paramref name="key"/> already exists in the dictionary.
            </exception>
            <param name="key">The key at which to add the value.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Clear">
            <summary>
            Clears the dictionary, removing all entries from it.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.ContainsKey(Godot.Variant)">
            <summary>
            Checks if this <see cref="T:Godot.Collections.GodotDictionary"/> contains the given key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>Whether or not this dictionary contains the given key.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{Godot#Variant,Godot#Variant}}#CopyTo(System.Collections.Generic.KeyValuePair{Godot.Variant,Godot.Variant}[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.GodotDictionary"/> to the given untyped
            <see cref="T:System.Collections.Generic.KeyValuePair`2"/> array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Duplicate(System.Boolean)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.GodotDictionary"/>.
            If <paramref name="deep"/> is <see langword="true"/>, a deep copy is performed:
            all nested arrays and dictionaries are duplicated and will not be shared with
            the original dictionary. If <see langword="false"/>, a shallow copy is made and
            references to the original nested arrays and dictionaries are kept, so that
            modifying a sub-array or dictionary in the copy will also impact those
            referenced in the source dictionary. Note that any <see cref="T:Godot.GodotObject"/> derived
            elements will be shallow copied regardless of the <paramref name="deep"/>
            setting.
            </summary>
            <param name="deep">If <see langword="true"/>, performs a deep copy.</param>
            <returns>A new Godot Dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Merge(Godot.Collections.GodotDictionary,System.Boolean)">
            <summary>
            Adds entries from <paramref name="dictionary"/> to this dictionary.
            By default, duplicate keys are not copied over, unless <paramref name="overwrite"/>
            is <see langword="true"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
            <param name="dictionary">Dictionary to copy entries from.</param>
            <param name="overwrite">If duplicate keys should be copied over as well.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.RecursiveEqual(Godot.Collections.GodotDictionary)">
            <summary>
            Compares this <see cref="T:Godot.Collections.GodotDictionary"/> against the <paramref name="other"/>
            <see cref="T:Godot.Collections.GodotDictionary"/> recursively. Returns <see langword="true"/> if the
            two dictionaries contain the same keys and values. The order of the entries
            does not matter.
            otherwise.
            </summary>
            <param name="other">The other dictionary to compare against.</param>
            <returns>
            <see langword="true"/> if the dictionaries contain the same keys and values,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.Remove(Godot.Variant)">
            <summary>
            Removes an element from this <see cref="T:Godot.Collections.GodotDictionary"/> by key.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.TryGetValue(Godot.Variant,Godot.Variant@)">
            <summary>
            Gets the value for the given <paramref name="key"/> in the dictionary.
            Returns <see langword="true"/> if an entry for the given key exists in
            the dictionary; otherwise, returns <see langword="false"/>.
            </summary>
            <param name="key">The key of the element to get.</param>
            <param name="value">The value at the given <paramref name="key"/>.</param>
            <returns>If an entry was found for the given <paramref name="key"/>.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.GodotDictionary"/> to a string.
            </summary>
            <returns>A string representation of this dictionary.</returns>
        </member>
        <member name="T:Godot.Collections.GodotDictionary`2">
            <summary>
            Typed wrapper around Godot's Dictionary class, a dictionary of <typeparamref name="TKey"/>
            and <typeparamref name="TValue"/> annotated, Variant typed elements allocated in the engine in C++.
            Useful when interfacing with the engine. Otherwise prefer .NET collections
            such as <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <remarks>
            While the elements are statically annotated to <typeparamref name="TKey"/> and <typeparamref name="TValue"/>,
            the underlying dictionary still stores <see cref="T:Godot.Variant"/>, which has the same memory footprint per element
            as an untyped <see cref="T:Godot.Collections.GodotDictionary"/>.
            </remarks>
            <typeparam name="TKey">The type of the dictionary's keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary's values.</typeparam>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
            <returns>A new Godot Dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.#ctor(Godot.Collections.GodotDictionary)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotDictionary`2"/> from the given dictionary's elements.
            </summary>
            <param name="underlyingDictionary">The untyped dictionary to use as the underlying dictionary.</param>
            <returns>A new Godot Dictionary instance with the same underlying dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotDictionary`2"/> from the given dictionary's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="dictionary"/> is <see langword="null"/>.
            </exception>
            <param name="dictionary">The dictionary to construct from.</param>
            <returns>A new Godot Dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.CreateTakingOwnership(Godot.NativeInterop.NativeGodotDictionary)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotDictionary`2"/> from the
            value borrowed from <paramref name="nativeValueToOwn"/>, taking ownership
            of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.CreateCopying(Godot.NativeInterop.NativeGodotDictionary)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.GodotDictionary`2"/> from the
            value borrowed from <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.op_Explicit(Godot.Collections.GodotDictionary)~Godot.Collections.GodotDictionary{`0,`1}">
            <summary>
            Converts an untyped <see cref="T:Godot.Collections.GodotDictionary"/> to a typed <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
            <param name="from">The untyped dictionary to convert.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.op_Explicit(Godot.Collections.GodotDictionary{`0,`1})~Godot.Collections.GodotDictionary">
            <summary>
            Converts this typed <see cref="T:Godot.Collections.GodotDictionary`2"/> to an untyped <see cref="T:Godot.Collections.GodotDictionary"/>.
            </summary>
            <param name="from">The typed dictionary to convert.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.GodotDictionary`2"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotDictionary`2.Item(`0)">
            <summary>
            Returns the value at the given <paramref name="key"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The property is assigned and the dictionary is read-only.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and an entry for <paramref name="key"/>
            does not exist in the dictionary.
            </exception>
            <value>The value at the given <paramref name="key"/>.</value>
        </member>
        <member name="P:Godot.Collections.GodotDictionary`2.Keys">
            <summary>
            Gets the collection of keys in this <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotDictionary`2.Values">
            <summary>
            Gets the collection of elements in this <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.GodotDictionary`2.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            This is also known as the size or length of the dictionary.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="P:Godot.Collections.GodotDictionary`2.IsReadOnly">
            <summary>
            Returns <see langword="true"/> if the dictionary is read-only.
            See <see cref="M:Godot.Collections.GodotDictionary`2.MakeReadOnly"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.MakeReadOnly">
            <summary>
            Makes the <see cref="T:Godot.Collections.GodotDictionary`2"/> read-only, i.e. disabled
            modying of the dictionary's elements. Does not apply to nested content,
            e.g. content of nested dictionaries.
            </summary>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Add(`0,`1)">
            <summary>
            Adds an object <paramref name="value"/> at key <paramref name="key"/>
            to this <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same <paramref name="key"/> already exists.
            </exception>
            <param name="key">The key at which to add the object.</param>
            <param name="value">The object to add.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Clear">
            <summary>
            Clears the dictionary, removing all entries from it.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.ContainsKey(`0)">
            <summary>
            Checks if this <see cref="T:Godot.Collections.GodotDictionary`2"/> contains the given key.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>Whether or not this dictionary contains the given key.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.GodotDictionary`2"/> to the given
            untyped C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Duplicate(System.Boolean)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            If <paramref name="deep"/> is <see langword="true"/>, a deep copy is performed:
            all nested arrays and dictionaries are duplicated and will not be shared with
            the original dictionary. If <see langword="false"/>, a shallow copy is made and
            references to the original nested arrays and dictionaries are kept, so that
            modifying a sub-array or dictionary in the copy will also impact those
            referenced in the source dictionary. Note that any <see cref="T:Godot.GodotObject"/> derived
            elements will be shallow copied regardless of the <paramref name="deep"/>
            setting.
            </summary>
            <param name="deep">If <see langword="true"/>, performs a deep copy.</param>
            <returns>A new Godot Dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Merge(Godot.Collections.GodotDictionary{`0,`1},System.Boolean)">
            <summary>
            Adds entries from <paramref name="dictionary"/> to this dictionary.
            By default, duplicate keys are not copied over, unless <paramref name="overwrite"/>
            is <see langword="true"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
            <param name="dictionary">Dictionary to copy entries from.</param>
            <param name="overwrite">If duplicate keys should be copied over as well.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.RecursiveEqual(Godot.Collections.GodotDictionary{`0,`1})">
            <summary>
            Compares this <see cref="T:Godot.Collections.GodotDictionary`2"/> against the <paramref name="other"/>
            <see cref="T:Godot.Collections.GodotDictionary`2"/> recursively. Returns <see langword="true"/> if the
            two dictionaries contain the same keys and values. The order of the entries does not matter.
            otherwise.
            </summary>
            <param name="other">The other dictionary to compare against.</param>
            <returns>
            <see langword="true"/> if the dictionaries contain the same keys and values,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.Remove(`0)">
            <summary>
            Removes an element from this <see cref="T:Godot.Collections.GodotDictionary`2"/> by key.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The dictionary is read-only.
            </exception>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value for the given <paramref name="key"/> in the dictionary.
            Returns <see langword="true"/> if an entry for the given key exists in
            the dictionary; otherwise, returns <see langword="false"/>.
            </summary>
            <param name="key">The key of the element to get.</param>
            <param name="value">The value at the given <paramref name="key"/>.</param>
            <returns>If an entry was found for the given <paramref name="key"/>.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.GodotDictionary`2"/> to a string.
            </summary>
            <returns>A string representation of this dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.op_Implicit(Godot.Collections.GodotDictionary{`0,`1})~Godot.Variant">
            <summary>
            Converts this <see cref="T:Godot.Collections.GodotDictionary`2"/> to a <see cref="T:Godot.Variant"/>.
            </summary>
            <returns>A Variant that contains this dictionary.</returns>
        </member>
        <member name="M:Godot.Collections.GodotDictionary`2.op_Explicit(Godot.Variant)~Godot.Collections.GodotDictionary{`0,`1}">
            <summary>
            Converts the <see cref="T:Godot.Variant"/> to a <see cref="T:Godot.Collections.GodotDictionary`2"/>.
            </summary>
            <returns>The dictionary contained in the Variant.</returns>
        </member>
        <member name="T:Godot.Collections.PackedArray">
            <summary>
            Provides methods for creating packed arrays.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedByteArray"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Byte Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{System.Int32})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt32Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Int32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{System.Int64})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt64Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Int64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{System.Single})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat32Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Float32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{System.Double})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat64Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Float64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{System.String})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedStringArray"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed String Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{Godot.Vector2})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector2Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Vector2 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{Godot.Vector3})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector3Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Vector3 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{Godot.Color})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedColorArray"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Color Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedArray.Create(System.ReadOnlySpan{Godot.Vector4})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector4Array"/> from the given span.
            </summary>
            <param name="span">The elements to construct from.</param>
            <returns>A new Packed Vector3 Array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedByteArray">
            <summary>
            Wrapper around Godot's Packed Byte Array class, and array of bytes
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
            <returns>A new Packed Byte Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedByteArray"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Byte Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedByteArray"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Byte Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedByteArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedByteArray"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.CreateCopying(Godot.NativeInterop.NativeGodotPackedByteArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedByteArray"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedByteArray"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedByteArray.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="byte"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedByteArray.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedByteArray"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Add(System.Byte)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedByteArray"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="byte"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.AddRange(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="byte"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedByteArray.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Contains(System.Byte)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="byte"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedByteArray"/> to the given
            <see langword="byte"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
            <returns>A new Packed Byte Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Fill(System.Byte)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedByteArray.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.IndexOf(System.Byte)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="byte"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.IndexOf(System.Byte,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="byte"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.LastIndexOf(System.Byte)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="byte"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.LastIndexOf(System.Byte,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="byte"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Insert(System.Int32,System.Byte)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="byte"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Remove(System.Byte)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedByteArray.Remove(System.Byte)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedByteArray"/>.
            Consider using <see cref="M:Godot.Collections.PackedByteArray.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedByteArray"/>.
            Consider using <see cref="M:Godot.Collections.PackedByteArray.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedByteArray.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedByteArray"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedByteArray.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedByteArray"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedByteArray.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedByteArray"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedByteArray.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedColorArray">
            <summary>
            Wrapper around Godot's Packed Color Array class, and array of colors
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
            <returns>A new Packed Color Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.#ctor(System.Collections.Generic.IEnumerable{Godot.Color})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedColorArray"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Color Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.#ctor(System.ReadOnlySpan{Godot.Color})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedColorArray"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Color Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedColorArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedColorArray"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.CreateCopying(Godot.NativeInterop.NativeGodotPackedColorArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedColorArray"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedColorArray"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedColorArray.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="Color"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedColorArray.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedColorArray"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Add(Godot.Color)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedColorArray"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="Color"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.AddRange(System.Collections.Generic.IEnumerable{Godot.Color})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="Color"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedColorArray.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Contains(Godot.Color)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="Color"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.CopyTo(Godot.Color[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedColorArray"/> to the given
            <see langword="Color"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
            <returns>A new Packed Color Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Fill(Godot.Color)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedColorArray.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.IndexOf(Godot.Color)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Color"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.IndexOf(Godot.Color,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Color"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.LastIndexOf(Godot.Color)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Color"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.LastIndexOf(Godot.Color,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Color"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Insert(System.Int32,Godot.Color)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="Color"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Remove(Godot.Color)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedColorArray.Remove(Godot.Color)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedColorArray"/>.
            Consider using <see cref="M:Godot.Collections.PackedColorArray.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedColorArray"/>.
            Consider using <see cref="M:Godot.Collections.PackedColorArray.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedColorArray.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedColorArray"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedColorArray.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedColorArray"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedColorArray.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedColorArray"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedColorArray.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedFloat32Array">
            <summary>
            Wrapper around Godot's Packed Float32 Array class, and array of 32-bit floats
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
            <returns>A new Packed Float32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat32Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Float32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.#ctor(System.ReadOnlySpan{System.Single})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat32Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Float32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedFloat32Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat32Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedFloat32Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat32Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedFloat32Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedFloat32Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="float"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedFloat32Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Add(System.Single)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="float"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.AddRange(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="float"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedFloat32Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Contains(System.Single)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="float"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.CopyTo(System.Single[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedFloat32Array"/> to the given
            <see langword="float"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
            <returns>A new Packed Float32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Fill(System.Single)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedFloat32Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.IndexOf(System.Single)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="float"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.IndexOf(System.Single,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="float"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.LastIndexOf(System.Single)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="float"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.LastIndexOf(System.Single,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="float"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Insert(System.Int32,System.Single)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="float"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Remove(System.Single)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedFloat32Array.Remove(System.Single)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedFloat32Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedFloat32Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedFloat32Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedFloat32Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedFloat32Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedFloat32Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat32Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedFloat32Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedFloat32Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedFloat64Array">
            <summary>
            Wrapper around Godot's Packed Float64 Array class, and array of 64-bit floats
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
            <returns>A new Packed Float64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat64Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Float64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.#ctor(System.ReadOnlySpan{System.Double})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat64Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Float64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedFloat64Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat64Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedFloat64Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedFloat64Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedFloat64Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedFloat64Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="double"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedFloat64Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Add(System.Double)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="double"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.AddRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="double"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedFloat64Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Contains(System.Double)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="double"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedFloat64Array"/> to the given
            <see langword="double"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
            <returns>A new Packed Float64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Fill(System.Double)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedFloat64Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.IndexOf(System.Double)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="double"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.IndexOf(System.Double,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="double"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.LastIndexOf(System.Double)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="double"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.LastIndexOf(System.Double,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="double"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Insert(System.Int32,System.Double)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="double"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Remove(System.Double)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedFloat64Array.Remove(System.Double)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedFloat64Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedFloat64Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedFloat64Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedFloat64Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedFloat64Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedFloat64Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedFloat64Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedFloat64Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedFloat64Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedInt32Array">
            <summary>
            Wrapper around Godot's Packed Int32 Array class, and array of 32-bit integers
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
            <returns>A new Packed Int32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt32Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Int32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.#ctor(System.ReadOnlySpan{System.Int32})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt32Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Int32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedInt32Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt32Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedInt32Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt32Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedInt32Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedInt32Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="int"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedInt32Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedInt32Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Add(System.Int32)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedInt32Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="int"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="int"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedInt32Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Contains(System.Int32)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="int"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedInt32Array"/> to the given
            <see langword="int"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
            <returns>A new Packed Int32 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Fill(System.Int32)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedInt32Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.IndexOf(System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="int"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.IndexOf(System.Int32,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="int"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.LastIndexOf(System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="int"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.LastIndexOf(System.Int32,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="int"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="int"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Remove(System.Int32)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedInt32Array.Remove(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedInt32Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedInt32Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedInt32Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedInt32Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedInt32Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedInt32Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedInt32Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedInt32Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt32Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedInt32Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedInt32Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedInt64Array">
            <summary>
            Wrapper around Godot's Packed Int64 Array class, and array of 64-bit integers
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
            <returns>A new Packed Int64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt64Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Int64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.#ctor(System.ReadOnlySpan{System.Int64})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt64Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Int64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedInt64Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt64Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedInt64Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedInt64Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedInt64Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedInt64Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="long"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedInt64Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedInt64Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Add(System.Int64)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedInt64Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="long"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.AddRange(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="long"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedInt64Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Contains(System.Int64)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="long"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedInt64Array"/> to the given
            <see langword="long"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
            <returns>A new Packed Int64 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Fill(System.Int64)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedInt64Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.IndexOf(System.Int64)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="long"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.IndexOf(System.Int64,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="long"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.LastIndexOf(System.Int64)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="long"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.LastIndexOf(System.Int64,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="long"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Insert(System.Int32,System.Int64)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="long"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Remove(System.Int64)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedInt64Array.Remove(System.Int64)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedInt64Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedInt64Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedInt64Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedInt64Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedInt64Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedInt64Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedInt64Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedInt64Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedInt64Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedInt64Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedInt64Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedStringArray">
            <summary>
            Wrapper around Godot's Packed String Array class, and array of strings
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <returns>A new Packed String Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedStringArray"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed String Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.#ctor(System.ReadOnlySpan{System.String})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedStringArray"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed String Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedStringArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedStringArray"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.CreateCopying(Godot.NativeInterop.NativeGodotPackedStringArray)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedStringArray"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedStringArray"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedStringArray.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="string"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedStringArray.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedStringArray"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Add(System.String)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedStringArray"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="string"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="string"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedStringArray.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Contains(System.String)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="string"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedStringArray"/> to the given
            <see langword="string"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <returns>A new Packed String Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Fill(System.String)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedStringArray.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.IndexOf(System.String)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="string"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.IndexOf(System.String,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="string"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.LastIndexOf(System.String)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="string"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.LastIndexOf(System.String,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="string"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="string"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Remove(System.String)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedStringArray.Remove(System.String)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedStringArray.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedStringArray"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedStringArray.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedStringArray"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedStringArray.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedStringArray"/> to a C# array.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedVector2Array">
            <summary>
            Wrapper around Godot's Packed Vector2 Array class, and array of vectors
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
            <returns>A new Packed Vector2 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.#ctor(System.Collections.Generic.IEnumerable{Godot.Vector2})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector2Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Vector2 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.#ctor(System.ReadOnlySpan{Godot.Vector2})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector2Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Vector2 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedVector2Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector2Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedVector2Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector2Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedVector2Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedVector2Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="Vector2"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedVector2Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedVector2Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Add(Godot.Vector2)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedVector2Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="Vector2"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.AddRange(System.Collections.Generic.IEnumerable{Godot.Vector2})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="Vector2"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedVector2Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Contains(Godot.Vector2)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="Vector2"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.CopyTo(Godot.Vector2[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedVector2Array"/> to the given
            <see langword="Vector2"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
            <returns>A new Packed Vector2 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Fill(Godot.Vector2)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedVector2Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.IndexOf(Godot.Vector2)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Vector2"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.IndexOf(Godot.Vector2,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Vector2"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.LastIndexOf(Godot.Vector2)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Vector2"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.LastIndexOf(Godot.Vector2,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Vector2"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Insert(System.Int32,Godot.Vector2)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="Vector2"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Remove(Godot.Vector2)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedVector2Array.Remove(Godot.Vector2)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedVector2Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedVector2Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedVector2Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedVector2Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedVector2Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedVector2Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedVector2Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedVector2Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector2Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedVector2Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedVector2Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedVector3Array">
            <summary>
            Wrapper around Godot's Packed Vector3 Array class, and array of vectors
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
            <returns>A new Packed Vector3 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.#ctor(System.Collections.Generic.IEnumerable{Godot.Vector3})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector3Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Vector3 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.#ctor(System.ReadOnlySpan{Godot.Vector3})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector3Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Vector3 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedVector3Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector3Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedVector3Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector3Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedVector3Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedVector3Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="Vector3"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedVector3Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedVector3Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Add(Godot.Vector3)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedVector3Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="Vector3"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.AddRange(System.Collections.Generic.IEnumerable{Godot.Vector3})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="Vector3"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedVector3Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Contains(Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="Vector3"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.CopyTo(Godot.Vector3[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedVector3Array"/> to the given
            <see langword="Vector3"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
            <returns>A new Packed Vector3 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Fill(Godot.Vector3)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedVector3Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.IndexOf(Godot.Vector3)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Vector3"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.IndexOf(Godot.Vector3,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Vector3"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.LastIndexOf(Godot.Vector3)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Vector3"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.LastIndexOf(Godot.Vector3,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Vector3"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Insert(System.Int32,Godot.Vector3)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="Vector3"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Remove(Godot.Vector3)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedVector3Array.Remove(Godot.Vector3)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedVector3Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedVector3Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedVector3Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedVector3Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedVector3Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedVector3Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedVector3Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedVector3Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector3Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedVector3Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedVector3Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Collections.PackedVector4Array">
            <summary>
            Wrapper around Godot's Packed Vector4 Array class, and array of vectors
            allocated in the engine in C++. Useful when interfacing with the engine.
            Otherwise prefer .NET collections such as <see cref="T:System.Array"/> or
            <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.#ctor">
            <summary>
            Constructs a new empty <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
            <returns>A new Packed Vector4 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.#ctor(System.Collections.Generic.IEnumerable{Godot.Vector4})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector4Array"/> from the given collection's elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">The collection of elements to construct from.</param>
            <returns>A new Packed Vector4 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.#ctor(System.ReadOnlySpan{Godot.Vector4})">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector4Array"/> from the given span.
            </summary>
            <param name="array">The elements to construct from.</param>
            <returns>A new Packed Vector4 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.CreateTakingOwnership(Godot.NativeInterop.NativeGodotPackedVector4Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector4Array"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.CreateCopying(Godot.NativeInterop.NativeGodotPackedVector4Array)">
            <summary>
            Constructs a new <see cref="T:Godot.Collections.PackedVector4Array"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.Collections.PackedVector4Array"/> instance.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.AsSpan">
            <summary>
            Creates a new span over the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.AsSpan(System.Int32)">
            <summary>
            Creates a new span over a portion of the array starting at a specified
            position to the end of the array.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new span over the portion of the array beginning at a specified
            position for a specified length.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.AsSpan(System.Index)">
            <summary>
            Creates a new span over the portion of the target array defined by an
            <see cref="T:System.Index"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.AsSpan(System.Range)">
            <summary>
            Creates a new span over a portion of a target array defined by a
            <see cref="T:System.Range"/> value.
            </summary>
            <returns>The span representation of the array.</returns>
        </member>
        <member name="P:Godot.Collections.PackedVector4Array.Item(System.Int32)">
            <summary>
            Returns the item at the given <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <value>The <see langword="Vector4"/> item at the given <paramref name="index"/>.</value>
        </member>
        <member name="P:Godot.Collections.PackedVector4Array.Count">
            <summary>
            Returns the number of elements in this <see cref="T:Godot.Collections.PackedVector4Array"/>.
            This is also known as the size or length of the array.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Add(Godot.Vector4)">
            <summary>
            Adds an item to the end of this <see cref="T:Godot.Collections.PackedVector4Array"/>.
            This is the same as <c>append</c> or <c>push_back</c> in GDScript.
            </summary>
            <param name="item">The <see langword="Vector4"/> item to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.AddRange(System.Collections.Generic.IEnumerable{Godot.Vector4})">
            <summary>
            Adds the elements of the specified collection to the end of this <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> is <see langword="null"/>.
            </exception>
            <param name="collection">Collection of <see langword="Vector4"/> items to add.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Clear">
            <summary>
            Clears the array. This is the equivalent to using <see cref="M:Godot.Collections.PackedVector4Array.Resize(System.Int32)"/>
            with a size of <c>0</c>
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Contains(Godot.Vector4)">
            <summary>
            Returns <see langword="true"/> if the array contains the given value.
            </summary>
            <param name="item">The <see langword="Vector4"/> item to look for.</param>
            <returns>Whether or not this array contains the given item.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.CopyTo(Godot.Vector4[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:Godot.Collections.PackedVector4Array"/> to the given
            <see langword="Vector4"/> C# array, starting at the given index.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0 or greater than the array's size.
            -or-
            The destination array was not big enough.
            </exception>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The index to start at.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Duplicate">
            <summary>
            Returns a copy of the <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
            <returns>A new Packed Vector4 Array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Fill(Godot.Vector4)">
            <summary>
            Assigns the given value to all elements in the array. This can typically be
            used together with <see cref="M:Godot.Collections.PackedVector4Array.Resize(System.Int32)"/> to create an array with a given
            size and initialized elements.
            </summary>
            <param name="value">The value to fill the array with.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.IndexOf(Godot.Vector4)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Vector4"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.IndexOf(Godot.Vector4,System.Int32)">
            <summary>
            Searches the array for a value and returns its index or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Vector4"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.LastIndexOf(Godot.Vector4)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <param name="item">The <see langword="Vector4"/> item to search for.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.LastIndexOf(Godot.Vector4,System.Int32)">
            <summary>
            Searches the array for a value in reverse order and returns its index
            or <c>-1</c> if not found.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="item">The <see langword="Vector4"/> item to search for.</param>
            <param name="index">The initial search index to start from.</param>
            <returns>The index of the item, or -1 if not found.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Insert(System.Int32,Godot.Vector4)">
            <summary>
            Inserts a new element at a given position in the array. The position
            must be valid, or at the end of the array (<c>pos == Count - 1</c>).
            Existing items will be moved to the right.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index to insert at.</param>
            <param name="item">The <see langword="Vector4"/> item to insert.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Remove(Godot.Vector4)">
            <summary>
            Removes the first occurrence of the specified <paramref name="item"/>
            from this <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
            <param name="item">The value to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the array by index.
            To remove an element by searching for its value, use
            <see cref="M:Godot.Collections.PackedVector4Array.Remove(Godot.Vector4)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="index">The index of the element to remove.</param>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Resize(System.Int32)">
            <summary>
            Resizes the array to contain a different number of elements. If the array
            size is smaller, elements are cleared, if bigger, new elements are <c>0</c>.
            </summary>
            <param name="newSize">The new size of the array.</param>
            <returns><see cref="F:Godot.Error.Ok"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Reverse">
            <summary>
            Reverses the order of the elements in the array.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Slice(System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedVector4Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedVector4Array.AsSpan(System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Slice(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source <see cref="T:Godot.Collections.PackedVector4Array"/>.
            Consider using <see cref="M:Godot.Collections.PackedVector4Array.AsSpan(System.Int32,System.Int32)"/> instead.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than the array's size.
            -or-
            <paramref name="length"/> is less than 0 or greater than the array's size.
            </exception>
            <param name="start">The zero-based index at which the range starts.</param>
            <param name="length">The length of the range.</param>
            <returns>A new array that contains the elements inside the slice range.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Sort">
            <summary>
            Sorts the elements of the array in ascending order.
            To sort with a custom predicate use
            <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.GetEnumerator">
            <summary>
            Gets an enumerator for this <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Godot.Collections.PackedVector4Array.Enumerator">
            <summary>
            Provides an enumerator for the elements of a <see cref="T:Godot.Collections.PackedVector4Array"/>.
            </summary>
        </member>
        <member name="P:Godot.Collections.PackedVector4Array.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.ToString">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedVector4Array"/> to a string.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="M:Godot.Collections.PackedVector4Array.ToArray">
            <summary>
            Converts this <see cref="T:Godot.Collections.PackedVector4Array"/> to a C# array.
            Consider using <see cref="M:Godot.Collections.PackedVector4Array.AsSpan"/> instead.
            </summary>
            <returns>A C# array representation of this array.</returns>
        </member>
        <member name="T:Godot.Color">
             <summary>
             A color represented by red, green, blue, and alpha (RGBA) components.
             The alpha component is often used for transparency.
             Values are in floating-point and usually range from 0 to 1.
             Some properties (such as <see cref="P:Godot.CanvasItem.Modulate"/>) may accept values
             greater than 1 (overbright or HDR colors).
            
             If you want to supply values in a range of 0 to 255, you should use
             <see cref="M:Godot.Color.Color8(System.Byte,System.Byte,System.Byte,System.Byte)"/> and the <c>r8</c>/<c>g8</c>/<c>b8</c>/<c>a8</c> properties.
             </summary>
        </member>
        <member name="F:Godot.Color.R">
            <summary>
            The color's red component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="F:Godot.Color.G">
            <summary>
            The color's green component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="F:Godot.Color.B">
            <summary>
            The color's blue component, typically on the range of 0 to 1.
            </summary>
        </member>
        <member name="F:Godot.Color.A">
            <summary>
            The color's alpha component, typically on the range of 0 to 1.
            A value of 0 means that the color is fully transparent.
            A value of 1 means that the color is fully opaque.
            </summary>
        </member>
        <member name="P:Godot.Color.R8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.R"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.G8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.G"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.B8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.B"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.A8">
            <summary>
            Wrapper for <see cref="F:Godot.Color.A"/> that uses the range 0 to 255 instead of 0 to 1.
            </summary>
            <value>Getting is equivalent to multiplying by 255 and rounding. Setting is equivalent to dividing by 255.</value>
        </member>
        <member name="P:Godot.Color.H">
            <summary>
            The HSV hue of this color, on the range 0 to 1.
            </summary>
            <value>Getting is a long process, refer to the source code for details. Setting uses <see cref="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)"/>.</value>
        </member>
        <member name="P:Godot.Color.S">
            <summary>
            The HSV saturation of this color, on the range 0 to 1.
            </summary>
            <value>Getting is equivalent to the ratio between the min and max RGB value. Setting uses <see cref="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)"/>.</value>
        </member>
        <member name="P:Godot.Color.V">
            <summary>
            The HSV value (brightness) of this color, on the range 0 to 1.
            </summary>
            <value>Getting is equivalent to using <see cref="M:System.Single.Max(System.Single,System.Single)"/> on the RGB components. Setting uses <see cref="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)"/>.</value>
        </member>
        <member name="P:Godot.Color.Luminance">
            <summary>
            Returns the light intensity of the color, as a value between 0.0 and 1.0 (inclusive).
            This is useful when determining light or dark color. Colors with a luminance smaller
            than 0.5 can be generally considered dark.
            Note: <see cref="P:Godot.Color.Luminance"/> relies on the color being in the linear color space to
            return an accurate relative luminance value. If the color is in the sRGB color space
            use <see cref="M:Godot.Color.SrgbToLinear"/> to convert it to the linear color space first.
            </summary>
        </member>
        <member name="P:Godot.Color.Item(System.Int32)">
            <summary>
            Access color components using their index.
            </summary>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Color.R"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Color.G"/>,
            <c>[2]</c> is equivalent to <see cref="F:Godot.Color.B"/>,
            <c>[3]</c> is equivalent to <see cref="F:Godot.Color.A"/>.
            </value>
        </member>
        <member name="M:Godot.Color.Blend(Godot.Color)">
            <summary>
            Returns a new color resulting from blending this color over another.
            If the color is opaque, the result is also opaque.
            The second color may have a range of alpha values.
            </summary>
            <param name="over">The color to blend over.</param>
            <returns>This color blended over <paramref name="over"/>.</returns>
        </member>
        <member name="M:Godot.Color.Clamp(System.Nullable{Godot.Color},System.Nullable{Godot.Color})">
            <summary>
            Returns a new color with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/>
            using <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The color with minimum allowed values.</param>
            <param name="max">The color with maximum allowed values.</param>
            <returns>The color with all components clamped.</returns>
        </member>
        <member name="M:Godot.Color.Darkened(System.Single)">
            <summary>
            Returns a new color resulting from making this color darker
            by the specified ratio (on the range of 0 to 1).
            </summary>
            <param name="amount">The ratio to darken by.</param>
            <returns>The darkened color.</returns>
        </member>
        <member name="M:Godot.Color.Inverted">
            <summary>
            Returns the inverted color: <c>(1 - r, 1 - g, 1 - b, a)</c>.
            </summary>
            <returns>The inverted color.</returns>
        </member>
        <member name="M:Godot.Color.Lightened(System.Single)">
            <summary>
            Returns a new color resulting from making this color lighter
            by the specified ratio (on the range of 0 to 1).
            </summary>
            <param name="amount">The ratio to lighten by.</param>
            <returns>The lightened color.</returns>
        </member>
        <member name="M:Godot.Color.Lerp(Godot.Color,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this color and <paramref name="to"/> by amount <paramref name="weight"/>.
            </summary>
            <param name="to">The destination color for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting color of the interpolation.</returns>
        </member>
        <member name="M:Godot.Color.LinearToSrgb">
            <summary>
            Returns the color converted to the sRGB color space.
            This method assumes the original color is in the linear color space.
            See also <see cref="M:Godot.Color.SrgbToLinear"/> which performs the opposite operation.
            </summary>
            <returns>The sRGB color.</returns>
        </member>
        <member name="M:Godot.Color.SrgbToLinear">
            <summary>
            Returns the color converted to linear color space.
            This method assumes the original color already is in sRGB color space.
            See also <see cref="M:Godot.Color.LinearToSrgb"/> which performs the opposite operation.
            </summary>
            <returns>The color in linear color space.</returns>
        </member>
        <member name="M:Godot.Color.ToAbgr32">
            <summary>
            Returns the color converted to an unsigned 32-bit integer in ABGR
            format (each byte represents a color channel).
            ABGR is the reversed version of the default format.
            </summary>
            <returns>A <see langword="uint"/> representing this color in ABGR32 format.</returns>
        </member>
        <member name="M:Godot.Color.ToAbgr64">
            <summary>
            Returns the color converted to an unsigned 64-bit integer in ABGR
            format (each word represents a color channel).
            ABGR is the reversed version of the default format.
            </summary>
            <returns>A <see langword="ulong"/> representing this color in ABGR64 format.</returns>
        </member>
        <member name="M:Godot.Color.ToArgb32">
            <summary>
            Returns the color converted to an unsigned 32-bit integer in ARGB
            format (each byte represents a color channel).
            ARGB is more compatible with DirectX, but not used much in Godot.
            </summary>
            <returns>A <see langword="uint"/> representing this color in ARGB32 format.</returns>
        </member>
        <member name="M:Godot.Color.ToArgb64">
            <summary>
            Returns the color converted to an unsigned 64-bit integer in ARGB
            format (each word represents a color channel).
            ARGB is more compatible with DirectX, but not used much in Godot.
            </summary>
            <returns>A <see langword="ulong"/> representing this color in ARGB64 format.</returns>
        </member>
        <member name="M:Godot.Color.ToRgba32">
            <summary>
            Returns the color converted to an unsigned 32-bit integer in RGBA
            format (each byte represents a color channel).
            RGBA is Godot's default and recommended format.
            </summary>
            <returns>A <see langword="uint"/> representing this color in RGBA32 format.</returns>
        </member>
        <member name="M:Godot.Color.ToRgba64">
            <summary>
            Returns the color converted to an unsigned 64-bit integer in RGBA
            format (each word represents a color channel).
            RGBA is Godot's default and recommended format.
            </summary>
            <returns>A <see langword="ulong"/> representing this color in RGBA64 format.</returns>
        </member>
        <member name="M:Godot.Color.ToHtml(System.Boolean)">
            <summary>
            Returns the color's HTML hexadecimal color string in RGBA format.
            </summary>
            <param name="includeAlpha">
            Whether or not to include alpha. If <see langword="false"/>, the color is RGB instead of RGBA.
            </param>
            <returns>A string for the HTML hexadecimal representation of this color.</returns>
        </member>
        <member name="M:Godot.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> from RGBA values, typically on the range of 0 to 1.
            </summary>
            <param name="r">The color's red component, typically on the range of 0 to 1.</param>
            <param name="g">The color's green component, typically on the range of 0 to 1.</param>
            <param name="b">The color's blue component, typically on the range of 0 to 1.</param>
            <param name="a">
            The color's alpha value, typically on the range of 0 to 1.
            A value of 0 means that the color is fully transparent.
            A value of 1 means that the color is fully opaque.
            </param>
        </member>
        <member name="M:Godot.Color.#ctor(Godot.Color,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> from an existing color and an alpha value.
            </summary>
            <param name="c">The color to construct from. Only its RGB values are used.</param>
            <param name="a">
            The color's alpha value, typically on the range of 0 to 1.
            A value of 0 means that the color is fully transparent.
            A value of 1 means that the color is fully opaque.
            </param>
        </member>
        <member name="M:Godot.Color.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> from an unsigned 32-bit integer in RGBA format
            (each byte represents a color channel).
            </summary>
            <param name="rgba">The <see langword="uint"/> representing the color as 0xRRGGBBAA.</param>
        </member>
        <member name="M:Godot.Color.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> from an unsigned 64-bit integer in RGBA format
            (each word represents a color channel).
            </summary>
            <param name="rgba">The <see langword="ulong"/> representing the color as 0xRRRRGGGGBBBBAAAA.</param>
        </member>
        <member name="M:Godot.Color.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> either from an HTML color code or from a
            standardized color name. Supported color names are the same as the
            <see cref="T:Godot.NamedColors"/> constants.
            </summary>
            <param name="code">The HTML color code or color name to construct from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A color cannot be inferred from the given <paramref name="code"/>.
            It was invalid HTML and a color with that name was not found.
            </exception>
        </member>
        <member name="M:Godot.Color.#ctor(System.String,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> either from an HTML color code or from a
            standardized color name, with <paramref name="alpha"/> on the range of 0 to 1. Supported
            color names are the same as the <see cref="T:Godot.NamedColors"/> constants.
            </summary>
            <param name="code">The HTML color code or color name to construct from.</param>
            <param name="alpha">The alpha (transparency) value, typically on the range of 0 to 1.</param>
        </member>
        <member name="M:Godot.Color.FromHtml(System.ReadOnlySpan{System.Char})">
            <summary>
            Constructs a <see cref="T:Godot.Color"/> from the HTML hexadecimal color string in RGBA format.
            </summary>
            <param name="rgba">A string for the HTML hexadecimal representation of this color.</param>
            <exception name="ArgumentOutOfRangeException">
            <paramref name="rgba"/> color code is invalid.
            </exception>
        </member>
        <member name="M:Godot.Color.Color8(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a color constructed from integer red, green, blue, and alpha channels.
            Each channel should have 8 bits of information ranging from 0 to 255.
            </summary>
            <param name="r8">The red component represented on the range of 0 to 255.</param>
            <param name="g8">The green component represented on the range of 0 to 255.</param>
            <param name="b8">The blue component represented on the range of 0 to 255.</param>
            <param name="a8">The alpha (transparency) component represented on the range of 0 to 255.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.Named(System.String)">
            <summary>
            Returns a color according to the standardized name, with the
            specified alpha value. Supported color names are the same as
            the constants defined in <see cref="T:Godot.NamedColors"/>.
            </summary>
            <param name="name">The name of the color.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A color with the given name is not found.
            </exception>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.Named(System.String,Godot.Color)">
            <summary>
            Returns a color according to the standardized name, with the
            specified alpha value. Supported color names are the same as
            the constants defined in <see cref="T:Godot.NamedColors"/>.
            If a color with the given name is not found, it returns
            <paramref name="default"/>.
            </summary>
            <param name="name">The name of the color.</param>
            <param name="default">
            The default color to return when a color with the given name
            is not found.
            </param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a color from an HSV profile. The <paramref name="hue"/>,
            <paramref name="saturation"/>, and <paramref name="value"/> are typically
            between 0.0 and 1.0.
            </summary>
            <param name="hue">The HSV hue, typically on the range of 0 to 1.</param>
            <param name="saturation">The HSV saturation, typically on the range of 0 to 1.</param>
            <param name="value">The HSV value (brightness), typically on the range of 0 to 1.</param>
            <param name="alpha">The alpha (transparency) value, typically on the range of 0 to 1.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.ToHsv(System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts a color to HSV values. This is equivalent to using each of
            the <c>h</c>/<c>s</c>/<c>v</c> properties, but much more efficient.
            </summary>
            <param name="hue">Output parameter for the HSV hue.</param>
            <param name="saturation">Output parameter for the HSV saturation.</param>
            <param name="value">Output parameter for the HSV value.</param>
        </member>
        <member name="M:Godot.Color.FromOkHsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a color from an OK HSL profile. The <paramref name="hue"/>,
            <paramref name="saturation"/>, and <paramref name="lightness"/> are typically
            between 0.0 and 1.0.
            </summary>
            <param name="hue">The OK HSL hue, typically on the range of 0 to 1.</param>
            <param name="saturation">The OK HSL saturation, typically on the range of 0 to 1.</param>
            <param name="lightness">The OK HSL lightness, typically on the range of 0 to 1.</param>
            <param name="alpha">The alpha (transparency) value, typically on the range of 0 to 1.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.FromRgbe9995(System.UInt32)">
            <summary>
            Encodes a <see cref="T:Godot.Color"/> from a RGBE9995 format integer.
            See <see cref="F:Godot.Image.Format.Rgbe9995"/>.
            </summary>
            <param name="rgbe">The RGBE9995 encoded color.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.FromString(System.String,Godot.Color)">
            <summary>
            Constructs a color from the given string, which can be either an HTML color
            code or a named color. Returns <paramref name="default"/> if the color cannot
            be inferred from the string. Supported color names are the same as the
            <see cref="T:Godot.NamedColors"/> constants.
            </summary>
            <param name="str">The HTML color code or color name.</param>
            <param name="default">The fallback color to return if the color cannot be inferred.</param>
            <returns>The constructed color.</returns>
        </member>
        <member name="M:Godot.Color.HtmlIsValid(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns <see langword="true"/> if <paramref name="color"/> is a valid HTML hexadecimal
            color string. The string must be a hexadecimal value (case-insensitive) of either 3,
            4, 6 or 8 digits, and may be prefixed by a hash sign (<c>#</c>).
            </summary>
            <param name="color">The HTML hexadecimal color string.</param>
            <returns>Whether or not the string was a valid HTML hexadecimal color string.</returns>
        </member>
        <member name="M:Godot.Color.op_Addition(Godot.Color,Godot.Color)">
            <summary>
            Adds each component of the <see cref="T:Godot.Color"/>
            with the components of the given <see cref="T:Godot.Color"/>.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>The added color.</returns>
        </member>
        <member name="M:Godot.Color.op_Subtraction(Godot.Color,Godot.Color)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Color"/>
            by the components of the given <see cref="T:Godot.Color"/>.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>The subtracted color.</returns>
        </member>
        <member name="M:Godot.Color.op_UnaryNegation(Godot.Color)">
            <summary>
            Inverts the given color. This is equivalent to
            <c>Colors.White - c</c> or
            <c>new Color(1 - c.R, 1 - c.G, 1 - c.B, 1 - c.A)</c>.
            </summary>
            <param name="color">The color to invert.</param>
            <returns>The inverted color.</returns>
        </member>
        <member name="M:Godot.Color.op_Multiply(Godot.Color,System.Single)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Color"/>
            by the given <see langword="float"/>.
            </summary>
            <param name="color">The color to multiply.</param>
            <param name="scale">The value to multiply by.</param>
            <returns>The multiplied color.</returns>
        </member>
        <member name="M:Godot.Color.op_Multiply(System.Single,Godot.Color)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Color"/>
            by the given <see langword="float"/>.
            </summary>
            <param name="scale">The value to multiply by.</param>
            <param name="color">The color to multiply.</param>
            <returns>The multiplied color.</returns>
        </member>
        <member name="M:Godot.Color.op_Multiply(Godot.Color,Godot.Color)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Color"/>
            by the components of the given <see cref="T:Godot.Color"/>.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>The multiplied color.</returns>
        </member>
        <member name="M:Godot.Color.op_Division(Godot.Color,System.Single)">
            <summary>
            Divides each component of the <see cref="T:Godot.Color"/>
            by the given <see langword="float"/>.
            </summary>
            <param name="color">The dividend vector.</param>
            <param name="scale">The divisor value.</param>
            <returns>The divided color.</returns>
        </member>
        <member name="M:Godot.Color.op_Division(Godot.Color,Godot.Color)">
            <summary>
            Divides each component of the <see cref="T:Godot.Color"/>
            by the components of the given <see cref="T:Godot.Color"/>.
            </summary>
            <param name="left">The dividend color.</param>
            <param name="right">The divisor color.</param>
            <returns>The divided color.</returns>
        </member>
        <member name="M:Godot.Color.op_Equality(Godot.Color,Godot.Color)">
            <summary>
            Returns <see langword="true"/> if the colors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Color.IsEqualApprox(Godot.Color)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>Whether or not the colors are equal.</returns>
        </member>
        <member name="M:Godot.Color.op_Inequality(Godot.Color,Godot.Color)">
            <summary>
            Returns <see langword="true"/> if the colors are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Color.IsEqualApprox(Godot.Color)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>Whether or not the colors are equal.</returns>
        </member>
        <member name="M:Godot.Color.op_LessThan(Godot.Color,Godot.Color)">
            <summary>
            Compares two <see cref="T:Godot.Color"/>s by first checking if
            the red value of the <paramref name="left"/> color is less than
            the red value of the <paramref name="right"/> color.
            If the red values are exactly equal, then it repeats this check
            with the green values of the two colors, then with the blue values,
            and then with the alpha value.
            This operator is useful for sorting colors.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Color.op_GreaterThan(Godot.Color,Godot.Color)">
            <summary>
            Compares two <see cref="T:Godot.Color"/>s by first checking if
            the red value of the <paramref name="left"/> color is greater than
            the red value of the <paramref name="right"/> color.
            If the red values are exactly equal, then it repeats this check
            with the green values of the two colors, then with the blue values,
            and then with the alpha value.
            This operator is useful for sorting colors.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Color.op_LessThanOrEqual(Godot.Color,Godot.Color)">
            <summary>
            Compares two <see cref="T:Godot.Color"/>s by first checking if
            the red value of the <paramref name="left"/> color is less than
            or equal to the red value of the <paramref name="right"/> color.
            If the red values are exactly equal, then it repeats this check
            with the green values of the two colors, then with the blue values,
            and then with the alpha value.
            This operator is useful for sorting colors.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Color.op_GreaterThanOrEqual(Godot.Color,Godot.Color)">
            <summary>
            Compares two <see cref="T:Godot.Color"/>s by first checking if
            the red value of the <paramref name="left"/> color is greater than
            or equal to the red value of the <paramref name="right"/> color.
            If the red values are exactly equal, then it repeats this check
            with the green values of the two colors, then with the blue values,
            and then with the alpha value.
            This operator is useful for sorting colors.
            </summary>
            <param name="left">The left color.</param>
            <param name="right">The right color.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Color.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if this color and <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether or not the color and the other object are equal.</returns>
        </member>
        <member name="M:Godot.Color.Equals(Godot.Color)">
            <summary>
            Returns <see langword="true"/> if the colors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Color.IsEqualApprox(Godot.Color)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other color.</param>
            <returns>Whether or not the colors are equal.</returns>
        </member>
        <member name="M:Godot.Color.IsEqualApprox(Godot.Color)">
            <summary>
            Returns <see langword="true"/> if this color and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other color to compare.</param>
            <returns>Whether or not the colors are approximately equal.</returns>
        </member>
        <member name="M:Godot.Color.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Color"/>.
            </summary>
            <returns>A hash code for this color.</returns>
        </member>
        <member name="M:Godot.Color.ToString">
            <summary>
            Converts this <see cref="T:Godot.Color"/> to a string.
            </summary>
            <returns>A string representation of this color.</returns>
        </member>
        <member name="M:Godot.Color.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Color"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this color.</returns>
        </member>
        <member name="T:Godot.NodePath">
             <summary>
             A pre-parsed relative or absolute path in a scene tree,
             for use with <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/> and similar functions.
             It can reference a node, a resource within a node, or a property
             of a node or resource.
             For instance, <c>"Path2D/PathFollow2D/Sprite2D:texture:size"</c>
             would refer to the <c>size</c> property of the <c>texture</c>
             resource on the node named <c>"Sprite2D"</c> which is a child of
             the other named nodes in the path.
             You will usually just pass a string to <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>
             and it will be automatically converted, but you may occasionally
             want to parse a path ahead of time with NodePath.
             Exporting a NodePath variable will give you a node selection widget
             in the properties panel of the editor, which can often be useful.
             A NodePath is composed of a list of slash-separated node names
             (like a filesystem path) and an optional colon-separated list of
             "subnames" which can be resources or properties.
            
             Note: In the editor, NodePath properties are automatically updated when moving,
             renaming or deleting a node in the scene tree, but they are never updated at runtime.
             </summary>
             <example>
             Some examples of NodePaths include the following:
             <code>
             // No leading slash means it is relative to the current node.
             new NodePath("A"); // Immediate child A.
             new NodePath("A/B"); // A's child B.
             new NodePath("."); // The current node.
             new NodePath(".."); // The parent node.
             new NodePath("../C"); // A sibling node C.
             // A leading slash means it is absolute from the SceneTree.
             new NodePath("/root"); // Equivalent to GetTree().Root
             new NodePath("/root/Main"); // If your main scene's root node were named "Main".
             new NodePath("/root/MyAutoload"); // If you have an autoloaded node or scene.
             </code>
             </example>
        </member>
        <member name="M:Godot.NodePath.CreateTakingOwnership(Godot.NativeInterop.NativeGodotNodePath)">
            <summary>
            Constructs a new <see cref="T:Godot.NodePath"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.NodePath.CreateCopying(Godot.NativeInterop.NativeGodotNodePath)">
            <summary>
            Constructs a new <see cref="T:Godot.NodePath"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.NodePath.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Godot.NodePath"/> from a string <paramref name="path"/>,
            e.g.: <c>"Path2D/PathFollow2D/Sprite2D:texture:size"</c>.
            A path is absolute if it starts with a slash. Absolute paths
            are only valid in the global scene tree, not within individual
            scenes. In a relative path, <c>"."</c> and <c>".."</c> indicate
            the current node and its parent.
            The "subnames" optionally included after the path to the target
            node can point to resources or properties, and can also be nested.
            </summary>
            <example>
            Examples of valid NodePaths (assuming that those nodes exist and
            have the referenced resources or properties):
            <code>
            // Points to the Sprite2D node.
            "Path2D/PathFollow2D/Sprite2D"
            // Points to the Sprite2D node and its "texture" resource.
            // GetNode() would retrieve "Sprite2D", while GetNodeAndResource()
            // would retrieve both the Sprite2D node and the "texture" resource.
            "Path2D/PathFollow2D/Sprite2D:texture"
            // Points to the Sprite2D node and its "position" property.
            "Path2D/PathFollow2D/Sprite2D:position"
            // Points to the Sprite2D node and the "x" component of its "position" property.
            "Path2D/PathFollow2D/Sprite2D:position:x"
            // Absolute path (from "root")
            "/root/Level/Path2D"
            </code>
            </example>
            <param name="path">A string that represents a path in a scene tree.</param>
        </member>
        <member name="M:Godot.NodePath.op_Explicit(System.String)~Godot.NodePath">
            <summary>
            Converts a string to a <see cref="T:Godot.NodePath"/>.
            </summary>
            <param name="from">The string to convert.</param>
        </member>
        <member name="M:Godot.NodePath.op_Explicit(Godot.NodePath)~System.String">
            <summary>
            Converts this <see cref="T:Godot.NodePath"/> to a string.
            </summary>
            <param name="from">The <see cref="T:Godot.NodePath"/> to convert.</param>
        </member>
        <member name="M:Godot.NodePath.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.StringName"/> instance.
            </summary>
        </member>
        <member name="M:Godot.NodePath.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.NodePath"/>.
            </summary>
        </member>
        <member name="M:Godot.NodePath.GetAsPropertyPath">
            <summary>
            Returns a node path with a colon character (<c>:</c>) prepended,
            transforming it to a pure property path with no node name (defaults
            to resolving from the current node).
            </summary>
            <example>
            <code>
            // This will be parsed as a node path to the "x" property in the "position" node.
            var nodePath = new NodePath("position:x");
            // This will be parsed as a node path to the "x" component of the "position" property in the current node.
            NodePath propertyPath = nodePath.GetAsPropertyPath();
            GD.Print(propertyPath); // :position:x
            </code>
            </example>
            <returns>The <see cref="T:Godot.NodePath"/> as a pure property path.</returns>
        </member>
        <member name="M:Godot.NodePath.GetConcatenatedNames">
            <summary>
            Returns all names concatenated with a slash character (<c>/</c>).
            </summary>
            <example>
            <code>
            var nodepath = new NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path");
            GD.Print(nodepath.GetConcatenatedNames()); // Path2D/PathFollow2D/Sprite2D
            </code>
            </example>
            <returns>The names concatenated with <c>/</c>.</returns>
        </member>
        <member name="M:Godot.NodePath.GetConcatenatedSubNames">
            <summary>
            Returns all subnames concatenated with a colon character (<c>:</c>)
            as separator, i.e. the right side of the first colon in a node path.
            </summary>
            <example>
            <code>
            var nodepath = new NodePath("Path2D/PathFollow2D/Sprite2D:texture:load_path");
            GD.Print(nodepath.GetConcatenatedSubnames()); // texture:load_path
            </code>
            </example>
            <returns>The subnames concatenated with <c>:</c>.</returns>
        </member>
        <member name="M:Godot.NodePath.GetName(System.Int32)">
            <summary>
            Gets the node name indicated by <paramref name="idx"/> (0 to <see cref="M:Godot.NodePath.GetNameCount"/>).
            </summary>
            <example>
            <code>
            var nodePath = new NodePath("Path2D/PathFollow2D/Sprite2D");
            GD.Print(nodePath.GetName(0)); // Path2D
            GD.Print(nodePath.GetName(1)); // PathFollow2D
            GD.Print(nodePath.GetName(2)); // Sprite
            </code>
            </example>
            <param name="idx">The name index.</param>
            <returns>The name at the given index <paramref name="idx"/>.</returns>
        </member>
        <member name="M:Godot.NodePath.GetNameCount">
            <summary>
            Gets the number of node names which make up the path.
            Subnames (see <see cref="M:Godot.NodePath.GetSubNameCount"/>) are not included.
            For example, <c>"Path2D/PathFollow2D/Sprite2D"</c> has 3 names.
            </summary>
            <returns>The number of node names which make up the path.</returns>
        </member>
        <member name="M:Godot.NodePath.GetSubName(System.Int32)">
            <summary>
            Gets the resource or property name indicated by <paramref name="idx"/> (0 to <see cref="M:Godot.NodePath.GetSubNameCount"/>).
            </summary>
            <param name="idx">The subname index.</param>
            <returns>The subname at the given index <paramref name="idx"/>.</returns>
        </member>
        <member name="M:Godot.NodePath.GetSubNameCount">
            <summary>
            Gets the number of resource or property names ("subnames") in the path.
            Each subname is listed after a colon character (<c>:</c>) in the node path.
            For example, <c>"Path2D/PathFollow2D/Sprite2D:texture:load_path"</c> has 2 subnames.
            </summary>
            <returns>The number of subnames in the path.</returns>
        </member>
        <member name="M:Godot.NodePath.IsAbsolute">
            <summary>
            Returns <see langword="true"/> if the node path is absolute (as opposed to relative),
            which means that it starts with a slash character (<c>/</c>). Absolute node paths can
            be used to access the root node (<c>"/root"</c>) or autoloads (e.g. <c>"/global"</c>
            if a "global" autoload was registered).
            </summary>
            <returns>If the <see cref="T:Godot.NodePath"/> is an absolute path.</returns>
        </member>
        <member name="P:Godot.NodePath.IsEmpty">
            <summary>
            Returns <see langword="true"/> if the node path is empty.
            </summary>
            <returns>If the <see cref="T:Godot.NodePath"/> is empty.</returns>
        </member>
        <member name="M:Godot.NodePath.op_Equality(Godot.NodePath,Godot.NodePath)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.NodePath"/>
            instances are equal.
            </summary>
            <param name="left">The left <see cref="T:Godot.NodePath"/>.</param>
            <param name="right">The right <see cref="T:Godot.NodePath"/>.</param>
            <returns>
            Whether or not the <see cref="T:Godot.NodePath"/> instances are equal.
            </returns>
        </member>
        <member name="M:Godot.NodePath.op_Inequality(Godot.NodePath,Godot.NodePath)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.NodePath"/>
            instances are not equal.
            </summary>
            <param name="left">The left <see cref="T:Godot.NodePath"/>.</param>
            <param name="right">The right <see cref="T:Godot.NodePath"/>.</param>
            <returns>
            Whether or not the <see cref="T:Godot.NodePath"/> instances are not equal.
            </returns>
        </member>
        <member name="M:Godot.NodePath.Equals(Godot.NodePath)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.NodePath"/>
            instances are equal.
            </summary>
            <param name="other">The other <see cref="T:Godot.NodePath"/>.</param>
            <returns>
            Whether or not the <see cref="T:Godot.NodePath"/> instances are equal.
            </returns>
        </member>
        <member name="M:Godot.NodePath.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.NodePath"/> is
            equal to the given object (<paramref name="obj"/>).
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>
            Whether or not the <see cref="T:Godot.NodePath"/> and the object are equal.
            </returns>
        </member>
        <member name="M:Godot.NodePath.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.NodePath"/>.
            </summary>
            <returns>A hash code for this <see cref="T:Godot.NodePath"/>.</returns>
        </member>
        <member name="M:Godot.NodePath.ToString">
            <summary>
            Converts this <see cref="T:Godot.NodePath"/> to a string.
            </summary>
            <returns>A string representation of this <see cref="T:Godot.NodePath"/>.</returns>
        </member>
        <member name="T:Godot.Plane">
            <summary>
            Plane represents a normalized plane equation.
            "Over" or "Above" the plane is considered the side of
            the plane towards where the normal is pointing.
            </summary>
        </member>
        <member name="P:Godot.Plane.Normal">
            <summary>
            The normal of the plane, which must be a unit vector.
            In the scalar equation of the plane <c>ax + by + cz = d</c>, this is
            the vector <c>(a, b, c)</c>, where <c>d</c> is the <see cref="P:Godot.Plane.D"/> property.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.X"/>, <see cref="P:Godot.Plane.Y"/>, and <see cref="P:Godot.Plane.Z"/>.</value>
        </member>
        <member name="P:Godot.Plane.D">
            <summary>
            The distance from the origin to the plane (in the direction of
            <see cref="P:Godot.Plane.Normal"/>). This value is typically non-negative.
            In the scalar equation of the plane <c>ax + by + cz = d</c>,
            this is <c>d</c>, while the <c>(a, b, c)</c> coordinates are represented
            by the <see cref="P:Godot.Plane.Normal"/> property.
            </summary>
            <value>The plane's distance from the origin.</value>
        </member>
        <member name="P:Godot.Plane.X">
            <summary>
            The X component of the plane's normal vector.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/>'s X value.</value>
        </member>
        <member name="P:Godot.Plane.Y">
            <summary>
            The Y component of the plane's normal vector.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/>'s Y value.</value>
        </member>
        <member name="P:Godot.Plane.Z">
            <summary>
            The Z component of the plane's normal vector.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/>'s Z value.</value>
        </member>
        <member name="M:Godot.Plane.DistanceTo(Godot.Vector3)">
            <summary>
            Returns the shortest distance from this plane to the position <paramref name="point"/>.
            </summary>
            <param name="point">The position to use for the calculation.</param>
            <returns>The shortest distance.</returns>
        </member>
        <member name="M:Godot.Plane.GetCenter">
            <summary>
            Returns the center of the plane, the point on the plane closest to the origin.
            The point where the normal line going through the origin intersects the plane.
            </summary>
            <value>Equivalent to <see cref="P:Godot.Plane.Normal"/> multiplied by <see cref="P:Godot.Plane.D"/>.</value>
        </member>
        <member name="M:Godot.Plane.HasPoint(Godot.Vector3,System.Single)">
            <summary>
            Returns <see langword="true"/> if point is inside the plane.
            Comparison uses a custom minimum tolerance threshold.
            </summary>
            <param name="point">The point to check.</param>
            <param name="tolerance">The tolerance threshold.</param>
            <returns>A <see langword="bool"/> for whether or not the plane has the point.</returns>
        </member>
        <member name="M:Godot.Plane.Intersect3(Godot.Plane,Godot.Plane)">
            <summary>
            Returns the intersection point of the three planes: <paramref name="b"/>, <paramref name="c"/>,
            and this plane. If no intersection is found, <see langword="null"/> is returned.
            </summary>
            <param name="b">One of the three planes to use in the calculation.</param>
            <param name="c">One of the three planes to use in the calculation.</param>
            <returns>The intersection, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:Godot.Plane.IntersectsRay(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the intersection point of a ray consisting of the position <paramref name="from"/>
            and the direction normal <paramref name="dir"/> with this plane.
            If no intersection is found, <see langword="null"/> is returned.
            </summary>
            <param name="from">The start of the ray.</param>
            <param name="dir">The direction of the ray, normalized.</param>
            <returns>The intersection, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:Godot.Plane.IntersectsSegment(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the intersection point of a line segment from
            position <paramref name="begin"/> to position <paramref name="end"/> with this plane.
            If no intersection is found, <see langword="null"/> is returned.
            </summary>
            <param name="begin">The start of the line segment.</param>
            <param name="end">The end of the line segment.</param>
            <returns>The intersection, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:Godot.Plane.IsFinite">
            <summary>
            Returns <see langword="true"/> if this plane is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Plane.IsPointOver(Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if <paramref name="point"/> is located above the plane.
            </summary>
            <param name="point">The point to check.</param>
            <returns>A <see langword="bool"/> for whether or not the point is above the plane.</returns>
        </member>
        <member name="M:Godot.Plane.Normalized">
            <summary>
            Returns the plane scaled to unit length.
            </summary>
            <returns>A normalized version of the plane.</returns>
        </member>
        <member name="M:Godot.Plane.Project(Godot.Vector3)">
            <summary>
            Returns the orthogonal projection of <paramref name="point"/> into the plane.
            </summary>
            <param name="point">The point to project.</param>
            <returns>The projected point.</returns>
        </member>
        <member name="P:Godot.Plane.PlaneYZ">
            <summary>
            A <see cref="T:Godot.Plane"/> that extends in the Y and Z axes (normal vector points +X).
            </summary>
            <value>Equivalent to <c>new Plane(1, 0, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Plane.PlaneXZ">
            <summary>
            A <see cref="T:Godot.Plane"/> that extends in the X and Z axes (normal vector points +Y).
            </summary>
            <value>Equivalent to <c>new Plane(0, 1, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Plane.PlaneXY">
            <summary>
            A <see cref="T:Godot.Plane"/> that extends in the X and Y axes (normal vector points +Z).
            </summary>
            <value>Equivalent to <c>new Plane(0, 0, 1, 0)</c>.</value>
        </member>
        <member name="M:Godot.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Plane"/> from four values.
            <paramref name="a"/>, <paramref name="b"/> and <paramref name="c"/> become the
            components of the resulting plane's <see cref="P:Godot.Plane.Normal"/> vector.
            <paramref name="d"/> becomes the plane's distance from the origin.
            </summary>
            <param name="a">The X component of the plane's normal vector.</param>
            <param name="b">The Y component of the plane's normal vector.</param>
            <param name="c">The Z component of the plane's normal vector.</param>
            <param name="d">The plane's distance from the origin. This value is typically non-negative.</param>
        </member>
        <member name="M:Godot.Plane.#ctor(Godot.Vector3)">
            <summary>
            Constructs a <see cref="T:Godot.Plane"/> from a <paramref name="normal"/> vector.
            The plane will intersect the origin.
            </summary>
            <param name="normal">The normal of the plane, must be a unit vector.</param>
        </member>
        <member name="M:Godot.Plane.#ctor(Godot.Vector3,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Plane"/> from a <paramref name="normal"/> vector and
            the plane's distance to the origin <paramref name="d"/>.
            </summary>
            <param name="normal">The normal of the plane, must be a unit vector.</param>
            <param name="d">The plane's distance from the origin. This value is typically non-negative.</param>
        </member>
        <member name="M:Godot.Plane.#ctor(Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a <see cref="T:Godot.Plane"/> from a <paramref name="normal"/> vector and
            a <paramref name="point"/> on the plane.
            </summary>
            <param name="normal">The normal of the plane, must be a unit vector.</param>
            <param name="point">The point on the plane.</param>
        </member>
        <member name="M:Godot.Plane.#ctor(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a <see cref="T:Godot.Plane"/> from the three points, given in clockwise order.
            </summary>
            <param name="v1">The first point.</param>
            <param name="v2">The second point.</param>
            <param name="v3">The third point.</param>
        </member>
        <member name="M:Godot.Plane.op_UnaryNegation(Godot.Plane)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Plane"/>.
            This is the same as writing <c>new Plane(-p.Normal, -p.D)</c>.
            This operation flips the direction of the normal vector and
            also flips the distance value, resulting in a Plane that is
            in the same place, but facing the opposite direction.
            </summary>
            <param name="plane">The plane to negate/flip.</param>
            <returns>The negated/flipped plane.</returns>
        </member>
        <member name="M:Godot.Plane.op_Equality(Godot.Plane,Godot.Plane)">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Godot.Plane"/>s are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Plane.IsEqualApprox(Godot.Plane)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left rect.</param>
            <param name="right">The right rect.</param>
            <returns>Whether or not the planes are exactly equal.</returns>
        </member>
        <member name="M:Godot.Plane.op_Inequality(Godot.Plane,Godot.Plane)">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Godot.Plane"/>s are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Plane.IsEqualApprox(Godot.Plane)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left rect.</param>
            <param name="right">The right rect.</param>
            <returns>Whether or not the planes are not equal.</returns>
        </member>
        <member name="M:Godot.Plane.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if this plane and <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether or not the plane and the other object are exactly equal.</returns>
        </member>
        <member name="M:Godot.Plane.Equals(Godot.Plane)">
            <summary>
            Returns <see langword="true"/> if this plane and <paramref name="other"/> are equal.
            </summary>
            <param name="other">The other plane to compare.</param>
            <returns>Whether or not the planes are exactly equal.</returns>
        </member>
        <member name="M:Godot.Plane.IsEqualApprox(Godot.Plane)">
            <summary>
            Returns <see langword="true"/> if this plane and <paramref name="other"/> are
            approximately equal, by running <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other plane to compare.</param>
            <returns>Whether or not the planes are approximately equal.</returns>
        </member>
        <member name="M:Godot.Plane.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Plane"/>.
            </summary>
            <returns>A hash code for this plane.</returns>
        </member>
        <member name="M:Godot.Plane.ToString">
            <summary>
            Converts this <see cref="T:Godot.Plane"/> to a string.
            </summary>
            <returns>A string representation of this plane.</returns>
        </member>
        <member name="M:Godot.Plane.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Plane"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this plane.</returns>
        </member>
        <member name="T:Godot.Projection">
            <summary>
            A 4x4 matrix used for 3D projective transformations. It can represent transformations such as
            translation, rotation, scaling, shearing, and perspective division. It consists of four
            <see cref="T:Godot.Vector4"/> columns.
            For purely linear transformations (translation, rotation, and scale), it is recommended to use
            <see cref="T:Godot.Transform3D"/>, as it is more performant and has a lower memory footprint.
            Used internally as <see cref="T:Godot.Camera3D"/>'s projection matrix.
            </summary>
        </member>
        <member name="T:Godot.Projection.Planes">
            <summary>
            Enumerated index values for the planes.
            </summary>
        </member>
        <member name="F:Godot.Projection.Planes.Near">
            <summary>
            The projection's near plane.
            </summary>
        </member>
        <member name="F:Godot.Projection.Planes.Far">
            <summary>
            The projection's far plane.
            </summary>
        </member>
        <member name="F:Godot.Projection.Planes.Left">
            <summary>
            The projection's left plane.
            </summary>
        </member>
        <member name="F:Godot.Projection.Planes.Top">
            <summary>
            The projection's top plane.
            </summary>
        </member>
        <member name="F:Godot.Projection.Planes.Right">
            <summary>
            The projection's right plane.
            </summary>
        </member>
        <member name="F:Godot.Projection.Planes.Bottom">
            <summary>
            The projection's bottom plane.
            </summary>
        </member>
        <member name="F:Godot.Projection.X">
            <summary>
            The projection's X column. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Projection.Y">
            <summary>
            The projection's Y column. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="F:Godot.Projection.Z">
            <summary>
            The projection's Z column. Also accessible by using the index position <c>[2]</c>.
            </summary>
        </member>
        <member name="F:Godot.Projection.W">
            <summary>
            The projection's W column. Also accessible by using the index position <c>[3]</c>.
            </summary>
        </member>
        <member name="P:Godot.Projection.Item(System.Int32)">
            <summary>
            Access whole columns in the form of <see cref="T:Godot.Vector4"/>.
            </summary>
            <param name="column">Which column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="column"/> is not 0, 1, 2 or 3.
            </exception>
        </member>
        <member name="P:Godot.Projection.Item(System.Int32,System.Int32)">
            <summary>
            Access single values.
            </summary>
            <param name="column">Which column vector.</param>
            <param name="row">Which row of the column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="column"/> or <paramref name="row"/> are not 0, 1, 2 or 3.
            </exception>
        </member>
        <member name="M:Godot.Projection.CreateDepthCorrection(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions from a depth range of
            <c>-1</c> to <c>1</c> to one that ranges from <c>0</c> to <c>1</c>, and flips the projected
            positions vertically, according to <paramref name="flipY"/>.
            </summary>
            <param name="flipY">If the projection should be flipped vertically.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateFitAabb(Godot.Aabb)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that scales a given projection to fit around
            a given <see cref="T:Godot.Aabb"/> in projection space.
            </summary>
            <param name="aabb">The Aabb to fit the projection around.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateForHmd(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> for projecting positions onto a head-mounted display with
            the given X:Y aspect ratio, distance between eyes, display width, distance to lens, oversampling factor,
            and depth clipping planes.
            <paramref name="eye"/> creates the projection for the left eye when set to 1,
            or the right eye when set to 2.
            </summary>
            <param name="eye">
            The eye to create the projection for.
            The left eye when set to 1, the right eye when set to 2.
            </param>
            <param name="aspect">The aspect ratio.</param>
            <param name="intraocularDist">The distance between the eyes.</param>
            <param name="displayWidth">The display width.</param>
            <param name="displayToLens">The distance to the lens.</param>
            <param name="oversample">The oversampling factor.</param>
            <param name="zNear">The near clipping distance.</param>
            <param name="zFar">The far clipping distance.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateFrustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions in a frustum with
            the given clipping planes.
            </summary>
            <param name="left">The left clipping distance.</param>
            <param name="right">The right clipping distance.</param>
            <param name="bottom">The bottom clipping distance.</param>
            <param name="top">The top clipping distance.</param>
            <param name="depthNear">The near clipping distance.</param>
            <param name="depthFar">The far clipping distance.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateFrustumAspect(System.Single,System.Single,Godot.Vector2,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions in a frustum with
            the given size, X:Y aspect ratio, offset, and clipping planes.
            <paramref name="flipFov"/> determines whether the projection's field of view is flipped over its diagonal.
            </summary>
            <param name="size">The frustum size.</param>
            <param name="aspect">The aspect ratio.</param>
            <param name="offset">The offset to apply.</param>
            <param name="depthNear">The near clipping distance.</param>
            <param name="depthFar">The far clipping distance.</param>
            <param name="flipFov">If the field of view is flipped over the projection's diagonal.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateLightAtlasRect(Godot.Rect2)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions into the given <see cref="T:Godot.Rect2"/>.
            </summary>
            <param name="rect">The Rect2 to project positions into.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateOrthogonal(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions using an orthogonal projection with
            the given clipping planes.
            </summary>
            <param name="left">The left clipping distance.</param>
            <param name="right">The right clipping distance.</param>
            <param name="bottom">The bottom clipping distance.</param>
            <param name="top">The top clipping distance.</param>
            <param name="zNear">The near clipping distance.</param>
            <param name="zFar">The far clipping distance.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreateOrthogonalAspect(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions using an orthogonal projection with
            the given size, X:Y aspect ratio, and clipping planes.
            <paramref name="flipFov"/> determines whether the projection's field of view is flipped over its diagonal.
            </summary>
            <param name="size">The frustum size.</param>
            <param name="aspect">The aspect ratio.</param>
            <param name="zNear">The near clipping distance.</param>
            <param name="zFar">The far clipping distance.</param>
            <param name="flipFov">If the field of view is flipped over the projection's diagonal.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreatePerspective(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions using a perspective projection with
            the given Y-axis field of view (in degrees), X:Y aspect ratio, and clipping planes.
            <paramref name="flipFov"/> determines whether the projection's field of view is flipped over its diagonal.
            </summary>
            <param name="fovyDegrees">The vertical field of view (in degrees).</param>
            <param name="aspect">The aspect ratio.</param>
            <param name="zNear">The near clipping distance.</param>
            <param name="zFar">The far clipping distance.</param>
            <param name="flipFov">If the field of view is flipped over the projection's diagonal.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.CreatePerspectiveHmd(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Godot.Projection"/> that projects positions using a perspective projection with
            the given Y-axis field of view (in degrees), X:Y aspect ratio, and clipping distances.
            The projection is adjusted for a head-mounted display with the given distance between eyes and distance
            to a point that can be focused on.
            <paramref name="eye"/> creates the projection for the left eye when set to 1,
            or the right eye when set to 2.
            <paramref name="flipFov"/> determines whether the projection's field of view is flipped over its diagonal.
            </summary>
            <param name="fovyDegrees">The vertical field of view (in degrees).</param>
            <param name="aspect">The aspect ratio.</param>
            <param name="zNear">The near clipping distance.</param>
            <param name="zFar">The far clipping distance.</param>
            <param name="flipFov">If the field of view is flipped over the projection's diagonal.</param>
            <param name="eye">
            The eye to create the projection for.
            The left eye when set to 1, the right eye when set to 2.
            </param>
            <param name="intraocularDist">The distance between the eyes.</param>
            <param name="convergenceDist">The distance to a point of convergence that can be focused on.</param>
            <returns>The created projection.</returns>
        </member>
        <member name="M:Godot.Projection.Determinant">
            <summary>
            Returns a scalar value that is the signed factor by which areas are scaled by this matrix.
            If the sign is negative, the matrix flips the orientation of the area.
            The determinant can be used to calculate the invertibility of a matrix or solve linear systems
            of equations involving the matrix, among other applications.
            </summary>
            <returns>The determinant calculated from this projection.</returns>
        </member>
        <member name="M:Godot.Projection.GetAspect">
            <summary>
            Returns the X:Y aspect ratio of this <see cref="T:Godot.Projection"/>'s viewport.
            </summary>
            <returns>The aspect ratio from this projection's viewport.</returns>
        </member>
        <member name="M:Godot.Projection.GetFov">
            <summary>
            Returns the horizontal field of view of the projection (in degrees).
            </summary>
            <returns>The horizontal field of view of this projection.</returns>
        </member>
        <member name="M:Godot.Projection.GetFovy(System.Single,System.Single)">
            <summary>
            Returns the vertical field of view of the projection (in degrees) associated with
            the given horizontal field of view (in degrees) and aspect ratio.
            </summary>
            <param name="fovx">The horizontal field of view (in degrees).</param>
            <param name="aspect">The aspect ratio.</param>
            <returns>The vertical field of view of this projection.</returns>
        </member>
        <member name="M:Godot.Projection.GetLodMultiplier">
            <summary>
            Returns the factor by which the visible level of detail is scaled by this <see cref="T:Godot.Projection"/>.
            </summary>
            <returns>The level of detail factor for this projection.</returns>
        </member>
        <member name="M:Godot.Projection.GetPixelsPerMeter(System.Int32)">
            <summary>
            Returns the number of pixels with the given pixel width displayed per meter, after
            this <see cref="T:Godot.Projection"/> is applied.
            </summary>
            <param name="forPixelWidth">The width for each pixel (in meters).</param>
            <returns>The number of pixels per meter.</returns>
        </member>
        <member name="M:Godot.Projection.GetProjectionPlane(Godot.Projection.Planes)">
            <summary>
            Returns the clipping plane of this <see cref="T:Godot.Projection"/> whose index is given
            by <paramref name="plane"/>.
            <paramref name="plane"/> should be equal to one of <see cref="F:Godot.Projection.Planes.Near"/>,
            <see cref="F:Godot.Projection.Planes.Far"/>, <see cref="F:Godot.Projection.Planes.Left"/>, <see cref="F:Godot.Projection.Planes.Top"/>,
            <see cref="F:Godot.Projection.Planes.Right"/>, or <see cref="F:Godot.Projection.Planes.Bottom"/>.
            </summary>
            <param name="plane">The kind of clipping plane to get from the projection.</param>
            <returns>The clipping plane of this projection.</returns>
        </member>
        <member name="M:Godot.Projection.GetFarPlaneHalfExtents">
            <summary>
            Returns the dimensions of the far clipping plane of the projection, divided by two.
            </summary>
            <returns>The half extents for this projection's far plane.</returns>
        </member>
        <member name="M:Godot.Projection.GetViewportHalfExtents">
            <summary>
            Returns the dimensions of the viewport plane that this <see cref="T:Godot.Projection"/>
            projects positions onto, divided by two.
            </summary>
            <returns>The half extents for this projection's viewport plane.</returns>
        </member>
        <member name="M:Godot.Projection.GetZFar">
            <summary>
            Returns the distance for this <see cref="T:Godot.Projection"/> beyond which positions are clipped.
            </summary>
            <returns>The distance beyond which positions are clipped.</returns>
        </member>
        <member name="M:Godot.Projection.GetZNear">
            <summary>
            Returns the distance for this <see cref="T:Godot.Projection"/> before which positions are clipped.
            </summary>
            <returns>The distance before which positions are clipped.</returns>
        </member>
        <member name="M:Godot.Projection.FlippedY">
            <summary>
            Returns a copy of this <see cref="T:Godot.Projection"/> with the signs of the values of the Y column flipped.
            </summary>
            <returns>The flipped projection.</returns>
        </member>
        <member name="M:Godot.Projection.PerspectiveZNearAdjusted(System.Single)">
            <summary>
            Returns a <see cref="T:Godot.Projection"/> with the near clipping distance adjusted to be
            <paramref name="newZNear"/>.
            Note: The original <see cref="T:Godot.Projection"/> must be a perspective projection.
            </summary>
            <param name="newZNear">The near clipping distance to adjust the projection to.</param>
            <returns>The adjusted projection.</returns>
        </member>
        <member name="M:Godot.Projection.JitterOffseted(Godot.Vector2)">
            <summary>
            Returns a <see cref="T:Godot.Projection"/> with the X and Y values from the given <see cref="T:Godot.Vector2"/>
            added to the first and second values of the final column respectively.
            </summary>
            <param name="offset">The offset to apply to the projection.</param>
            <returns>The offsetted projection.</returns>
        </member>
        <member name="M:Godot.Projection.Inverse">
            <summary>
            Returns a <see cref="T:Godot.Projection"/> that performs the inverse of this <see cref="T:Godot.Projection"/>'s
            projective transformation.
            </summary>
            <returns>The inverted projection.</returns>
        </member>
        <member name="M:Godot.Projection.IsOrthogonal">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Godot.Projection"/> performs an orthogonal projection.
            </summary>
            <returns>If the projection performs an orthogonal projection.</returns>
        </member>
        <member name="P:Godot.Projection.Zero">
            <summary>
            Zero projection, a projection with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Projection(Vector4.Zero, Vector4.Zero, Vector4.Zero, Vector4.Zero)</c>.</value>
        </member>
        <member name="P:Godot.Projection.Identity">
            <summary>
            The identity projection, with no distortion applied.
            This is used as a replacement for <c>Projection()</c> in GDScript.
            Do not use <c>new Projection()</c> with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to <c>new Projection(new Vector4(1, 0, 0, 0), new Vector4(0, 1, 0, 0), new Vector4(0, 0, 1, 0), new Vector4(0, 0, 0, 1))</c>.</value>
        </member>
        <member name="M:Godot.Projection.#ctor(Godot.Vector4,Godot.Vector4,Godot.Vector4,Godot.Vector4)">
            <summary>
            Constructs a projection from 4 vectors (matrix columns).
            </summary>
            <param name="x">The X column, or column index 0.</param>
            <param name="y">The Y column, or column index 1.</param>
            <param name="z">The Z column, or column index 2.</param>
            <param name="w">The W column, or column index 3.</param>
        </member>
        <member name="M:Godot.Projection.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a projection from 16 scalars.
            </summary>
            <param name="xx">The X column vector's X component, accessed via <c>p.X.X</c> or <c>[0][0]</c>.</param>
            <param name="xy">The X column vector's Y component, accessed via <c>p.X.Y</c> or <c>[0][1]</c>.</param>
            <param name="xz">The X column vector's Z component, accessed via <c>p.X.Z</c> or <c>[0][2]</c>.</param>
            <param name="xw">The X column vector's W component, accessed via <c>p.X.W</c> or <c>[0][3]</c>.</param>
            <param name="yx">The Y column vector's X component, accessed via <c>p.Y.X</c> or <c>[1][0]</c>.</param>
            <param name="yy">The Y column vector's Y component, accessed via <c>p.Y.Y</c> or <c>[1][1]</c>.</param>
            <param name="yz">The Y column vector's Z component, accessed via <c>p.Y.Z</c> or <c>[1][2]</c>.</param>
            <param name="yw">The Y column vector's W component, accessed via <c>p.Y.W</c> or <c>[1][3]</c>.</param>
            <param name="zx">The Z column vector's X component, accessed via <c>p.Z.X</c> or <c>[2][0]</c>.</param>
            <param name="zy">The Z column vector's Y component, accessed via <c>p.Z.Y</c> or <c>[2][1]</c>.</param>
            <param name="zz">The Z column vector's Z component, accessed via <c>p.Z.Z</c> or <c>[2][2]</c>.</param>
            <param name="zw">The Z column vector's W component, accessed via <c>p.Z.W</c> or <c>[2][3]</c>.</param>
            <param name="wx">The W column vector's X component, accessed via <c>p.W.X</c> or <c>[3][0]</c>.</param>
            <param name="wy">The W column vector's Y component, accessed via <c>p.W.Y</c> or <c>[3][1]</c>.</param>
            <param name="wz">The W column vector's Z component, accessed via <c>p.W.Z</c> or <c>[3][2]</c>.</param>
            <param name="ww">The W column vector's W component, accessed via <c>p.W.W</c> or <c>[3][3]</c>.</param>
        </member>
        <member name="M:Godot.Projection.#ctor(Godot.Transform3D)">
            <summary>
            Constructs a new <see cref="T:Godot.Projection"/> from a <see cref="T:Godot.Transform3D"/>.
            </summary>
            <param name="transform">The <see cref="T:Godot.Transform3D"/>.</param>
        </member>
        <member name="M:Godot.Projection.op_Multiply(Godot.Projection,Godot.Projection)">
            <summary>
            Composes these two projections by multiplying them
            together. This has the effect of applying the right
            and then the left projection.
            </summary>
            <param name="left">The parent transform.</param>
            <param name="right">The child transform.</param>
            <returns>The composed projection.</returns>
        </member>
        <member name="M:Godot.Projection.op_Multiply(Godot.Projection,Godot.Vector4)">
            <summary>
            Returns a Vector4 transformed (multiplied) by the projection.
            For transforming by inverse of a projection <c>projection.Inverse() * vector</c>
            can be used instead. See <see cref="M:Godot.Projection.Inverse"/>.
            </summary>
            <param name="projection">The projection to apply.</param>
            <param name="vector">A Vector4 to transform.</param>
            <returns>The transformed Vector4.</returns>
        </member>
        <member name="M:Godot.Projection.op_Multiply(Godot.Vector4,Godot.Projection)">
            <summary>
            Returns a Vector4 transformed (multiplied) by the inverse projection.
            </summary>
            <param name="projection">The projection to apply.</param>
            <param name="vector">A Vector4 to transform.</param>
            <returns>The inversely transformed Vector4.</returns>
        </member>
        <member name="M:Godot.Projection.op_Multiply(Godot.Projection,Godot.Vector3)">
            <summary>
            Returns a Vector3 transformed (multiplied) by the projection.
            </summary>
            <param name="projection">The projection to apply.</param>
            <param name="vector">A Vector3 to transform.</param>
            <returns>The transformed Vector3.</returns>
        </member>
        <member name="M:Godot.Projection.op_Equality(Godot.Projection,Godot.Projection)">
            <summary>
            Returns <see langword="true"/> if the projections are exactly equal.
            </summary>
            <param name="left">The left projection.</param>
            <param name="right">The right projection.</param>
            <returns>Whether or not the projections are exactly equal.</returns>
        </member>
        <member name="M:Godot.Projection.op_Inequality(Godot.Projection,Godot.Projection)">
            <summary>
            Returns <see langword="true"/> if the projections are not exactly equal.
            </summary>
            <param name="left">The left projection.</param>
            <param name="right">The right projection.</param>
            <returns>Whether or not the projections are not exactly equal.</returns>
        </member>
        <member name="M:Godot.Projection.op_Explicit(Godot.Projection)~Godot.Transform3D">
            <summary>
            Constructs a new <see cref="T:Godot.Transform3D"/> from the <see cref="T:Godot.Projection"/>.
            </summary>
            <param name="projection">The <see cref="T:Godot.Projection"/>.</param>
        </member>
        <member name="M:Godot.Projection.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the projection is exactly equal
            to the given object (<paramref name="obj"/>).
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Projection.Equals(Godot.Projection)">
            <summary>
            Returns <see langword="true"/> if the projections are exactly equal.
            </summary>
            <param name="other">The other projection.</param>
            <returns>Whether or not the projections are exactly equal.</returns>
        </member>
        <member name="M:Godot.Projection.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Projection"/>.
            </summary>
            <returns>A hash code for this projection.</returns>
        </member>
        <member name="M:Godot.Projection.ToString">
            <summary>
            Converts this <see cref="T:Godot.Projection"/> to a string.
            </summary>
            <returns>A string representation of this projection.</returns>
        </member>
        <member name="M:Godot.Projection.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Projection"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this projection.</returns>
        </member>
        <member name="T:Godot.Quaternion">
             <summary>
             A unit quaternion used for representing 3D rotations.
             Quaternions need to be normalized to be used for rotation.
            
             It is similar to <see cref="T:Godot.Basis"/>, which implements matrix
             representation of rotations, and can be parametrized using both
             an axis-angle pair or Euler angles. Basis stores rotation, scale,
             and shearing, while Quaternion only stores rotation.
            
             Due to its compactness and the way it is stored in memory, certain
             operations (obtaining axis-angle and performing SLERP, in particular)
             are more efficient and robust against floating-point errors.
             </summary>
        </member>
        <member name="F:Godot.Quaternion.X">
            <summary>
            X component of the quaternion (imaginary <c>i</c> axis part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="F:Godot.Quaternion.Y">
            <summary>
            Y component of the quaternion (imaginary <c>j</c> axis part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="F:Godot.Quaternion.Z">
            <summary>
            Z component of the quaternion (imaginary <c>k</c> axis part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="F:Godot.Quaternion.W">
            <summary>
            W component of the quaternion (real part).
            Quaternion components should usually not be manipulated directly.
            </summary>
        </member>
        <member name="P:Godot.Quaternion.Item(System.Int32)">
            <summary>
            Access quaternion components using their index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0, 1, 2 or 3.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Quaternion.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Quaternion.Y"/>,
            <c>[2]</c> is equivalent to <see cref="F:Godot.Quaternion.Z"/>,
            <c>[3]</c> is equivalent to <see cref="F:Godot.Quaternion.W"/>.
            </value>
        </member>
        <member name="M:Godot.Quaternion.AngleTo(Godot.Quaternion)">
             <summary>
             Returns the angle between this quaternion and <paramref name="to"/>.
             This is the magnitude of the angle you would need to rotate
             by to get from one to the other.
            
             Note: This method has an abnormally high amount
             of floating-point error, so methods such as
             <see cref="M:Godot.Mathf.IsZeroApprox(System.Single)"/> will not work reliably.
             </summary>
             <param name="to">The other quaternion.</param>
             <returns>The angle between the quaternions.</returns>
        </member>
        <member name="M:Godot.Quaternion.SphericalCubicInterpolate(Godot.Quaternion,Godot.Quaternion,Godot.Quaternion,System.Single)">
            <summary>
            Performs a spherical cubic interpolation between quaternions <paramref name="preA"/>, this quaternion,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            </summary>
            <param name="b">The destination quaternion.</param>
            <param name="preA">A quaternion before this quaternion.</param>
            <param name="postB">A quaternion after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.SphericalCubicInterpolateInTime(Godot.Quaternion,Godot.Quaternion,Godot.Quaternion,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a spherical cubic interpolation between quaternions <paramref name="preA"/>, this quaternion,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            It can perform smoother interpolation than <see cref="M:Godot.Quaternion.SphericalCubicInterpolate(Godot.Quaternion,Godot.Quaternion,Godot.Quaternion,System.Single)"/>
            by the time values.
            </summary>
            <param name="b">The destination quaternion.</param>
            <param name="preA">A quaternion before this quaternion.</param>
            <param name="postB">A quaternion after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="bT"></param>
            <param name="preAT"></param>
            <param name="postBT"></param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.Dot(Godot.Quaternion)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
            <param name="b">The other quaternion.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Godot.Quaternion.Exp">
            <summary>
            Returns the exponential of this quaternion. The rotation axis of the result is
            the normalized rotation axis of this quaternion, the angle of the result is the
            length of the vector part of this quaternion.
            </summary>
            <returns>The exponential of the quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.GetAngle">
            <summary>
            Returns the angle of the rotation represented by this quaternion.
            <b>Note:</b> The quaternion must be normalized.
            </summary>
            <returns>The angle of the quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.GetAxis">
            <summary>
            Returns the rotation axis of the rotation represented by this quaternion.
            </summary>
            <returns>The axis of the quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.GetEuler(Godot.EulerOrder)">
            <summary>
            Returns Euler angles (in the YXZ convention: when decomposing,
            first Z, then X, and Y last) corresponding to the rotation
            represented by the unit quaternion. Returned vector contains
            the rotation angles in the format (X angle, Y angle, Z angle).
            </summary>
            <returns>The Euler angle representation of this quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.Inverse">
            <summary>
            Returns the inverse of the quaternion.
            </summary>
            <returns>The inverse quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.IsFinite">
            <summary>
            Returns <see langword="true"/> if this quaternion is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Quaternion.IsNormalized">
            <summary>
            Returns whether the quaternion is normalized or not.
            </summary>
            <returns>A <see langword="bool"/> for whether the quaternion is normalized or not.</returns>
        </member>
        <member name="M:Godot.Quaternion.Log">
            <summary>
            Returns the logarithm of this quaternion. Multiples this quaternion's rotation axis
            by its rotation angle, and stores the result in the returned quaternion's vector
            part (<see cref="F:Godot.Quaternion.X"/>, <see cref="F:Godot.Quaternion.Y"/>, and <see cref="F:Godot.Quaternion.Z"/>). The returned
            quaternion's real part (<see cref="F:Godot.Quaternion.W"/>) is always <c>0.0</c>.
            </summary>
            <returns>The logarithm of the quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.Length">
            <summary>
            Returns the length (magnitude) of the quaternion.
            </summary>
            <seealso cref="M:Godot.Quaternion.LengthSquared"/>
            <value>Equivalent to <c>Mathf.Sqrt(LengthSquared)</c>.</value>
        </member>
        <member name="M:Godot.Quaternion.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of the quaternion.
            This method runs faster than <see cref="M:Godot.Quaternion.Length"/>, so prefer it if
            you need to compare quaternions or need the squared length for some formula.
            </summary>
            <value>Equivalent to <c>Dot(this)</c>.</value>
        </member>
        <member name="M:Godot.Quaternion.Normalized">
            <summary>
            Returns a copy of the quaternion, normalized to unit length.
            </summary>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.Slerp(Godot.Quaternion,System.Single)">
             <summary>
             Returns the result of the spherical linear interpolation between
             this quaternion and <paramref name="to"/> by amount <paramref name="weight"/>.
            
             Note: Both quaternions must be normalized.
             </summary>
             <param name="to">The destination quaternion for interpolation. Must be normalized.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting quaternion of the interpolation.</returns>
        </member>
        <member name="M:Godot.Quaternion.Slerpni(Godot.Quaternion,System.Single)">
            <summary>
            Returns the result of the spherical linear interpolation between
            this quaternion and <paramref name="to"/> by amount <paramref name="weight"/>, but without
            checking if the rotation path is not bigger than 90 degrees.
            </summary>
            <param name="to">The destination quaternion for interpolation. Must be normalized.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting quaternion of the interpolation.</returns>
        </member>
        <member name="P:Godot.Quaternion.Identity">
            <summary>
            The identity quaternion, representing no rotation.
            Equivalent to an identity <see cref="T:Godot.Basis"/> matrix. If a vector is transformed by
            an identity quaternion, it will not change.
            </summary>
            <value>Equivalent to <c>new Quaternion(0, 0, 0, 1)</c>.</value>
        </member>
        <member name="M:Godot.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Quaternion"/> defined by the given values.
            </summary>
            <param name="x">X component of the quaternion (imaginary <c>i</c> axis part).</param>
            <param name="y">Y component of the quaternion (imaginary <c>j</c> axis part).</param>
            <param name="z">Z component of the quaternion (imaginary <c>k</c> axis part).</param>
            <param name="w">W component of the quaternion (real part).</param>
        </member>
        <member name="M:Godot.Quaternion.#ctor(Godot.Basis)">
            <summary>
            Constructs a <see cref="T:Godot.Quaternion"/> from the given <see cref="T:Godot.Basis"/>.
            </summary>
            <param name="basis">The <see cref="T:Godot.Basis"/> to construct from.</param>
        </member>
        <member name="M:Godot.Quaternion.#ctor(Godot.Vector3,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Quaternion"/> that will rotate around the given axis
            by the specified angle. The axis must be a normalized vector.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate, in radians.</param>
        </member>
        <member name="M:Godot.Quaternion.#ctor(Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a <see cref="T:Godot.Quaternion"/> representing the shortest arc between
            <paramref name="arcFrom"/> and <paramref name="arcTo"/>. These can be imagined
            as two points intersecting a sphere's surface, with a radius of <c>1.0</c>.
            </summary>
            <param name="arcFrom">The start point of the arc.</param>
            <param name="arcTo">The end point of the arc.</param>
        </member>
        <member name="M:Godot.Quaternion.FromEuler(Godot.Vector3)">
            <summary>
            Constructs a <see cref="T:Godot.Quaternion"/> that will perform a rotation specified by
            Euler angles (in the YXZ convention: when decomposing, first Z, then X, and Y last),
            given in the vector format as (X angle, Y angle, Z angle).
            </summary>
            <param name="eulerYXZ">Euler angles that the quaternion will be rotated by.</param>
        </member>
        <member name="M:Godot.Quaternion.op_Multiply(Godot.Quaternion,Godot.Quaternion)">
            <summary>
            Composes these two quaternions by multiplying them together.
            This has the effect of rotating the second quaternion
            (the child) by the first quaternion (the parent).
            </summary>
            <param name="left">The parent quaternion.</param>
            <param name="right">The child quaternion.</param>
            <returns>The composed quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Multiply(Godot.Quaternion,Godot.Vector3)">
            <summary>
            Returns a Vector3 rotated (multiplied) by the quaternion.
            </summary>
            <param name="quaternion">The quaternion to rotate by.</param>
            <param name="vector">A Vector3 to transform.</param>
            <returns>The rotated Vector3.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Multiply(Godot.Vector3,Godot.Quaternion)">
            <summary>
            Returns a Vector3 rotated (multiplied) by the inverse quaternion.
            <c>vector * quaternion</c> is equivalent to <c>quaternion.Inverse() * vector</c>.
            See <see cref="M:Godot.Quaternion.Inverse"/>.
            </summary>
            <param name="vector">A Vector3 to inversely rotate.</param>
            <param name="quaternion">The quaternion to rotate by.</param>
            <returns>The inversely rotated Vector3.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Addition(Godot.Quaternion,Godot.Quaternion)">
            <summary>
            Adds each component of the left <see cref="T:Godot.Quaternion"/>
            to the right <see cref="T:Godot.Quaternion"/>. This operation is not
            meaningful on its own, but it can be used as a part of a
            larger expression, such as approximating an intermediate
            rotation between two nearby rotations.
            </summary>
            <param name="left">The left quaternion to add.</param>
            <param name="right">The right quaternion to add.</param>
            <returns>The added quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Subtraction(Godot.Quaternion,Godot.Quaternion)">
            <summary>
            Subtracts each component of the left <see cref="T:Godot.Quaternion"/>
            by the right <see cref="T:Godot.Quaternion"/>. This operation is not
            meaningful on its own, but it can be used as a part of a
            larger expression.
            </summary>
            <param name="left">The left quaternion to subtract.</param>
            <param name="right">The right quaternion to subtract.</param>
            <returns>The subtracted quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_UnaryNegation(Godot.Quaternion)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Quaternion"/>.
            This is the same as writing
            <c>new Quaternion(-q.X, -q.Y, -q.Z, -q.W)</c>. This operation
            results in a quaternion that represents the same rotation.
            </summary>
            <param name="quat">The quaternion to negate.</param>
            <returns>The negated quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Multiply(Godot.Quaternion,System.Single)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Quaternion"/>
            by the given <see cref="T:System.Single"/>. This operation is not
            meaningful on its own, but it can be used as a part of a
            larger expression.
            </summary>
            <param name="left">The quaternion to multiply.</param>
            <param name="right">The value to multiply by.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Multiply(System.Single,Godot.Quaternion)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Quaternion"/>
            by the given <see cref="T:System.Single"/>. This operation is not
            meaningful on its own, but it can be used as a part of a
            larger expression.
            </summary>
            <param name="left">The value to multiply by.</param>
            <param name="right">The quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Division(Godot.Quaternion,System.Single)">
            <summary>
            Divides each component of the <see cref="T:Godot.Quaternion"/>
            by the given <see cref="T:System.Single"/>. This operation is not
            meaningful on its own, but it can be used as a part of a
            larger expression.
            </summary>
            <param name="left">The quaternion to divide.</param>
            <param name="right">The value to divide by.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Equality(Godot.Quaternion,Godot.Quaternion)">
            <summary>
            Returns <see langword="true"/> if the quaternions are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Quaternion.IsEqualApprox(Godot.Quaternion)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left quaternion.</param>
            <param name="right">The right quaternion.</param>
            <returns>Whether or not the quaternions are exactly equal.</returns>
        </member>
        <member name="M:Godot.Quaternion.op_Inequality(Godot.Quaternion,Godot.Quaternion)">
            <summary>
            Returns <see langword="true"/> if the quaternions are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Quaternion.IsEqualApprox(Godot.Quaternion)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left quaternion.</param>
            <param name="right">The right quaternion.</param>
            <returns>Whether or not the quaternions are not equal.</returns>
        </member>
        <member name="M:Godot.Quaternion.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if this quaternion and <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether or not the quaternion and the other object are exactly equal.</returns>
        </member>
        <member name="M:Godot.Quaternion.Equals(Godot.Quaternion)">
            <summary>
            Returns <see langword="true"/> if this quaternion and <paramref name="other"/> are equal.
            </summary>
            <param name="other">The other quaternion to compare.</param>
            <returns>Whether or not the quaternions are exactly equal.</returns>
        </member>
        <member name="M:Godot.Quaternion.IsEqualApprox(Godot.Quaternion)">
            <summary>
            Returns <see langword="true"/> if this quaternion and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other quaternion to compare.</param>
            <returns>Whether or not the quaternions are approximately equal.</returns>
        </member>
        <member name="M:Godot.Quaternion.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Quaternion"/>.
            </summary>
            <returns>A hash code for this quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.ToString">
            <summary>
            Converts this <see cref="T:Godot.Quaternion"/> to a string.
            </summary>
            <returns>A string representation of this quaternion.</returns>
        </member>
        <member name="M:Godot.Quaternion.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Quaternion"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this quaternion.</returns>
        </member>
        <member name="T:Godot.Rect2">
            <summary>
            2D axis-aligned bounding box. Rect2 consists of a position, a size, and
            several utility functions. It is typically used for fast overlap tests.
            </summary>
        </member>
        <member name="P:Godot.Rect2.Position">
            <summary>
            Beginning corner. Typically has values lower than <see cref="P:Godot.Rect2.End"/>.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2.Size">
            <summary>
            Size from <see cref="P:Godot.Rect2.Position"/> to <see cref="P:Godot.Rect2.End"/>. Typically all components are positive.
            If the size is negative, you can use <see cref="M:Godot.Rect2.Abs"/> to fix it.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2.End">
            <summary>
            Ending corner. This is calculated as <see cref="P:Godot.Rect2.Position"/> plus <see cref="P:Godot.Rect2.Size"/>.
            Setting this value will change the size.
            </summary>
            <value>
            Getting is equivalent to <paramref name="value"/> = <see cref="P:Godot.Rect2.Position"/> + <see cref="P:Godot.Rect2.Size"/>,
            setting is equivalent to <see cref="P:Godot.Rect2.Size"/> = <paramref name="value"/> - <see cref="P:Godot.Rect2.Position"/>
            </value>
        </member>
        <member name="P:Godot.Rect2.Area">
            <summary>
            The area of this <see cref="T:Godot.Rect2"/>.
            See also <see cref="M:Godot.Rect2.HasArea"/>.
            </summary>
        </member>
        <member name="M:Godot.Rect2.Abs">
            <summary>
            Returns a <see cref="T:Godot.Rect2"/> with equivalent position and size, modified so that
            the top-left corner is the origin and width and height are positive.
            </summary>
            <returns>The modified <see cref="T:Godot.Rect2"/>.</returns>
        </member>
        <member name="M:Godot.Rect2.Intersection(Godot.Rect2)">
            <summary>
            Returns the intersection of this <see cref="T:Godot.Rect2"/> and <paramref name="b"/>.
            If the rectangles do not intersect, an empty <see cref="T:Godot.Rect2"/> is returned.
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2"/>.</param>
            <returns>
            The intersection of this <see cref="T:Godot.Rect2"/> and <paramref name="b"/>,
            or an empty <see cref="T:Godot.Rect2"/> if they do not intersect.
            </returns>
        </member>
        <member name="M:Godot.Rect2.IsFinite">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Godot.Rect2"/> is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Rect2.Encloses(Godot.Rect2)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Godot.Rect2"/> completely encloses another one.
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2"/> that may be enclosed.</param>
            <returns>
            A <see langword="bool"/> for whether or not this <see cref="T:Godot.Rect2"/> encloses <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:Godot.Rect2.Expand(Godot.Vector2)">
            <summary>
            Returns this <see cref="T:Godot.Rect2"/> expanded to include a given point.
            </summary>
            <param name="to">The point to include.</param>
            <returns>The expanded <see cref="T:Godot.Rect2"/>.</returns>
        </member>
        <member name="M:Godot.Rect2.GetCenter">
            <summary>
            Returns the center of the <see cref="T:Godot.Rect2"/>, which is equal
            to <see cref="P:Godot.Rect2.Position"/> + (<see cref="P:Godot.Rect2.Size"/> / 2).
            </summary>
            <returns>The center.</returns>
        </member>
        <member name="M:Godot.Rect2.GetSupport(Godot.Vector2)">
            <summary>
            Returns the support point in a given direction.
            This is useful for collision detection algorithms.
            </summary>
            <param name="direction">The direction to find support for.</param>
            <returns>A vector representing the support.</returns>
        </member>
        <member name="M:Godot.Rect2.Grow(System.Single)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Rect2"/> grown by the specified amount
            on all sides.
            </summary>
            <seealso cref="M:Godot.Rect2.GrowIndividual(System.Single,System.Single,System.Single,System.Single)"/>
            <seealso cref="M:Godot.Rect2.GrowSide(Godot.Side,System.Single)"/>
            <param name="by">The amount to grow by.</param>
            <returns>The grown <see cref="T:Godot.Rect2"/>.</returns>
        </member>
        <member name="M:Godot.Rect2.GrowIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Rect2"/> grown by the specified amount
            on each side individually.
            </summary>
            <seealso cref="M:Godot.Rect2.Grow(System.Single)"/>
            <seealso cref="M:Godot.Rect2.GrowSide(Godot.Side,System.Single)"/>
            <param name="left">The amount to grow by on the left side.</param>
            <param name="top">The amount to grow by on the top side.</param>
            <param name="right">The amount to grow by on the right side.</param>
            <param name="bottom">The amount to grow by on the bottom side.</param>
            <returns>The grown <see cref="T:Godot.Rect2"/>.</returns>
        </member>
        <member name="M:Godot.Rect2.GrowSide(Godot.Side,System.Single)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Rect2"/> grown by the specified amount
            on the specified <see cref="T:Godot.Side"/>.
            </summary>
            <seealso cref="M:Godot.Rect2.Grow(System.Single)"/>
            <seealso cref="M:Godot.Rect2.GrowIndividual(System.Single,System.Single,System.Single,System.Single)"/>
            <param name="side">The side to grow.</param>
            <param name="by">The amount to grow by.</param>
            <returns>The grown <see cref="T:Godot.Rect2"/>.</returns>
        </member>
        <member name="M:Godot.Rect2.HasArea">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rect2"/> has
            area, and <see langword="false"/> if the <see cref="T:Godot.Rect2"/>
            is linear, empty, or has a negative <see cref="P:Godot.Rect2.Size"/>.
            See also <see cref="P:Godot.Rect2.Area"/>.
            </summary>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Rect2"/> has area.
            </returns>
        </member>
        <member name="M:Godot.Rect2.HasPoint(Godot.Vector2)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rect2"/> contains a point,
            or <see langword="false"/> otherwise.
            </summary>
            <param name="point">The point to check.</param>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Rect2"/> contains <paramref name="point"/>.
            </returns>
        </member>
        <member name="M:Godot.Rect2.Intersects(Godot.Rect2,System.Boolean)">
             <summary>
             Returns <see langword="true"/> if the <see cref="T:Godot.Rect2"/> overlaps with <paramref name="b"/>
             (i.e. they have at least one point in common).
            
             If <paramref name="includeBorders"/> is <see langword="true"/>,
             they will also be considered overlapping if their borders touch,
             even without intersection.
             </summary>
             <param name="b">The other <see cref="T:Godot.Rect2"/> to check for intersections with.</param>
             <param name="includeBorders">Whether or not to consider borders.</param>
             <returns>A <see langword="bool"/> for whether or not they are intersecting.</returns>
        </member>
        <member name="M:Godot.Rect2.Merge(Godot.Rect2)">
            <summary>
            Returns a larger <see cref="T:Godot.Rect2"/> that contains this <see cref="T:Godot.Rect2"/> and <paramref name="b"/>.
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2"/>.</param>
            <returns>The merged <see cref="T:Godot.Rect2"/>.</returns>
        </member>
        <member name="M:Godot.Rect2.#ctor(Godot.Vector2,Godot.Vector2)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2"/> from a position and size.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2.#ctor(Godot.Vector2,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2"/> from a position, width, and height.
            </summary>
            <param name="position">The position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2.#ctor(System.Single,System.Single,Godot.Vector2)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2"/> from x, y, and size.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2"/> from x, y, width, and height.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2.op_Equality(Godot.Rect2,Godot.Rect2)">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Godot.Rect2"/>s are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Rect2.IsEqualApprox(Godot.Rect2)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left rect.</param>
            <param name="right">The right rect.</param>
            <returns>Whether or not the rects are exactly equal.</returns>
        </member>
        <member name="M:Godot.Rect2.op_Inequality(Godot.Rect2,Godot.Rect2)">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Godot.Rect2"/>s are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Rect2.IsEqualApprox(Godot.Rect2)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left rect.</param>
            <param name="right">The right rect.</param>
            <returns>Whether or not the rects are not equal.</returns>
        </member>
        <member name="M:Godot.Rect2.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if this rect and <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether or not the rect and the other object are exactly equal.</returns>
        </member>
        <member name="M:Godot.Rect2.Equals(Godot.Rect2)">
            <summary>
            Returns <see langword="true"/> if this rect and <paramref name="other"/> are equal.
            </summary>
            <param name="other">The other rect to compare.</param>
            <returns>Whether or not the rects are exactly equal.</returns>
        </member>
        <member name="M:Godot.Rect2.IsEqualApprox(Godot.Rect2)">
            <summary>
            Returns <see langword="true"/> if this rect and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> on each component.
            </summary>
            <param name="other">The other rect to compare.</param>
            <returns>Whether or not the rects are approximately equal.</returns>
        </member>
        <member name="M:Godot.Rect2.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Rect2"/>.
            </summary>
            <returns>A hash code for this rect.</returns>
        </member>
        <member name="M:Godot.Rect2.ToString">
            <summary>
            Converts this <see cref="T:Godot.Rect2"/> to a string.
            </summary>
            <returns>A string representation of this rect.</returns>
        </member>
        <member name="M:Godot.Rect2.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Rect2"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this rect.</returns>
        </member>
        <member name="T:Godot.Rect2I">
            <summary>
            2D axis-aligned bounding box using integers. Rect2I consists of a position, a size, and
            several utility functions. It is typically used for fast overlap tests.
            </summary>
        </member>
        <member name="P:Godot.Rect2I.Position">
            <summary>
            Beginning corner. Typically has values lower than <see cref="P:Godot.Rect2I.End"/>.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2I.Size">
            <summary>
            Size from <see cref="P:Godot.Rect2I.Position"/> to <see cref="P:Godot.Rect2I.End"/>. Typically all components are positive.
            If the size is negative, you can use <see cref="M:Godot.Rect2I.Abs"/> to fix it.
            </summary>
            <value>Directly uses a private field.</value>
        </member>
        <member name="P:Godot.Rect2I.End">
            <summary>
            Ending corner. This is calculated as <see cref="P:Godot.Rect2I.Position"/> plus <see cref="P:Godot.Rect2I.Size"/>.
            Setting this value will change the size.
            </summary>
            <value>
            Getting is equivalent to <paramref name="value"/> = <see cref="P:Godot.Rect2I.Position"/> + <see cref="P:Godot.Rect2I.Size"/>,
            setting is equivalent to <see cref="P:Godot.Rect2I.Size"/> = <paramref name="value"/> - <see cref="P:Godot.Rect2I.Position"/>
            </value>
        </member>
        <member name="P:Godot.Rect2I.Area">
            <summary>
            The area of this <see cref="T:Godot.Rect2I"/>.
            See also <see cref="M:Godot.Rect2I.HasArea"/>.
            </summary>
        </member>
        <member name="M:Godot.Rect2I.Abs">
            <summary>
            Returns a <see cref="T:Godot.Rect2I"/> with equivalent position and size, modified so that
            the top-left corner is the origin and width and height are positive.
            </summary>
            <returns>The modified <see cref="T:Godot.Rect2I"/>.</returns>
        </member>
        <member name="M:Godot.Rect2I.Intersection(Godot.Rect2I)">
            <summary>
            Returns the intersection of this <see cref="T:Godot.Rect2I"/> and <paramref name="b"/>.
            If the rectangles do not intersect, an empty <see cref="T:Godot.Rect2I"/> is returned.
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2I"/>.</param>
            <returns>
            The intersection of this <see cref="T:Godot.Rect2I"/> and <paramref name="b"/>,
            or an empty <see cref="T:Godot.Rect2I"/> if they do not intersect.
            </returns>
        </member>
        <member name="M:Godot.Rect2I.Encloses(Godot.Rect2I)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:Godot.Rect2I"/> completely encloses another one.
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2I"/> that may be enclosed.</param>
            <returns>
            A <see langword="bool"/> for whether or not this <see cref="T:Godot.Rect2I"/> encloses <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:Godot.Rect2I.Expand(Godot.Vector2I)">
            <summary>
            Returns this <see cref="T:Godot.Rect2I"/> expanded to include a given point.
            </summary>
            <param name="to">The point to include.</param>
            <returns>The expanded <see cref="T:Godot.Rect2I"/>.</returns>
        </member>
        <member name="M:Godot.Rect2I.GetCenter">
            <summary>
            Returns the center of the <see cref="T:Godot.Rect2I"/>, which is equal
            to <see cref="P:Godot.Rect2I.Position"/> + (<see cref="P:Godot.Rect2I.Size"/> / 2).
            If <see cref="P:Godot.Rect2I.Size"/> is an odd number, the returned center
            value will be rounded towards <see cref="P:Godot.Rect2I.Position"/>.
            </summary>
            <returns>The center.</returns>
        </member>
        <member name="M:Godot.Rect2I.Grow(System.Int32)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Rect2I"/> grown by the specified amount
            on all sides.
            </summary>
            <seealso cref="M:Godot.Rect2I.GrowIndividual(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:Godot.Rect2I.GrowSide(Godot.Side,System.Int32)"/>
            <param name="by">The amount to grow by.</param>
            <returns>The grown <see cref="T:Godot.Rect2I"/>.</returns>
        </member>
        <member name="M:Godot.Rect2I.GrowIndividual(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Rect2I"/> grown by the specified amount
            on each side individually.
            </summary>
            <seealso cref="M:Godot.Rect2I.Grow(System.Int32)"/>
            <seealso cref="M:Godot.Rect2I.GrowSide(Godot.Side,System.Int32)"/>
            <param name="left">The amount to grow by on the left side.</param>
            <param name="top">The amount to grow by on the top side.</param>
            <param name="right">The amount to grow by on the right side.</param>
            <param name="bottom">The amount to grow by on the bottom side.</param>
            <returns>The grown <see cref="T:Godot.Rect2I"/>.</returns>
        </member>
        <member name="M:Godot.Rect2I.GrowSide(Godot.Side,System.Int32)">
            <summary>
            Returns a copy of the <see cref="T:Godot.Rect2I"/> grown by the specified amount
            on the specified <see cref="T:Godot.Side"/>.
            </summary>
            <seealso cref="M:Godot.Rect2I.Grow(System.Int32)"/>
            <seealso cref="M:Godot.Rect2I.GrowIndividual(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <param name="side">The side to grow.</param>
            <param name="by">The amount to grow by.</param>
            <returns>The grown <see cref="T:Godot.Rect2I"/>.</returns>
        </member>
        <member name="M:Godot.Rect2I.HasArea">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rect2I"/> has
            area, and <see langword="false"/> if the <see cref="T:Godot.Rect2I"/>
            is linear, empty, or has a negative <see cref="P:Godot.Rect2I.Size"/>.
            See also <see cref="P:Godot.Rect2I.Area"/>.
            </summary>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Rect2I"/> has area.
            </returns>
        </member>
        <member name="M:Godot.Rect2I.HasPoint(Godot.Vector2I)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rect2I"/> contains a point,
            or <see langword="false"/> otherwise.
            </summary>
            <param name="point">The point to check.</param>
            <returns>
            A <see langword="bool"/> for whether or not the <see cref="T:Godot.Rect2I"/> contains <paramref name="point"/>.
            </returns>
        </member>
        <member name="M:Godot.Rect2I.Intersects(Godot.Rect2I)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rect2I"/> overlaps with <paramref name="b"/>
            (i.e. they have at least one point in common).
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2I"/> to check for intersections with.</param>
            <returns>A <see langword="bool"/> for whether or not they are intersecting.</returns>
        </member>
        <member name="M:Godot.Rect2I.Merge(Godot.Rect2I)">
            <summary>
            Returns a larger <see cref="T:Godot.Rect2I"/> that contains this <see cref="T:Godot.Rect2I"/> and <paramref name="b"/>.
            </summary>
            <param name="b">The other <see cref="T:Godot.Rect2I"/>.</param>
            <returns>The merged <see cref="T:Godot.Rect2I"/>.</returns>
        </member>
        <member name="M:Godot.Rect2I.#ctor(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2I"/> from a position and size.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2I.#ctor(Godot.Vector2I,System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2I"/> from a position, width, and height.
            </summary>
            <param name="position">The position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2I.#ctor(System.Int32,System.Int32,Godot.Vector2I)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2I"/> from x, y, and size.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Godot.Rect2I.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:Godot.Rect2I"/> from x, y, width, and height.
            </summary>
            <param name="x">The position's X coordinate.</param>
            <param name="y">The position's Y coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Godot.Rect2I.op_Equality(Godot.Rect2I,Godot.Rect2I)">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Godot.Rect2I"/>s are exactly equal.
            </summary>
            <param name="left">The left rect.</param>
            <param name="right">The right rect.</param>
            <returns>Whether or not the rects are equal.</returns>
        </member>
        <member name="M:Godot.Rect2I.op_Inequality(Godot.Rect2I,Godot.Rect2I)">
            <summary>
            Returns <see langword="true"/> if the
            <see cref="T:Godot.Rect2I"/>s are not equal.
            </summary>
            <param name="left">The left rect.</param>
            <param name="right">The right rect.</param>
            <returns>Whether or not the rects are not equal.</returns>
        </member>
        <member name="M:Godot.Rect2I.op_Implicit(Godot.Rect2I)~Godot.Rect2">
            <summary>
            Converts this <see cref="T:Godot.Rect2I"/> to a <see cref="T:Godot.Rect2"/>.
            </summary>
            <param name="value">The rect to convert.</param>
        </member>
        <member name="M:Godot.Rect2I.op_Explicit(Godot.Rect2)~Godot.Rect2I">
            <summary>
            Converts a <see cref="T:Godot.Rect2"/> to a <see cref="T:Godot.Rect2I"/>.
            </summary>
            <param name="value">The rect to convert.</param>
        </member>
        <member name="M:Godot.Rect2I.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if this rect and <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether or not the rect and the other object are equal.</returns>
        </member>
        <member name="M:Godot.Rect2I.Equals(Godot.Rect2I)">
            <summary>
            Returns <see langword="true"/> if this rect and <paramref name="other"/> are equal.
            </summary>
            <param name="other">The other rect to compare.</param>
            <returns>Whether or not the rects are equal.</returns>
        </member>
        <member name="M:Godot.Rect2I.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Rect2I"/>.
            </summary>
            <returns>A hash code for this rect.</returns>
        </member>
        <member name="M:Godot.Rect2I.ToString">
            <summary>
            Converts this <see cref="T:Godot.Rect2I"/> to a string.
            </summary>
            <returns>A string representation of this rect.</returns>
        </member>
        <member name="M:Godot.Rect2I.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Rect2I"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this rect.</returns>
        </member>
        <member name="T:Godot.Rid">
             <summary>
             The RID type is used to access a low-level resource by its unique ID.
             RIDs are opaque, which means they do not grant access to the resource
             by themselves. They are used by the low-level server classes, such as
             <see cref="T:Godot.DisplayServer"/>, <see cref="T:Godot.RenderingServer"/>,
             <see cref="T:Godot.TextServer"/>, etc.
            
             A low-level resource may correspond to a high-level <see cref="T:Godot.Resource"/>,
             such as <see cref="T:Godot.Texture"/> or <see cref="T:Godot.Mesh"/>
             </summary>
        </member>
        <member name="M:Godot.Rid.#ctor(Godot.GodotObject)">
            <summary>
            Constructs a new <see cref="T:Godot.Rid"/> for the given <see cref="T:Godot.GodotObject"/> <paramref name="from"/>.
            </summary>
        </member>
        <member name="M:Godot.Rid.NewRid">
            <summary>
            Constructs a new <see cref="T:Godot.Rid"/> allocating a unique ID.
            </summary>
        </member>
        <member name="P:Godot.Rid.Id">
            <summary>
            Returns the ID of the referenced low-level resource.
            </summary>
            <returns>The ID of the referenced resource.</returns>
        </member>
        <member name="P:Godot.Rid.IsValid">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rid"/> is not <c>0</c>.
            </summary>
            <returns>Whether or not the ID is valid.</returns>
        </member>
        <member name="M:Godot.Rid.op_Equality(Godot.Rid,Godot.Rid)">
            <summary>
            Returns <see langword="true"/> if both <see cref="T:Godot.Rid"/>s are equal,
            which means they both refer to the same low-level resource.
            </summary>
            <param name="left">The left RID.</param>
            <param name="right">The right RID.</param>
            <returns>Whether or not the RIDs are equal.</returns>
        </member>
        <member name="M:Godot.Rid.op_Inequality(Godot.Rid,Godot.Rid)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.Rid"/>s are not equal.
            </summary>
            <param name="left">The left RID.</param>
            <param name="right">The right RID.</param>
            <returns>Whether or not the RIDs are equal.</returns>
        </member>
        <member name="M:Godot.Rid.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if this RID and <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">The other object to compare.</param>
            <returns>Whether or not the color and the other object are equal.</returns>
        </member>
        <member name="M:Godot.Rid.Equals(Godot.Rid)">
            <summary>
            Returns <see langword="true"/> if the RIDs are equal.
            </summary>
            <param name="other">The other RID.</param>
            <returns>Whether or not the RIDs are equal.</returns>
        </member>
        <member name="M:Godot.Rid.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Rid"/>.
            </summary>
            <returns>A hash code for this RID.</returns>
        </member>
        <member name="M:Godot.Rid.ToString">
            <summary>
            Converts this <see cref="T:Godot.Rid"/> to a string.
            </summary>
            <returns>A string representation of this Rid.</returns>
        </member>
        <member name="T:Godot.Signal">
            <summary>
            Represents a signal defined in an object.
            </summary>
        </member>
        <member name="P:Godot.Signal.Owner">
            <summary>
            Object that contains the signal.
            </summary>
        </member>
        <member name="P:Godot.Signal.Name">
            <summary>
            Name of the signal.
            </summary>
        </member>
        <member name="M:Godot.Signal.CreateTakingOwnership(Godot.NativeInterop.NativeGodotSignal)">
            <summary>
            Constructs a new <see cref="T:Godot.Signal"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Signal.CreateCopying(Godot.NativeInterop.NativeGodotSignal)">
            <summary>
            Constructs a new <see cref="T:Godot.Signal"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Signal.#ctor(Godot.GodotObject,Godot.StringName)">
            <summary>
            Creates a new <see cref="T:Godot.Signal"/> with the name <paramref name="name"/>
            in the specified <paramref name="owner"/>.
            </summary>
            <param name="owner">Object that contains the signal.</param>
            <param name="name">Name of the signal.</param>
        </member>
        <member name="M:Godot.Signal.GetAwaiter">
            <summary>
            Gets a <see cref="T:Godot.SignalAwaiter"/> that can be awaited for the next
            emission of the signal.
            </summary>
            <returns>The awaiter for the signal.</returns>
            <exception cref="T:System.InvalidOperationException">
            Signal is invalid and has a null owner or name.
            </exception>
        </member>
        <member name="T:Godot.StringName">
            <summary>
            StringNames are immutable strings designed for general-purpose representation of unique names.
            StringName ensures that only one instance of a given name exists (so two StringNames with the
            same value are the same object).
            Comparing them is much faster than with regular strings, because only the pointers are compared,
            not the whole strings.
            </summary>
        </member>
        <member name="P:Godot.StringName.IsEmpty">
            <summary>
            Check whether this <see cref="T:Godot.StringName"/> is empty.
            </summary>
            <returns>If the <see cref="T:Godot.StringName"/> is empty.</returns>
        </member>
        <member name="M:Godot.StringName.CreateTakingOwnership(Godot.NativeInterop.NativeGodotStringName)">
            <summary>
            Constructs a new <see cref="T:Godot.StringName"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.StringName.CreateCopying(Godot.NativeInterop.NativeGodotStringName)">
            <summary>
            Constructs a new <see cref="T:Godot.StringName"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.StringName.CreateStaticStringNameFromAsciiLiteral(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a new static <see cref="T:Godot.StringName"/> from an ASCII literal.
            This is an internal method to avoid checking if the ASCII value is valid
            to use it in generated code where we know the value is already valid.
            For other use cases and more information about static StringNames see
            <see cref="M:Godot.StringName.CreateStaticFromAscii(System.ReadOnlySpan{System.Byte})"/>.
            </summary>
            <param name="ascii">ASCII encoded string to construct the static <see cref="T:Godot.StringName"/> from.</param>
        </member>
        <member name="M:Godot.StringName.CreateFromUtf8(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a <see cref="T:Godot.StringName"/> from the given <paramref name="utf8"/> string.
            </summary>
            <param name="utf8">UTF-8 encoded string to construct the <see cref="T:Godot.StringName"/> from.</param>
        </member>
        <member name="M:Godot.StringName.CreateStaticFromAscii(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructs a <b>static</b> <see cref="T:Godot.StringName"/> from the given <paramref name="ascii"/> string.
            Static StringNames are created once and never disposed, they are meant to be created from literals
            or constants that are alive for the entire duration of the application, they can easily introduce
            undefined behavior if used wrong. In case of doubt, avoid creating static StringNames.
            </summary>
            <param name="ascii">ASCII encoded string to construct the static <see cref="T:Godot.StringName"/> from.</param>
        </member>
        <member name="M:Godot.StringName.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Godot.StringName"/> from the given <paramref name="name"/> string.
            </summary>
            <param name="name">String to construct the <see cref="T:Godot.StringName"/> from.</param>
        </member>
        <member name="M:Godot.StringName.op_Explicit(System.String)~Godot.StringName">
            <summary>
            Converts a string to a <see cref="T:Godot.StringName"/>.
            </summary>
            <param name="from">The string to convert.</param>
        </member>
        <member name="M:Godot.StringName.op_Explicit(Godot.StringName)~System.String">
            <summary>
            Converts a <see cref="T:Godot.StringName"/> to a string.
            </summary>
            <param name="from">The <see cref="T:Godot.StringName"/> to convert.</param>
        </member>
        <member name="M:Godot.StringName.Finalize">
            <summary>
            Releases the unmanaged <see cref="T:Godot.StringName"/> instance.
            </summary>
        </member>
        <member name="M:Godot.StringName.Dispose">
            <summary>
            Disposes of this <see cref="T:Godot.StringName"/>.
            </summary>
        </member>
        <member name="M:Godot.StringName.op_Equality(Godot.StringName,Godot.StringName)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.StringName"/>
            instances are equal.
            </summary>
            <param name="left">The left <see cref="T:Godot.StringName"/>.</param>
            <param name="right">The right <see cref="T:Godot.StringName"/>.</param>
            <returns>
            Whether or not the <see cref="T:Godot.StringName"/> instances are equal.
            </returns>
        </member>
        <member name="M:Godot.StringName.op_Inequality(Godot.StringName,Godot.StringName)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.StringName"/>
            instances are not equal.
            </summary>
            <param name="left">The left <see cref="T:Godot.StringName"/>.</param>
            <param name="right">The right <see cref="T:Godot.StringName"/>.</param>
            <returns>
            Whether or not the <see cref="T:Godot.StringName"/> instances are not equal.
            </returns>
        </member>
        <member name="M:Godot.StringName.Equals(Godot.StringName)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.StringName"/>
            instances are equal.
            </summary>
            <param name="other">The other <see cref="T:Godot.StringName"/>.</param>
            <returns>
            Whether or not the <see cref="T:Godot.StringName"/> instances are equal.
            </returns>
        </member>
        <member name="M:Godot.StringName.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:Godot.StringName"/> is
            equal to the given object (<paramref name="obj"/>).
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>
            Whether or not the <see cref="T:Godot.StringName"/> and the object are equal.
            </returns>
        </member>
        <member name="M:Godot.StringName.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.StringName"/>.
            </summary>
            <returns>A hash code for this <see cref="T:Godot.StringName"/>.</returns>
        </member>
        <member name="M:Godot.StringName.ToString">
            <summary>
            Converts this <see cref="T:Godot.StringName"/> to a string.
            </summary>
            <returns>A string representation of this <see cref="T:Godot.StringName"/>.</returns>
        </member>
        <member name="T:Godot.Transform2D">
             <summary>
             2×3 matrix (2 rows, 3 columns) used for 2D linear transformations.
             It can represent transformations such as translation, rotation, or scaling.
             It consists of a three <see cref="T:Godot.Vector2"/> values: x, y, and the origin.
            
             For more information, read this documentation article:
             https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html
             </summary>
        </member>
        <member name="F:Godot.Transform2D.X">
            <summary>
            The basis matrix's X vector (column 0). Equivalent to array index <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Transform2D.Y">
            <summary>
            The basis matrix's Y vector (column 1). Equivalent to array index <c>[1]</c>.
            </summary>
        </member>
        <member name="F:Godot.Transform2D.Origin">
            <summary>
            The origin vector (column 2, the third column). Equivalent to array index <c>[2]</c>.
            The origin vector represents translation.
            </summary>
        </member>
        <member name="P:Godot.Transform2D.Rotation">
            <summary>
            Returns the transform's rotation (in radians).
            </summary>
        </member>
        <member name="P:Godot.Transform2D.Scale">
            <summary>
            Returns the scale.
            </summary>
        </member>
        <member name="P:Godot.Transform2D.Skew">
            <summary>
            Returns the transform's skew (in radians).
            </summary>
        </member>
        <member name="P:Godot.Transform2D.Item(System.Int32)">
            <summary>
            Access whole columns in the form of <see cref="T:Godot.Vector2"/>.
            The third column is the <see cref="F:Godot.Transform2D.Origin"/> vector.
            </summary>
            <param name="column">Which column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="column"/> is not 0, 1 or 2.
            </exception>
        </member>
        <member name="P:Godot.Transform2D.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix elements in column-major order.
            The third column is the <see cref="F:Godot.Transform2D.Origin"/> vector.
            </summary>
            <param name="column">Which column, the matrix horizontal position.</param>
            <param name="row">Which row, the matrix vertical position.</param>
        </member>
        <member name="M:Godot.Transform2D.AffineInverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the basis is invertible (must have non-zero determinant).
            </summary>
            <seealso cref="M:Godot.Transform2D.Inverse"/>
            <returns>The inverse transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Determinant">
             <summary>
             Returns the determinant of the basis matrix. If the basis is
             uniformly scaled, then its determinant equals the square of the
             scale factor.
            
             A negative determinant means the basis was flipped, so onoe part of
             the scale is negative. A zero determinant means the basis isn't
             invertible, and is usually considered invalid.
             </summary>
             <returns>The determinant of the basis matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.BasisXform(Godot.Vector2)">
            <summary>
            Returns a vector transformed (multiplied) by the basis matrix.
            This method does not account for translation (the <see cref="F:Godot.Transform2D.Origin"/> vector).
            </summary>
            <seealso cref="M:Godot.Transform2D.BasisXformInv(Godot.Vector2)"/>
            <param name="v">A vector to transform.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Godot.Transform2D.BasisXformInv(Godot.Vector2)">
            <summary>
            Returns a vector transformed (multiplied) by the inverse basis matrix,
            under the assumption that the basis is orthonormal (i.e. rotation/reflection
            is fine, scaling/skew is not).
            This method does not account for translation (the <see cref="F:Godot.Transform2D.Origin"/> vector).
            <c>transform.BasisXformInv(vector)</c> is equivalent to
            <c>transform.Inverse().BasisXform(vector)</c>. See <see cref="M:Godot.Transform2D.Inverse"/>.
            For non-orthonormal transforms (e.g. with scaling)
            <c>transform.AffineInverse().BasisXform(vector)</c> can be used instead.
            See <see cref="M:Godot.Transform2D.AffineInverse"/>.
            </summary>
            <seealso cref="M:Godot.Transform2D.BasisXform(Godot.Vector2)"/>
            <param name="v">A vector to inversely transform.</param>
            <returns>The inversely transformed vector.</returns>
        </member>
        <member name="M:Godot.Transform2D.InterpolateWith(Godot.Transform2D,System.Single)">
            <summary>
            Interpolates this transform to the other <paramref name="transform"/> by <paramref name="weight"/>.
            </summary>
            <param name="transform">The other transform.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.Inverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the transformation basis is orthonormal (i.e. rotation/reflection
            is fine, scaling/skew is not). Use <see cref="M:Godot.Transform2D.AffineInverse"/> for
            non-orthonormal transforms (e.g. with scaling).
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.IsFinite">
            <summary>
            Returns <see langword="true"/> if this transform is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Transform2D.Orthonormalized">
            <summary>
            Returns the transform with the basis orthogonal (90 degrees),
            and normalized axis vectors (scale of 1 or -1).
            </summary>
            <returns>The orthonormalized transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.Rotated(System.Single)">
            <summary>
            Rotates the transform by <paramref name="angle"/> (in radians).
            The operation is done in the parent/global frame, equivalent to
            multiplying the matrix from the left.
            </summary>
            <param name="angle">The angle to rotate, in radians.</param>
            <returns>The rotated transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.RotatedLocal(System.Single)">
            <summary>
            Rotates the transform by <paramref name="angle"/> (in radians).
            The operation is done in the local frame, equivalent to
            multiplying the matrix from the right.
            </summary>
            <param name="angle">The angle to rotate, in radians.</param>
            <returns>The rotated transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Scaled(Godot.Vector2)">
            <summary>
            Scales the transform by the given scaling factor.
            The operation is done in the parent/global frame, equivalent to
            multiplying the matrix from the left.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.ScaledLocal(Godot.Vector2)">
            <summary>
            Scales the transform by the given scaling factor.
            The operation is done in the local frame, equivalent to
            multiplying the matrix from the right.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.Translated(Godot.Vector2)">
            <summary>
            Translates the transform by the given <paramref name="offset"/>.
            The operation is done in the parent/global frame, equivalent to
            multiplying the matrix from the left.
            </summary>
            <param name="offset">The offset to translate by.</param>
            <returns>The translated matrix.</returns>
        </member>
        <member name="M:Godot.Transform2D.TranslatedLocal(Godot.Vector2)">
            <summary>
            Translates the transform by the given <paramref name="offset"/>.
            The operation is done in the local frame, equivalent to
            multiplying the matrix from the right.
            </summary>
            <param name="offset">The offset to translate by.</param>
            <returns>The translated matrix.</returns>
        </member>
        <member name="P:Godot.Transform2D.Identity">
            <summary>
            The identity transform, with no translation, rotation, or scaling applied.
            This is used as a replacement for <c>Transform2D()</c> in GDScript.
            Do not use <c>new Transform2D()</c> with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to <c>new Transform2D(Vector2.Right, Vector2.Down, Vector2.Zero)</c>.</value>
        </member>
        <member name="P:Godot.Transform2D.FlipX">
            <summary>
            The transform that will flip something along the X axis.
            </summary>
            <value>Equivalent to <c>new Transform2D(Vector2.Left, Vector2.Down, Vector2.Zero)</c>.</value>
        </member>
        <member name="P:Godot.Transform2D.FlipY">
            <summary>
            The transform that will flip something along the Y axis.
            </summary>
            <value>Equivalent to <c>new Transform2D(Vector2.Right, Vector2.Up, Vector2.Zero)</c>.</value>
        </member>
        <member name="M:Godot.Transform2D.#ctor(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Constructs a transformation matrix from 3 vectors (matrix columns).
            </summary>
            <param name="xAxis">The X vector, or column index 0.</param>
            <param name="yAxis">The Y vector, or column index 1.</param>
            <param name="originPos">The origin vector, or column index 2.</param>
        </member>
        <member name="M:Godot.Transform2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a transformation matrix from the given components.
            Arguments are named such that xy is equal to calling <c>X.Y</c>.
            </summary>
            <param name="xx">The X component of the X column vector, accessed via <c>t.X.X</c> or <c>[0][0]</c>.</param>
            <param name="xy">The Y component of the X column vector, accessed via <c>t.X.Y</c> or <c>[0][1]</c>.</param>
            <param name="yx">The X component of the Y column vector, accessed via <c>t.Y.X</c> or <c>[1][0]</c>.</param>
            <param name="yy">The Y component of the Y column vector, accessed via <c>t.Y.Y</c> or <c>[1][1]</c>.</param>
            <param name="ox">The X component of the origin vector, accessed via <c>t.Origin.X</c> or <c>[2][0]</c>.</param>
            <param name="oy">The Y component of the origin vector, accessed via <c>t.Origin.Y</c> or <c>[2][1]</c>.</param>
        </member>
        <member name="M:Godot.Transform2D.#ctor(System.Single,Godot.Vector2)">
            <summary>
            Constructs a transformation matrix from a <paramref name="rotation"/> value and
            <paramref name="origin"/> vector.
            </summary>
            <param name="rotation">The rotation of the new transform, in radians.</param>
            <param name="origin">The origin vector, or column index 2.</param>
        </member>
        <member name="M:Godot.Transform2D.#ctor(System.Single,Godot.Vector2,System.Single,Godot.Vector2)">
            <summary>
            Constructs a transformation matrix from a <paramref name="rotation"/> value,
            <paramref name="scale"/> vector, <paramref name="skew"/> value, and
            <paramref name="origin"/> vector.
            </summary>
            <param name="rotation">The rotation of the new transform, in radians.</param>
            <param name="scale">The scale of the new transform.</param>
            <param name="skew">The skew of the new transform, in radians.</param>
            <param name="origin">The origin vector, or column index 2.</param>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Transform2D,Godot.Transform2D)">
            <summary>
            Composes these two transformation matrices by multiplying them
            together. This has the effect of transforming the second transform
            (the child) by the first transform (the parent).
            </summary>
            <param name="left">The parent transform.</param>
            <param name="right">The child transform.</param>
            <returns>The composed transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Transform2D,Godot.Vector2)">
            <summary>
            Returns a Vector2 transformed (multiplied) by the inverse transformation matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>vector * transform</c> is equivalent to <c>transform.Inverse() * vector</c>.
            See <see cref="M:Godot.Transform2D.Inverse"/>.
            For transforming by inverse of an affine transformation (e.g. with scaling)
            <c>transform.AffineInverse() * vector</c> can be used instead.
            See <see cref="M:Godot.Transform2D.AffineInverse"/>.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="vector">A Vector2 to transform.</param>
            <returns>The transformed Vector2.</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Vector2,Godot.Transform2D)">
            <summary>
            Returns a Vector2 transformed (multiplied) by the inverse transformation matrix.
            </summary>
            <param name="vector">A Vector2 to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed Vector2.</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Transform2D,Godot.Rect2)">
            <summary>
            Returns a Rect2 transformed (multiplied) by the transformation matrix.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="rect">A Rect2 to transform.</param>
            <returns>The transformed Rect2.</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Rect2,Godot.Transform2D)">
            <summary>
            Returns a Rect2 transformed (multiplied) by the inverse transformation matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>rect * transform</c> is equivalent to <c>transform.Inverse() * rect</c>.
            See <see cref="M:Godot.Transform2D.Inverse"/>.
            For transforming by inverse of an affine transformation (e.g. with scaling)
            <c>transform.AffineInverse() * rect</c> can be used instead.
            See <see cref="M:Godot.Transform2D.AffineInverse"/>.
            </summary>
            <param name="rect">A Rect2 to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed Rect2.</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Transform2D,Godot.Vector2[])">
            <summary>
            Returns a copy of the given Vector2[] transformed (multiplied) by the transformation matrix.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="array">A Vector2[] to transform.</param>
            <returns>The transformed copy of the Vector2[].</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Multiply(Godot.Vector2[],Godot.Transform2D)">
            <summary>
            Returns a copy of the given Vector2[] transformed (multiplied) by the inverse transformation matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>array * transform</c> is equivalent to <c>transform.Inverse() * array</c>.
            See <see cref="M:Godot.Transform2D.Inverse"/>.
            For transforming by inverse of an affine transformation (e.g. with scaling)
            <c>transform.AffineInverse() * array</c> can be used instead.
            See <see cref="M:Godot.Transform2D.AffineInverse"/>.
            </summary>
            <param name="array">A Vector2[] to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed copy of the Vector2[].</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Equality(Godot.Transform2D,Godot.Transform2D)">
            <summary>
            Returns <see langword="true"/> if the transforms are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform2D.IsEqualApprox(Godot.Transform2D)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left transform.</param>
            <param name="right">The right transform.</param>
            <returns>Whether or not the transforms are exactly equal.</returns>
        </member>
        <member name="M:Godot.Transform2D.op_Inequality(Godot.Transform2D,Godot.Transform2D)">
            <summary>
            Returns <see langword="true"/> if the transforms are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform2D.IsEqualApprox(Godot.Transform2D)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left transform.</param>
            <param name="right">The right transform.</param>
            <returns>Whether or not the transforms are not equal.</returns>
        </member>
        <member name="M:Godot.Transform2D.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the transform is exactly equal
            to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform2D.IsEqualApprox(Godot.Transform2D)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the transform and the object are exactly equal.</returns>
        </member>
        <member name="M:Godot.Transform2D.Equals(Godot.Transform2D)">
            <summary>
            Returns <see langword="true"/> if the transforms are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform2D.IsEqualApprox(Godot.Transform2D)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other transform to compare.</param>
            <returns>Whether or not the matrices are exactly equal.</returns>
        </member>
        <member name="M:Godot.Transform2D.IsEqualApprox(Godot.Transform2D)">
            <summary>
            Returns <see langword="true"/> if this transform and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> on each component.
            </summary>
            <param name="other">The other transform to compare.</param>
            <returns>Whether or not the matrices are approximately equal.</returns>
        </member>
        <member name="M:Godot.Transform2D.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Transform2D"/>.
            </summary>
            <returns>A hash code for this transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.ToString">
            <summary>
            Converts this <see cref="T:Godot.Transform2D"/> to a string.
            </summary>
            <returns>A string representation of this transform.</returns>
        </member>
        <member name="M:Godot.Transform2D.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Transform2D"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this transform.</returns>
        </member>
        <member name="T:Godot.Transform3D">
             <summary>
             3×4 matrix (3 rows, 4 columns) used for 3D linear transformations.
             It can represent transformations such as translation, rotation, or scaling.
             It consists of a <see cref="T:Godot.Basis"/> (first 3 columns) and a
             <see cref="T:Godot.Vector3"/> for the origin (last column).
            
             For more information, read this documentation article:
             https://docs.godotengine.org/en/latest/tutorials/math/matrices_and_transforms.html
             </summary>
        </member>
        <member name="F:Godot.Transform3D.Basis">
            <summary>
            The <see cref="T:Godot.Basis"/> of this transform. Contains the X, Y, and Z basis
            vectors (columns 0 to 2) and is responsible for rotation and scale.
            </summary>
        </member>
        <member name="F:Godot.Transform3D.Origin">
            <summary>
            The origin vector (column 3, the fourth column). Equivalent to array index <c>[3]</c>.
            </summary>
        </member>
        <member name="P:Godot.Transform3D.Item(System.Int32)">
            <summary>
            Access whole columns in the form of <see cref="T:Godot.Vector3"/>.
            The fourth column is the <see cref="F:Godot.Transform3D.Origin"/> vector.
            </summary>
            <param name="column">Which column vector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="column"/> is not 0, 1, 2 or 3.
            </exception>
        </member>
        <member name="P:Godot.Transform3D.Item(System.Int32,System.Int32)">
            <summary>
            Access matrix elements in column-major order.
            The fourth column is the <see cref="F:Godot.Transform3D.Origin"/> vector.
            </summary>
            <param name="column">Which column, the matrix horizontal position.</param>
            <param name="row">Which row, the matrix vertical position.</param>
        </member>
        <member name="M:Godot.Transform3D.AffineInverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the basis is invertible (must have non-zero determinant).
            </summary>
            <seealso cref="M:Godot.Transform3D.Inverse"/>
            <returns>The inverse transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.InterpolateWith(Godot.Transform3D,System.Single)">
            <summary>
            Returns a transform interpolated between this transform and another
            <paramref name="transform"/> by a given <paramref name="weight"/>
            (on the range of 0.0 to 1.0).
            </summary>
            <param name="transform">The other transform.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated transform.</returns>
        </member>
        <member name="M:Godot.Transform3D.Inverse">
            <summary>
            Returns the inverse of the transform, under the assumption that
            the transformation basis is orthonormal (i.e. rotation/reflection
            is fine, scaling/skew is not). Use <see cref="M:Godot.Transform3D.AffineInverse"/> for
            non-orthonormal transforms (e.g. with scaling).
            </summary>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.IsFinite">
            <summary>
            Returns <see langword="true"/> if this transform is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Transform3D.LookingAt(Godot.Vector3,System.Nullable{Godot.Vector3},System.Boolean)">
            <summary>
            Returns a copy of the transform rotated such that the forward axis (-Z)
            points towards the <paramref name="target"/> position.
            The up axis (+Y) points as close to the <paramref name="up"/> vector
            as possible while staying perpendicular to the forward axis.
            The resulting transform is orthonormalized.
            The existing rotation, scale, and skew information from the original transform is discarded.
            The <paramref name="target"/> and <paramref name="up"/> vectors cannot be zero,
            cannot be parallel to each other, and are defined in global/parent space.
            </summary>
            <param name="target">The object to look at.</param>
            <param name="up">The relative up direction.</param>
            <param name="useModelFront">
            If true, then the model is oriented in reverse,
            towards the model front axis (+Z, Vector3.ModelFront),
            which is more useful for orienting 3D models.
            </param>
            <returns>The resulting transform.</returns>
        </member>
        <member name="M:Godot.Transform3D.Orthonormalized">
            <summary>
            Returns the transform with the basis orthogonal (90 degrees),
            and normalized axis vectors (scale of 1 or -1).
            </summary>
            <returns>The orthonormalized transform.</returns>
        </member>
        <member name="M:Godot.Transform3D.Rotated(Godot.Vector3,System.Single)">
            <summary>
            Rotates the transform around the given <paramref name="axis"/> by <paramref name="angle"/> (in radians).
            The axis must be a normalized vector.
            The operation is done in the parent/global frame, equivalent to
            multiplying the matrix from the left.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate, in radians.</param>
            <returns>The rotated transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.RotatedLocal(Godot.Vector3,System.Single)">
            <summary>
            Rotates the transform around the given <paramref name="axis"/> by <paramref name="angle"/> (in radians).
            The axis must be a normalized vector.
            The operation is done in the local frame, equivalent to
            multiplying the matrix from the right.
            </summary>
            <param name="axis">The axis to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate, in radians.</param>
            <returns>The rotated transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.Scaled(Godot.Vector3)">
            <summary>
            Scales the transform by the given 3D <paramref name="scale"/> factor.
            The operation is done in the parent/global frame, equivalent to
            multiplying the matrix from the left.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.ScaledLocal(Godot.Vector3)">
            <summary>
            Scales the transform by the given 3D <paramref name="scale"/> factor.
            The operation is done in the local frame, equivalent to
            multiplying the matrix from the right.
            </summary>
            <param name="scale">The scale to introduce.</param>
            <returns>The scaled transformation matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.Translated(Godot.Vector3)">
            <summary>
            Translates the transform by the given <paramref name="offset"/>.
            The operation is done in the parent/global frame, equivalent to
            multiplying the matrix from the left.
            </summary>
            <param name="offset">The offset to translate by.</param>
            <returns>The translated matrix.</returns>
        </member>
        <member name="M:Godot.Transform3D.TranslatedLocal(Godot.Vector3)">
            <summary>
            Translates the transform by the given <paramref name="offset"/>.
            The operation is done in the local frame, equivalent to
            multiplying the matrix from the right.
            </summary>
            <param name="offset">The offset to translate by.</param>
            <returns>The translated matrix.</returns>
        </member>
        <member name="P:Godot.Transform3D.Identity">
            <summary>
            The identity transform, with no translation, rotation, or scaling applied.
            This is used as a replacement for <c>Transform()</c> in GDScript.
            Do not use <c>new Transform()</c> with no arguments in C#, because it sets all values to zero.
            </summary>
            <value>Equivalent to <c>new Transform(Vector3.Right, Vector3.Up, Vector3.Back, Vector3.Zero)</c>.</value>
        </member>
        <member name="P:Godot.Transform3D.FlipX">
            <summary>
            The transform that will flip something along the X axis.
            </summary>
            <value>Equivalent to <c>new Transform(Vector3.Left, Vector3.Up, Vector3.Back, Vector3.Zero)</c>.</value>
        </member>
        <member name="P:Godot.Transform3D.FlipY">
            <summary>
            The transform that will flip something along the Y axis.
            </summary>
            <value>Equivalent to <c>new Transform(Vector3.Right, Vector3.Down, Vector3.Back, Vector3.Zero)</c>.</value>
        </member>
        <member name="P:Godot.Transform3D.FlipZ">
            <summary>
            The transform that will flip something along the Z axis.
            </summary>
            <value>Equivalent to <c>new Transform(Vector3.Right, Vector3.Up, Vector3.Forward, Vector3.Zero)</c>.</value>
        </member>
        <member name="M:Godot.Transform3D.#ctor(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Constructs a transformation matrix from 4 vectors (matrix columns).
            </summary>
            <param name="column0">The X vector, or column index 0.</param>
            <param name="column1">The Y vector, or column index 1.</param>
            <param name="column2">The Z vector, or column index 2.</param>
            <param name="origin">The origin vector, or column index 3.</param>
        </member>
        <member name="M:Godot.Transform3D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a transformation matrix from the given components.
            Arguments are named such that xy is equal to calling <c>Basis.X.Y</c>.
            </summary>
            <param name="xx">The X component of the X column vector, accessed via <c>t.Basis.X.X</c> or <c>[0][0]</c>.</param>
            <param name="yx">The X component of the Y column vector, accessed via <c>t.Basis.Y.X</c> or <c>[1][0]</c>.</param>
            <param name="zx">The X component of the Z column vector, accessed via <c>t.Basis.Z.X</c> or <c>[2][0]</c>.</param>
            <param name="xy">The Y component of the X column vector, accessed via <c>t.Basis.X.Y</c> or <c>[0][1]</c>.</param>
            <param name="yy">The Y component of the Y column vector, accessed via <c>t.Basis.Y.Y</c> or <c>[1][1]</c>.</param>
            <param name="zy">The Y component of the Z column vector, accessed via <c>t.Basis.Y.Y</c> or <c>[2][1]</c>.</param>
            <param name="xz">The Z component of the X column vector, accessed via <c>t.Basis.X.Y</c> or <c>[0][2]</c>.</param>
            <param name="yz">The Z component of the Y column vector, accessed via <c>t.Basis.Y.Y</c> or <c>[1][2]</c>.</param>
            <param name="zz">The Z component of the Z column vector, accessed via <c>t.Basis.Y.Y</c> or <c>[2][2]</c>.</param>
            <param name="ox">The X component of the origin vector, accessed via <c>t.Origin.X</c> or <c>[2][0]</c>.</param>
            <param name="oy">The Y component of the origin vector, accessed via <c>t.Origin.Y</c> or <c>[2][1]</c>.</param>
            <param name="oz">The Z component of the origin vector, accessed via <c>t.Origin.Z</c> or <c>[2][2]</c>.</param>
        </member>
        <member name="M:Godot.Transform3D.#ctor(Godot.Basis,Godot.Vector3)">
            <summary>
            Constructs a transformation matrix from the given <paramref name="basis"/> and
            <paramref name="origin"/> vector.
            </summary>
            <param name="basis">The <see cref="T:Godot.Basis"/> to create the basis from.</param>
            <param name="origin">The origin vector, or column index 3.</param>
        </member>
        <member name="M:Godot.Transform3D.#ctor(Godot.Projection)">
            <summary>
            Constructs a transformation matrix from the given <paramref name="projection"/>
            by trimming the last row of the projection matrix (<c>projection.X.W</c>,
            <c>projection.Y.W</c>, <c>projection.Z.W</c>, and <c>projection.W.W</c>
            are not copied over).
            </summary>
            <param name="projection">The <see cref="T:Godot.Projection"/> to create the transform from.</param>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Transform3D,Godot.Transform3D)">
            <summary>
            Composes these two transformation matrices by multiplying them
            together. This has the effect of transforming the second transform
            (the child) by the first transform (the parent).
            </summary>
            <param name="left">The parent transform.</param>
            <param name="right">The child transform.</param>
            <returns>The composed transform.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Transform3D,Godot.Vector3)">
            <summary>
            Returns a Vector3 transformed (multiplied) by the transformation matrix.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="vector">A Vector3 to transform.</param>
            <returns>The transformed Vector3.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Vector3,Godot.Transform3D)">
            <summary>
            Returns a Vector3 transformed (multiplied) by the inverse transformation matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>vector * transform</c> is equivalent to <c>transform.Inverse() * vector</c>.
            See <see cref="M:Godot.Transform3D.Inverse"/>.
            For transforming by inverse of an affine transformation (e.g. with scaling)
            <c>transform.AffineInverse() * vector</c> can be used instead.
            See <see cref="M:Godot.Transform3D.AffineInverse"/>.
            </summary>
            <param name="vector">A Vector3 to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed Vector3.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Transform3D,Godot.Aabb)">
            <summary>
            Returns an AABB transformed (multiplied) by the transformation matrix.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="aabb">An AABB to transform.</param>
            <returns>The transformed AABB.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Aabb,Godot.Transform3D)">
            <summary>
            Returns an AABB transformed (multiplied) by the inverse transformation matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>aabb * transform</c> is equivalent to <c>transform.Inverse() * aabb</c>.
            See <see cref="M:Godot.Transform3D.Inverse"/>.
            For transforming by inverse of an affine transformation (e.g. with scaling)
            <c>transform.AffineInverse() * aabb</c> can be used instead.
            See <see cref="M:Godot.Transform3D.AffineInverse"/>.
            </summary>
            <param name="aabb">An AABB to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed AABB.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Transform3D,Godot.Plane)">
            <summary>
            Returns a Plane transformed (multiplied) by the transformation matrix.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="plane">A Plane to transform.</param>
            <returns>The transformed Plane.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Plane,Godot.Transform3D)">
            <summary>
            Returns a Plane transformed (multiplied) by the inverse transformation matrix.
            <c>plane * transform</c> is equivalent to <c>transform.AffineInverse() * plane</c>.
            See <see cref="M:Godot.Transform3D.AffineInverse"/>.
            </summary>
            <param name="plane">A Plane to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed Plane.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Transform3D,Godot.Vector3[])">
            <summary>
            Returns a copy of the given Vector3[] transformed (multiplied) by the transformation matrix.
            </summary>
            <param name="transform">The transformation to apply.</param>
            <param name="array">A Vector3[] to transform.</param>
            <returns>The transformed copy of the Vector3[].</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Multiply(Godot.Vector3[],Godot.Transform3D)">
            <summary>
            Returns a copy of the given Vector3[] transformed (multiplied) by the inverse transformation matrix,
            under the assumption that the transformation basis is orthonormal
            (i.e. rotation/reflection is fine, scaling/skew is not).
            <c>array * transform</c> is equivalent to <c>transform.Inverse() * array</c>.
            See <see cref="M:Godot.Transform3D.Inverse"/>.
            For transforming by inverse of an affine transformation (e.g. with scaling)
            <c>transform.AffineInverse() * array</c> can be used instead.
            See <see cref="M:Godot.Transform3D.AffineInverse"/>.
            </summary>
            <param name="array">A Vector3[] to inversely transform.</param>
            <param name="transform">The transformation to apply.</param>
            <returns>The inversely transformed copy of the Vector3[].</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Equality(Godot.Transform3D,Godot.Transform3D)">
            <summary>
            Returns <see langword="true"/> if the transforms are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform3D.IsEqualApprox(Godot.Transform3D)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left transform.</param>
            <param name="right">The right transform.</param>
            <returns>Whether or not the transforms are exactly equal.</returns>
        </member>
        <member name="M:Godot.Transform3D.op_Inequality(Godot.Transform3D,Godot.Transform3D)">
            <summary>
            Returns <see langword="true"/> if the transforms are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform3D.IsEqualApprox(Godot.Transform3D)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left transform.</param>
            <param name="right">The right transform.</param>
            <returns>Whether or not the transforms are not equal.</returns>
        </member>
        <member name="M:Godot.Transform3D.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the transform is exactly equal
            to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform3D.IsEqualApprox(Godot.Transform3D)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the transform and the object are exactly equal.</returns>
        </member>
        <member name="M:Godot.Transform3D.Equals(Godot.Transform3D)">
            <summary>
            Returns <see langword="true"/> if the transforms are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Transform3D.IsEqualApprox(Godot.Transform3D)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other transform to compare.</param>
            <returns>Whether or not the matrices are exactly equal.</returns>
        </member>
        <member name="M:Godot.Transform3D.IsEqualApprox(Godot.Transform3D)">
            <summary>
            Returns <see langword="true"/> if this transform and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> on each component.
            </summary>
            <param name="other">The other transform to compare.</param>
            <returns>Whether or not the matrices are approximately equal.</returns>
        </member>
        <member name="M:Godot.Transform3D.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Transform3D"/>.
            </summary>
            <returns>A hash code for this transform.</returns>
        </member>
        <member name="M:Godot.Transform3D.ToString">
            <summary>
            Converts this <see cref="T:Godot.Transform3D"/> to a string.
            </summary>
            <returns>A string representation of this transform.</returns>
        </member>
        <member name="M:Godot.Transform3D.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Transform3D"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this transform.</returns>
        </member>
        <member name="T:Godot.Variant">
            <summary>
            Represents a variety of types that are compatible with Godot APIs.
            It is often used in APIs where a variety of types are allowed or when
            the type is dynamic or unspecified.
            Prefer using specific types or generics when possible, <see cref="T:Godot.Variant"/>
            are only meant to be used when necessary to interact with untyped engine APIs.
            </summary>
        </member>
        <member name="M:Godot.Variant.CreateTakingOwnership(Godot.NativeInterop.NativeGodotVariant@)">
            <summary>
            Constructs a new <see cref="T:Godot.Variant"/> from the value borrowed from
            <paramref name="nativeValueToOwn"/>, taking ownership of the value.
            Since the new instance references the same value, disposing the new
            instance will also dispose the original value.
            </summary>
        </member>
        <member name="M:Godot.Variant.CreateCopying(Godot.NativeInterop.NativeGodotVariant@)">
            <summary>
            Constructs a new <see cref="T:Godot.Variant"/> from the value borrowed from
            <paramref name="nativeValueToCopy"/>, copying the value.
            Since the new instance is a copy of the value, the caller is responsible
            of disposing the new instance to avoid memory leaks.
            </summary>
        </member>
        <member name="M:Godot.Variant.Dispose">
            <summary>
            Releases the unmanaged instance associated with this Variant, if any.
            </summary>
        </member>
        <member name="M:Godot.Variant.Enumerate">
            <summary>
            Enumerates the elements of the variant, if it can be enumerated.
            </summary>
            <returns>
            An enumerator to enumerate the variant's elements.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The variant can't be enumerated.
            </exception>
        </member>
        <member name="P:Godot.Variant.VariantType">
            <summary>
            The type contained in this Variant instance.
            </summary>
        </member>
        <member name="M:Godot.Variant.ToString">
            <summary>
            Converts the value of this Variant to a string representation.
            </summary>
            <returns>String representation of the Variant's value.</returns>
        </member>
        <member name="M:Godot.Variant.AsSystemObject">
            <summary>
            Gets the underlying value of the Variant and returns it as an <see cref="T:System.Object"/>.
            If the Variant type is a struct, the value will be boxed.
            </summary>
            <returns>Value of the variant as an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:Godot.VariantEnumerator">
            <summary>
            Enumerate the elements of a <see cref="T:Godot.Variant"/>, if it can be enumerated
            (i.e.: GodotArray).
            </summary>
        </member>
        <member name="F:Godot.VariantEnumerator._source">
            <summary>
            The variant that will be enumerated.
            </summary>
        </member>
        <member name="F:Godot.VariantEnumerator._iterator">
            <summary>
            The state of the enumeration (i.e.: an index).
            </summary>
        </member>
        <member name="F:Godot.VariantEnumerator._isEnumeratorActive">
            <summary>
            Indicates whether the enumerator has been initialized.
            </summary>
        </member>
        <member name="M:Godot.VariantEnumerator.#ctor(Godot.Variant)">
            <summary>
            Initialize the enumerator.
            </summary>
            <param name="source">The variant to enumerate.</param>
        </member>
        <member name="P:Godot.VariantEnumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Godot.VariantEnumerator.GetEnumerator">
            <summary>
            Returns this instance as an enumerator.
            </summary>
        </member>
        <member name="M:Godot.VariantEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the variant.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator successfully advanced to the next element;
            <see langword="false"/> if the enumerator reached the last element.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The variant can't be enumerated.
            </exception>
        </member>
        <member name="T:Godot.Vector2">
            <summary>
            2-element structure that can be used to represent positions in 2D space or any other pair of numeric values.
            </summary>
        </member>
        <member name="T:Godot.Vector2.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector2.MaxAxisIndex"/> and <see cref="M:Godot.Vector2.MinAxisIndex"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector2.Axis.X">
            <summary>
            The vector's X axis.
            </summary>
        </member>
        <member name="F:Godot.Vector2.Axis.Y">
            <summary>
            The vector's Y axis.
            </summary>
        </member>
        <member name="F:Godot.Vector2.X">
            <summary>
            The vector's X component. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector2.Y">
            <summary>
            The vector's Y component. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="P:Godot.Vector2.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0 or 1.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Vector2.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Vector2.Y"/>.
            </value>
        </member>
        <member name="M:Godot.Vector2.Deconstruct(System.Single@,System.Single@)">
            <summary>
            Helper method for deconstruction into a tuple.
            </summary>
        </member>
        <member name="M:Godot.Vector2.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Abs(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2.Angle">
             <summary>
             Returns this vector's angle with respect to the X axis, or (1, 0) vector, in radians.
            
             Equivalent to the result of <see cref="M:System.Single.Atan2(System.Single,System.Single)"/> when
             called with the vector's <see cref="F:Godot.Vector2.Y"/> and <see cref="F:Godot.Vector2.X"/> as parameters: <c>Mathf.Atan2(v.Y, v.X)</c>.
             </summary>
             <returns>The angle of this vector, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2.AngleTo(Godot.Vector2)">
            <summary>
            Returns the angle to the given vector, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2.AngleToPoint(Godot.Vector2)">
            <summary>
            Returns the angle between the line connecting the two points and the X axis, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector2.Aspect">
            <summary>
            Returns the aspect ratio of this vector, the ratio of <see cref="F:Godot.Vector2.X"/> to <see cref="F:Godot.Vector2.Y"/>.
            </summary>
            <returns>The <see cref="F:Godot.Vector2.X"/> component divided by the <see cref="F:Godot.Vector2.Y"/> component.</returns>
        </member>
        <member name="M:Godot.Vector2.Bounce(Godot.Vector2)">
            <summary>
            Returns the vector "bounced off" from a plane defined by the given normal.
            </summary>
            <param name="normal">The normal vector defining the plane to bounce off. Must be normalized.</param>
            <returns>The bounced vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Ceil">
            <summary>
            Returns a new vector with all components rounded up (towards positive infinity).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Ceiling(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2.Clamp(Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns a new vector with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The vector with minimum allowed values.</param>
            <param name="max">The vector with maximum allowed values.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector2.Clamp(System.Single,System.Single)">
            <summary>
            Returns a new vector with all components clamped between the
            <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector2.Cross(Godot.Vector2)">
            <summary>
            Returns the cross product of this vector and <paramref name="with"/>.
            </summary>
            <param name="with">The other vector.</param>
            <returns>The cross product value.</returns>
        </member>
        <member name="M:Godot.Vector2.CubicInterpolate(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors <paramref name="preA"/>, this vector,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector2.CubicInterpolateInTime(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors <paramref name="preA"/>, this vector,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            It can perform smoother interpolation than <see cref="M:Godot.Vector2.CubicInterpolate(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)"/>
            by the time values.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="t"></param>
            <param name="preAT"></param>
            <param name="postBT"></param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector2.BezierInterpolate(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            Returns the point at the given <paramref name="t"/> on a one-dimensional Bezier curve defined by this vector
            and the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination vector.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector2.BezierDerivative(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            Returns the derivative at the given <paramref name="t"/> on the Bezier curve defined by this vector
            and the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector2.DirectionTo(Godot.Vector2)">
            <summary>
            Returns the normalized vector pointing from this vector to <paramref name="to"/>.
            </summary>
            <param name="to">The other vector to point towards.</param>
            <returns>The direction from this vector to <paramref name="to"/>.</returns>
        </member>
        <member name="M:Godot.Vector2.DistanceSquaredTo(Godot.Vector2)">
            <summary>
            Returns the squared distance between this vector and <paramref name="to"/>.
            This method runs faster than <see cref="M:Godot.Vector2.DistanceTo(Godot.Vector2)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2.DistanceTo(Godot.Vector2)">
            <summary>
            Returns the distance between this vector and <paramref name="to"/>.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2.Dot(Godot.Vector2)">
            <summary>
            Returns the dot product of this vector and <paramref name="with"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2.Floor">
            <summary>
            Returns a new vector with all components rounded down (towards negative infinity).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Floor(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2.Inverse">
            <summary>
            Returns the inverse of this vector. This is the same as <c>new Vector2(1 / v.X, 1 / v.Y)</c>.
            </summary>
            <returns>The inverse of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.IsFinite">
            <summary>
            Returns <see langword="true"/> if this vector is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Vector2.IsNormalized">
            <summary>
            Returns <see langword="true"/> if the vector is normalized, and <see langword="false"/> otherwise.
            </summary>
            <returns>A <see langword="bool"/> indicating whether or not the vector is normalized.</returns>
        </member>
        <member name="M:Godot.Vector2.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <seealso cref="M:Godot.Vector2.LengthSquared"/>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector2.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Lerp(Godot.Vector2,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and <paramref name="to"/> by amount <paramref name="weight"/>.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector2.LimitLength(System.Single)">
            <summary>
            Returns the vector with a maximum length by limiting its length to <paramref name="length"/>.
            </summary>
            <param name="length">The length to limit to.</param>
            <returns>The vector with its length limited.</returns>
        </member>
        <member name="M:Godot.Vector2.Max(Godot.Vector2)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Max(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Max(System.Single)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Max(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Min(Godot.Vector2)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Min(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Min(System.Single)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Min(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector2.MaxAxisIndex">
            <summary>
            Returns the axis of the vector's highest value. See <see cref="T:Godot.Vector2.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2.Axis.X"/>.
            </summary>
            <returns>The index of the highest axis.</returns>
        </member>
        <member name="M:Godot.Vector2.MinAxisIndex">
            <summary>
            Returns the axis of the vector's lowest value. See <see cref="T:Godot.Vector2.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2.Axis.Y"/>.
            </summary>
            <returns>The index of the lowest axis.</returns>
        </member>
        <member name="M:Godot.Vector2.MoveToward(Godot.Vector2,System.Single)">
            <summary>
            Moves this vector toward <paramref name="to"/> by the fixed <paramref name="delta"/> amount.
            </summary>
            <param name="to">The vector to move towards.</param>
            <param name="delta">The amount to move towards by.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Normalized">
            <summary>
            Returns the vector scaled to unit length. Equivalent to <c>v / v.Length()</c>.
            </summary>
            <returns>A normalized version of the vector.</returns>
        </member>
        <member name="M:Godot.Vector2.PosMod(System.Single)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components
            and <paramref name="mod"/>.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>
            A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by <paramref name="mod"/>.
            </returns>
        </member>
        <member name="M:Godot.Vector2.PosMod(Godot.Vector2)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components
            and <paramref name="modv"/>'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>
            A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by <paramref name="modv"/>'s components.
            </returns>
        </member>
        <member name="M:Godot.Vector2.Project(Godot.Vector2)">
            <summary>
            Returns a new vector resulting from projecting this vector onto the given vector <paramref name="onNormal"/>.
            The resulting new vector is parallel to <paramref name="onNormal"/>.
            See also <see cref="M:Godot.Vector2.Slide(Godot.Vector2)"/>.
            Note: If the vector <paramref name="onNormal"/> is a zero vector, the components of the resulting
            new vector will be <see cref="F:System.Single.NaN"/>.
            </summary>
            <param name="onNormal">The vector to project onto.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Reflect(Godot.Vector2)">
            <summary>
            Returns this vector reflected from a plane defined by the given <paramref name="normal"/>.
            </summary>
            <param name="normal">The normal vector defining the plane to reflect from. Must be normalized.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Rotated(System.Single)">
            <summary>
            Rotates this vector by <paramref name="angle"/> radians.
            </summary>
            <param name="angle">The angle to rotate by, in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Round">
            <summary>
            Returns this vector with all components rounded to the nearest integer,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:System.Single.Sign(System.Single)"/> on each component.
            </summary>
            <returns>A vector with all components as either <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Vector2.Slerp(Godot.Vector2,System.Single)">
             <summary>
             Returns the result of the spherical linear interpolation between
             this vector and <paramref name="to"/> by amount <paramref name="weight"/>.
            
             This method also handles interpolating the lengths if the input vectors
             have different lengths. For the special case of one or both input vectors
             having zero length, this method behaves like <see cref="M:Godot.Vector2.Lerp(Godot.Vector2,System.Single)"/>.
             </summary>
             <param name="to">The destination vector for interpolation.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector2.Slide(Godot.Vector2)">
            <summary>
            Returns a new vector resulting from sliding this vector along a line with normal <paramref name="normal"/>.
            The resulting new vector is perpendicular to <paramref name="normal"/>, and is equivalent to this vector
            minus its projection on <paramref name="normal"/>.
            See also <see cref="M:Godot.Vector2.Project(Godot.Vector2)"/>.
            Note: The vector <paramref name="normal"/> must be normalized. See also <see cref="M:Godot.Vector2.Normalized"/>.
            </summary>
            <param name="normal">The normal vector of the plane to slide on.</param>
            <returns>The slid vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Snapped(Godot.Vector2)">
            <summary>
            Returns a new vector with each component snapped to the nearest multiple of the corresponding component
            in <paramref name="step"/>.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Snapped(System.Single)">
            <summary>
            Returns a new vector with each component snapped to the nearest multiple of <paramref name="step"/>.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector2.Orthogonal">
            <summary>
            Returns a perpendicular vector rotated 90 degrees counter-clockwise
            compared to the original, with the same length.
            </summary>
            <returns>The perpendicular vector.</returns>
        </member>
        <member name="P:Godot.Vector2.Zero">
            <summary>
            Zero vector, a vector with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Vector2(0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector2.One">
            <summary>
            One vector, a vector with all components set to <c>1</c>.
            </summary>
            <value>Equivalent to <c>new Vector2(1, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector2.Inf">
            <summary>
            Infinity vector, a vector with all components set to <see cref="F:Godot.Mathf.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector2(Mathf.Inf, Mathf.Inf)</c>.</value>
        </member>
        <member name="P:Godot.Vector2.Up">
            <summary>
            Up unit vector. Y is down in 2D, so this vector points -Y.
            </summary>
            <value>Equivalent to <c>new Vector2(0, -1)</c>.</value>
        </member>
        <member name="P:Godot.Vector2.Down">
            <summary>
            Down unit vector. Y is down in 2D, so this vector points +Y.
            </summary>
            <value>Equivalent to <c>new Vector2(0, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector2.Right">
            <summary>
            Right unit vector. Represents the direction of right.
            </summary>
            <value>Equivalent to <c>new Vector2(1, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector2.Left">
            <summary>
            Left unit vector. Represents the direction of left.
            </summary>
            <value>Equivalent to <c>new Vector2(-1, 0)</c>.</value>
        </member>
        <member name="M:Godot.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
        </member>
        <member name="M:Godot.Vector2.FromAngle(System.Single)">
            <summary>
            Creates a unit Vector2 rotated to the given angle. This is equivalent to doing
            <c>Vector2(Mathf.Cos(angle), Mathf.Sin(angle))</c> or <c>Vector2.Right.Rotated(angle)</c>.
            </summary>
            <param name="angle">Angle of the vector, in radians.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Addition(Godot.Vector2,Godot.Vector2)">
            <summary>
            Adds each component of the <see cref="T:Godot.Vector2"/>
            with the components of the given <see cref="T:Godot.Vector2"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The added vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Subtraction(Godot.Vector2,Godot.Vector2)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Vector2"/>
            by the components of the given <see cref="T:Godot.Vector2"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The subtracted vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_UnaryNegation(Godot.Vector2)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Vector2"/>.
            This is the same as writing <c>new Vector2(-v.X, -v.Y)</c>.
            This operation flips the direction of the vector while
            keeping the same magnitude.
            With floats, the number zero can be either positive or negative.
            </summary>
            <param name="vec">The vector to negate/flip.</param>
            <returns>The negated/flipped vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Multiply(Godot.Vector2,System.Single)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector2"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Multiply(System.Single,Godot.Vector2)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector2"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="scale">The scale to multiply by.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Multiply(Godot.Vector2,Godot.Vector2)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector2"/>
            by the components of the given <see cref="T:Godot.Vector2"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Division(Godot.Vector2,System.Single)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector2"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Division(Godot.Vector2,Godot.Vector2)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector2"/>
            by the components of the given <see cref="T:Godot.Vector2"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Modulus(Godot.Vector2,System.Single)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector2"/>
            with the components of the given <see cref="T:System.Single"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Vector2.PosMod(System.Single)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector2(10, -20) % 7); // Prints "(3, -6)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Modulus(Godot.Vector2,Godot.Vector2)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector2"/>
            with the components of the given <see cref="T:Godot.Vector2"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Vector2.PosMod(Godot.Vector2)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector2(10, -20) % new Vector2(7, 8)); // Prints "(3, -4)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Equality(Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns <see langword="true"/> if the vectors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are exactly equal.</returns>
        </member>
        <member name="M:Godot.Vector2.op_Inequality(Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns <see langword="true"/> if the vectors are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are not equal.</returns>
        </member>
        <member name="M:Godot.Vector2.op_LessThan(Godot.Vector2,Godot.Vector2)">
            <summary>
            Compares two <see cref="T:Godot.Vector2"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Vector2.op_GreaterThan(Godot.Vector2,Godot.Vector2)">
            <summary>
            Compares two <see cref="T:Godot.Vector2"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Vector2.op_LessThanOrEqual(Godot.Vector2,Godot.Vector2)">
            <summary>
            Compares two <see cref="T:Godot.Vector2"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector2.op_GreaterThanOrEqual(Godot.Vector2,Godot.Vector2)">
            <summary>
            Compares two <see cref="T:Godot.Vector2"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector2.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the vector is exactly equal
            to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Vector2.Equals(Godot.Vector2)">
            <summary>
            Returns <see langword="true"/> if the vectors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether or not the vectors are exactly equal.</returns>
        </member>
        <member name="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)">
            <summary>
            Returns <see langword="true"/> if this vector and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other vector to compare.</param>
            <returns>Whether or not the vectors are approximately equal.</returns>
        </member>
        <member name="M:Godot.Vector2.IsZeroApprox">
            <summary>
            Returns <see langword="true"/> if this vector's values are approximately zero,
            by running <see cref="M:Godot.Mathf.IsZeroApprox(System.Single)"/> on each component.
            This method is faster than using <see cref="M:Godot.Vector2.IsEqualApprox(Godot.Vector2)"/> with one value
            as a zero vector.
            </summary>
            <returns>Whether or not the vector is approximately zero.</returns>
        </member>
        <member name="M:Godot.Vector2.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Vector2"/>.
            </summary>
            <returns>A hash code for this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.ToString">
            <summary>
            Converts this <see cref="T:Godot.Vector2"/> to a string.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Vector2"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="T:Godot.Vector2I">
            <summary>
            2-element structure that can be used to represent 2D grid coordinates or pairs of integers.
            </summary>
        </member>
        <member name="T:Godot.Vector2I.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector2I.MaxAxisIndex"/> and <see cref="M:Godot.Vector2I.MinAxisIndex"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector2I.Axis.X">
            <summary>
            The vector's X axis.
            </summary>
        </member>
        <member name="F:Godot.Vector2I.Axis.Y">
            <summary>
            The vector's Y axis.
            </summary>
        </member>
        <member name="F:Godot.Vector2I.X">
            <summary>
            The vector's X component. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector2I.Y">
            <summary>
            The vector's Y component. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="P:Godot.Vector2I.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0 or 1.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Vector2I.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Vector2I.Y"/>.
            </value>
        </member>
        <member name="M:Godot.Vector2I.Deconstruct(System.Int32@,System.Int32@)">
            <summary>
            Helper method for deconstruction into a tuple.
            </summary>
        </member>
        <member name="M:Godot.Vector2I.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:System.Int32.Abs(System.Int32)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector2I.Aspect">
            <summary>
            Returns the aspect ratio of this vector, the ratio of <see cref="F:Godot.Vector2I.X"/> to <see cref="F:Godot.Vector2I.Y"/>.
            </summary>
            <returns>The <see cref="F:Godot.Vector2I.X"/> component divided by the <see cref="F:Godot.Vector2I.Y"/> component.</returns>
        </member>
        <member name="M:Godot.Vector2I.Clamp(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Returns a new vector with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Int32.Clamp(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="min">The vector with minimum allowed values.</param>
            <param name="max">The vector with maximum allowed values.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector2I.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns a new vector with all components clamped between the
            <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Int32.Clamp(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector2I.DistanceSquaredTo(Godot.Vector2I)">
            <summary>
            Returns the squared distance between this vector and <paramref name="to"/>.
            This method runs faster than <see cref="M:Godot.Vector2I.DistanceTo(Godot.Vector2I)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2I.DistanceTo(Godot.Vector2I)">
            <summary>
            Returns the distance between this vector and <paramref name="to"/>.
            </summary>
            <seealso cref="M:Godot.Vector2I.DistanceSquaredTo(Godot.Vector2I)"/>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector2I.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <seealso cref="M:Godot.Vector2I.LengthSquared"/>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector2I.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.Max(Godot.Vector2I)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Max(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.Max(System.Int32)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Max(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.Min(Godot.Vector2I)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Min(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.Min(System.Int32)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Min(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.MaxAxisIndex">
            <summary>
            Returns the axis of the vector's highest value. See <see cref="T:Godot.Vector2I.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2I.Axis.X"/>.
            </summary>
            <returns>The index of the highest axis.</returns>
        </member>
        <member name="M:Godot.Vector2I.MinAxisIndex">
            <summary>
            Returns the axis of the vector's lowest value. See <see cref="T:Godot.Vector2I.Axis"/>.
            If both components are equal, this method returns <see cref="F:Godot.Vector2I.Axis.Y"/>.
            </summary>
            <returns>The index of the lowest axis.</returns>
        </member>
        <member name="M:Godot.Vector2I.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:System.Int32.Sign(System.Int32)"/> on each component.
            </summary>
            <returns>A vector with all components as either <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Vector2I.Snapped(Godot.Vector2I)">
            <summary>
            Returns a new vector with each component snapped to the closest multiple of the corresponding component
            in <paramref name="step"/>.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.Snapped(System.Int32)">
            <summary>
            Returns a new vector with each component snapped to the closest multiple of <paramref name="step"/>.
            </summary>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="P:Godot.Vector2I.MinValue">
            <summary>
            Min vector, a vector with all components equal to <see cref="F:System.Int32.MinValue"/>. Can be used as a negative integer equivalent of <see cref="P:Godot.Vector2.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector2I(int.MinValue, int.MinValue)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.MaxValue">
            <summary>
            Max vector, a vector with all components equal to <see cref="F:System.Int32.MaxValue"/>. Can be used as an integer equivalent of <see cref="P:Godot.Vector2.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector2I(int.MaxValue, int.MaxValue)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.Zero">
            <summary>
            Zero vector, a vector with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Vector2I(0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.One">
            <summary>
            One vector, a vector with all components set to <c>1</c>.
            </summary>
            <value>Equivalent to <c>new Vector2I(1, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.Up">
            <summary>
            Up unit vector. Y is down in 2D, so this vector points -Y.
            </summary>
            <value>Equivalent to <c>new Vector2I(0, -1)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.Down">
            <summary>
            Down unit vector. Y is down in 2D, so this vector points +Y.
            </summary>
            <value>Equivalent to <c>new Vector2I(0, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.Right">
            <summary>
            Right unit vector. Represents the direction of right.
            </summary>
            <value>Equivalent to <c>new Vector2I(1, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector2I.Left">
            <summary>
            Left unit vector. Represents the direction of left.
            </summary>
            <value>Equivalent to <c>new Vector2I(-1, 0)</c>.</value>
        </member>
        <member name="M:Godot.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector2I"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
        </member>
        <member name="M:Godot.Vector2I.op_Addition(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Adds each component of the <see cref="T:Godot.Vector2I"/>
            with the components of the given <see cref="T:Godot.Vector2I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The added vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Subtraction(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Vector2I"/>
            by the components of the given <see cref="T:Godot.Vector2I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The subtracted vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_UnaryNegation(Godot.Vector2I)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Vector2I"/>.
            This is the same as writing <c>new Vector2I(-v.X, -v.Y)</c>.
            This operation flips the direction of the vector while
            keeping the same magnitude.
            </summary>
            <param name="vec">The vector to negate/flip.</param>
            <returns>The negated/flipped vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Multiply(Godot.Vector2I,System.Int32)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector2I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Multiply(System.Int32,Godot.Vector2I)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector2I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="scale">The scale to multiply by.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Multiply(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector2I"/>
            by the components of the given <see cref="T:Godot.Vector2I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Division(Godot.Vector2I,System.Int32)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector2I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Division(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector2I"/>
            by the components of the given <see cref="T:Godot.Vector2I"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Modulus(Godot.Vector2I,System.Int32)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector2I"/>
            with the components of the given <see langword="int"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector2I(10, -20) % 7); // Prints "(3, -6)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Modulus(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector2I"/>
            with the components of the given <see cref="T:Godot.Vector2I"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector2I(10, -20) % new Vector2I(7, 8)); // Prints "(3, -4)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Equality(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Returns <see langword="true"/> if the vectors are equal.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are equal.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Inequality(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Returns <see langword="true"/> if the vectors are not equal.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are not equal.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_LessThan(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Compares two <see cref="T:Godot.Vector2I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_GreaterThan(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Compares two <see cref="T:Godot.Vector2I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_LessThanOrEqual(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Compares two <see cref="T:Godot.Vector2I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_GreaterThanOrEqual(Godot.Vector2I,Godot.Vector2I)">
            <summary>
            Compares two <see cref="T:Godot.Vector2I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector2I.op_Implicit(Godot.Vector2I)~Godot.Vector2">
            <summary>
            Converts this <see cref="T:Godot.Vector2I"/> to a <see cref="T:Godot.Vector2"/>.
            </summary>
            <param name="value">The vector to convert.</param>
        </member>
        <member name="M:Godot.Vector2I.op_Explicit(Godot.Vector2)~Godot.Vector2I">
            <summary>
            Converts a <see cref="T:Godot.Vector2"/> to a <see cref="T:Godot.Vector2I"/> by truncating
            components' fractional parts (rounding towards zero). For a different
            behavior consider passing the result of <see cref="M:Godot.Vector2.Ceil"/>,
            <see cref="M:Godot.Vector2.Floor"/> or <see cref="M:Godot.Vector2.Round"/> to this conversion operator instead.
            </summary>
            <param name="value">The vector to convert.</param>
        </member>
        <member name="M:Godot.Vector2I.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the vector is equal
            to the given object (<paramref name="obj"/>).
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Vector2I.Equals(Godot.Vector2I)">
            <summary>
            Returns <see langword="true"/> if the vectors are equal.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether or not the vectors are equal.</returns>
        </member>
        <member name="M:Godot.Vector2I.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Vector2I"/>.
            </summary>
            <returns>A hash code for this vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.ToString">
            <summary>
            Converts this <see cref="T:Godot.Vector2I"/> to a string.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Vector2I.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Vector2I"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="T:Godot.Vector3">
            <summary>
            3-element structure that can be used to represent positions in 3D space or any other pair of numeric values.
            </summary>
        </member>
        <member name="T:Godot.Vector3.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector3.MaxAxisIndex"/> and <see cref="M:Godot.Vector3.MinAxisIndex"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector3.Axis.X">
            <summary>
            The vector's X axis.
            </summary>
        </member>
        <member name="F:Godot.Vector3.Axis.Y">
            <summary>
            The vector's Y axis.
            </summary>
        </member>
        <member name="F:Godot.Vector3.Axis.Z">
            <summary>
            The vector's Z axis.
            </summary>
        </member>
        <member name="F:Godot.Vector3.X">
            <summary>
            The vector's X component. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector3.Y">
            <summary>
            The vector's Y component. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector3.Z">
            <summary>
            The vector's Z component. Also accessible by using the index position <c>[2]</c>.
            </summary>
        </member>
        <member name="P:Godot.Vector3.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0, 1 or 2.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Vector3.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Vector3.Y"/>,
            <c>[2]</c> is equivalent to <see cref="F:Godot.Vector3.Z"/>.
            </value>
        </member>
        <member name="M:Godot.Vector3.Deconstruct(System.Single@,System.Single@,System.Single@)">
            <summary>
            Helper method for deconstruction into a tuple.
            </summary>
        </member>
        <member name="M:Godot.Vector3.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Abs(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3.AngleTo(Godot.Vector3)">
            <summary>
            Returns the unsigned minimum angle to the given vector, in radians.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <returns>The unsigned angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector3.Bounce(Godot.Vector3)">
            <summary>
            Returns this vector "bounced off" from a plane defined by the given normal.
            </summary>
            <param name="normal">The normal vector defining the plane to bounce off. Must be normalized.</param>
            <returns>The bounced vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Ceil">
            <summary>
            Returns a new vector with all components rounded up (towards positive infinity).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Ceiling(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3.Clamp(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns a new vector with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The vector with minimum allowed values.</param>
            <param name="max">The vector with maximum allowed values.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector3.Clamp(System.Single,System.Single)">
            <summary>
            Returns a new vector with all components clamped between the
            <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector3.Cross(Godot.Vector3)">
            <summary>
            Returns the cross product of this vector and <paramref name="with"/>.
            </summary>
            <param name="with">The other vector.</param>
            <returns>The cross product vector.</returns>
        </member>
        <member name="M:Godot.Vector3.CubicInterpolate(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors <paramref name="preA"/>, this vector,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector3.CubicInterpolateInTime(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors <paramref name="preA"/>, this vector,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            It can perform smoother interpolation than <see cref="M:Godot.Vector3.CubicInterpolate(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)"/>
            by the time values.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="t"></param>
            <param name="preAT"></param>
            <param name="postBT"></param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector3.BezierInterpolate(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            Returns the point at the given <paramref name="t"/> on a one-dimensional Bezier curve defined by this vector
            and the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination vector.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector3.BezierDerivative(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            Returns the derivative at the given <paramref name="t"/> on the Bezier curve defined by this vector
            and the given <paramref name="control1"/>, <paramref name="control2"/>, and <paramref name="end"/> points.
            </summary>
            <param name="control1">Control point that defines the bezier curve.</param>
            <param name="control2">Control point that defines the bezier curve.</param>
            <param name="end">The destination value for the interpolation.</param>
            <param name="t">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting value of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector3.DirectionTo(Godot.Vector3)">
            <summary>
            Returns the normalized vector pointing from this vector to <paramref name="to"/>.
            </summary>
            <param name="to">The other vector to point towards.</param>
            <returns>The direction from this vector to <paramref name="to"/>.</returns>
        </member>
        <member name="M:Godot.Vector3.DistanceSquaredTo(Godot.Vector3)">
            <summary>
            Returns the squared distance between this vector and <paramref name="to"/>.
            This method runs faster than <see cref="M:Godot.Vector3.DistanceTo(Godot.Vector3)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3.DistanceTo(Godot.Vector3)">
            <summary>
            Returns the distance between this vector and <paramref name="to"/>.
            </summary>
            <seealso cref="M:Godot.Vector3.DistanceSquaredTo(Godot.Vector3)"/>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3.Dot(Godot.Vector3)">
            <summary>
            Returns the dot product of this vector and <paramref name="with"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3.Floor">
            <summary>
            Returns a new vector with all components rounded down (towards negative infinity).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Floor(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3.Inverse">
            <summary>
            Returns the inverse of this vector. This is the same as <c>new Vector3(1 / v.X, 1 / v.Y, 1 / v.Z)</c>.
            </summary>
            <returns>The inverse of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.IsFinite">
            <summary>
            Returns <see langword="true"/> if this vector is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Vector3.IsNormalized">
            <summary>
            Returns <see langword="true"/> if the vector is normalized, and <see langword="false"/> otherwise.
            </summary>
            <returns>A <see langword="bool"/> indicating whether or not the vector is normalized.</returns>
        </member>
        <member name="M:Godot.Vector3.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <seealso cref="M:Godot.Vector3.LengthSquared"/>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector3.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Lerp(Godot.Vector3,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and <paramref name="to"/> by amount <paramref name="weight"/>.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector3.LimitLength(System.Single)">
            <summary>
            Returns the vector with a maximum length by limiting its length to <paramref name="length"/>.
            </summary>
            <param name="length">The length to limit to.</param>
            <returns>The vector with its length limited.</returns>
        </member>
        <member name="M:Godot.Vector3.Max(Godot.Vector3)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Max(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Max(System.Single)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Max(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Min(Godot.Vector3)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Min(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Min(System.Single)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Min(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector3.MaxAxisIndex">
            <summary>
            Returns the axis of the vector's highest value. See <see cref="T:Godot.Vector3.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3.Axis.X"/>.
            </summary>
            <returns>The index of the highest axis.</returns>
        </member>
        <member name="M:Godot.Vector3.MinAxisIndex">
            <summary>
            Returns the axis of the vector's lowest value. See <see cref="T:Godot.Vector3.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3.Axis.Z"/>.
            </summary>
            <returns>The index of the lowest axis.</returns>
        </member>
        <member name="M:Godot.Vector3.MoveToward(Godot.Vector3,System.Single)">
            <summary>
            Moves this vector toward <paramref name="to"/> by the fixed <paramref name="delta"/> amount.
            </summary>
            <param name="to">The vector to move towards.</param>
            <param name="delta">The amount to move towards by.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Normalized">
            <summary>
            Returns the vector scaled to unit length. Equivalent to <c>v / v.Length()</c>.
            </summary>
            <returns>A normalized version of the vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Outer(Godot.Vector3)">
            <summary>
            Returns the outer product with <paramref name="with"/>.
            </summary>
            <param name="with">The other vector.</param>
            <returns>A <see cref="T:Godot.Basis"/> representing the outer product matrix.</returns>
        </member>
        <member name="M:Godot.Vector3.PosMod(System.Single)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components
            and <paramref name="mod"/>.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>
            A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by <paramref name="mod"/>.
            </returns>
        </member>
        <member name="M:Godot.Vector3.PosMod(Godot.Vector3)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components
            and <paramref name="modv"/>'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>
            A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by <paramref name="modv"/>'s components.
            </returns>
        </member>
        <member name="M:Godot.Vector3.Project(Godot.Vector3)">
            <summary>
            Returns a new vector resulting from projecting this vector onto the given vector <paramref name="onNormal"/>.
            The resulting new vector is parallel to <paramref name="onNormal"/>.
            See also <see cref="M:Godot.Vector3.Slide(Godot.Vector3)"/>.
            Note: If the vector <paramref name="onNormal"/> is a zero vector, the components of the resulting
            new vector will be <see cref="F:System.Single.NaN"/>.
            </summary>
            <param name="onNormal">The vector to project onto.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Reflect(Godot.Vector3)">
            <summary>
            Returns this vector reflected from a plane defined by the given <paramref name="normal"/>.
            </summary>
            <param name="normal">The normal vector defining the plane to reflect from. Must be normalized.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Rotated(Godot.Vector3,System.Single)">
            <summary>
            Rotates this vector around a given <paramref name="axis"/> vector by <paramref name="angle"/> (in radians).
            The <paramref name="axis"/> vector must be a normalized vector.
            </summary>
            <param name="axis">The vector to rotate around. Must be normalized.</param>
            <param name="angle">The angle to rotate by, in radians.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Round">
            <summary>
            Returns this vector with all components rounded to the nearest integer,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:System.Single.Sign(System.Single)"/> on each component.
            </summary>
            <returns>A vector with all components as either <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Vector3.SignedAngleTo(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the signed angle to the given vector, in radians.
            The sign of the angle is positive in a counter-clockwise
            direction and negative in a clockwise direction when viewed
            from the side specified by the <paramref name="axis"/>.
            </summary>
            <param name="to">The other vector to compare this vector to.</param>
            <param name="axis">The reference axis to use for the angle sign.</param>
            <returns>The signed angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:Godot.Vector3.Slerp(Godot.Vector3,System.Single)">
             <summary>
             Returns the result of the spherical linear interpolation between
             this vector and <paramref name="to"/> by amount <paramref name="weight"/>.
            
             This method also handles interpolating the lengths if the input vectors
             have different lengths. For the special case of one or both input vectors
             having zero length, this method behaves like <see cref="M:Godot.Vector3.Lerp(Godot.Vector3,System.Single)"/>.
             </summary>
             <param name="to">The destination vector for interpolation.</param>
             <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
             <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector3.Slide(Godot.Vector3)">
            <summary>
            Returns a new vector resulting from sliding this vector along a plane with normal <paramref name="normal"/>.
            The resulting new vector is perpendicular to <paramref name="normal"/>, and is equivalent to this vector
            minus its projection on <paramref name="normal"/>.
            See also <see cref="M:Godot.Vector3.Project(Godot.Vector3)"/>.
            Note: The vector <paramref name="normal"/> must be normalized. See also <see cref="M:Godot.Vector3.Normalized"/>.
            </summary>
            <param name="normal">The normal vector of the plane to slide on.</param>
            <returns>The slid vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Snapped(Godot.Vector3)">
            <summary>
            Returns a new vector with each component snapped to the nearest multiple of the corresponding component
            in <paramref name="step"/>.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector3.Snapped(System.Single)">
            <summary>
            Returns a new vector with each component snapped to the nearest multiple of <paramref name="step"/>.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector3.OctahedronEncode">
            <summary>
            Returns the octahedral-encoded (oct32) form of this Vector3 as a Vector2.
            Since a Vector2 occupies 1/3 less memory compared to Vector3, this form of compression can be used
            to pass greater amounts of normalized Vector3s without increasing storage or memory requirements.
            See also <see cref="M:Godot.Vector3.Normalized"/>, <see cref="M:Godot.Vector3.OctahedronDecode(Godot.Vector2)"/>.
            Note: OctahedronEncode can only be used for normalized vectors. OctahedronEncode does not check
            whether this Vector3 is normalized, and will return a value that does not decompress to the original
            value if the Vector3 is not normalized.
            Note: Octahedral compression is lossy, although visual differences are rarely perceptible in real world
            scenarios.
            </summary>
            <returns>The encoded Vector2.</returns>
        </member>
        <member name="M:Godot.Vector3.OctahedronDecode(Godot.Vector2)">
            <summary>
            Returns the Vector3 from an octahedral-compressed form created using <see cref="M:Godot.Vector3.OctahedronEncode"/>
            (stored as a Vector2).
            </summary>
            <param name="oct">Encoded Vector2</param>
            <returns>The decoded normalized Vector3.</returns>
        </member>
        <member name="P:Godot.Vector3.Zero">
            <summary>
            Zero vector, a vector with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Vector3(0, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.One">
            <summary>
            One vector, a vector with all components set to <c>1</c>.
            </summary>
            <value>Equivalent to <c>new Vector3(1, 1, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Inf">
            <summary>
            Infinity vector, a vector with all components set to <see cref="F:Godot.Mathf.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector3(Mathf.Inf, Mathf.Inf, Mathf.Inf)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Up">
            <summary>
            Up unit vector.
            </summary>
            <value>Equivalent to <c>new Vector3(0, 1, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Down">
            <summary>
            Down unit vector.
            </summary>
            <value>Equivalent to <c>new Vector3(0, -1, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Right">
            <summary>
            Right unit vector. Represents the local direction of right,
            and the global direction of east.
            </summary>
            <value>Equivalent to <c>new Vector3(1, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Left">
            <summary>
            Left unit vector. Represents the local direction of left,
            and the global direction of west.
            </summary>
            <value>Equivalent to <c>new Vector3(-1, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Forward">
            <summary>
            Forward unit vector. Represents the local direction of forward,
            and the global direction of north.
            </summary>
            <value>Equivalent to <c>new Vector3(0, 0, -1)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.Back">
            <summary>
            Back unit vector. Represents the local direction of back,
            and the global direction of south.
            </summary>
            <value>Equivalent to <c>new Vector3(0, 0, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector3.ModelLeft">
            <summary>
            Unit vector pointing towards the left side of imported 3D assets.
            </summary>
        </member>
        <member name="P:Godot.Vector3.ModelRight">
            <summary>
            Unit vector pointing towards the right side of imported 3D assets.
            </summary>
        </member>
        <member name="P:Godot.Vector3.ModelTop">
            <summary>
            Unit vector pointing towards the top side (up) of imported 3D assets.
            </summary>
        </member>
        <member name="P:Godot.Vector3.ModelBottom">
            <summary>
            Unit vector pointing towards the bottom side (down) of imported 3D assets.
            </summary>
        </member>
        <member name="P:Godot.Vector3.ModelFront">
            <summary>
            Unit vector pointing towards the front side (facing forward) of imported 3D assets.
            </summary>
        </member>
        <member name="P:Godot.Vector3.ModelRear">
            <summary>
            Unit vector pointing towards the rear side (back) of imported 3D assets.
            </summary>
        </member>
        <member name="M:Godot.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
            <param name="z">The vector's Z component.</param>
        </member>
        <member name="M:Godot.Vector3.op_Addition(Godot.Vector3,Godot.Vector3)">
            <summary>
            Adds each component of the <see cref="T:Godot.Vector3"/>
            with the components of the given <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The added vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Subtraction(Godot.Vector3,Godot.Vector3)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Vector3"/>
            by the components of the given <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The subtracted vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_UnaryNegation(Godot.Vector3)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Vector3"/>.
            This is the same as writing <c>new Vector3(-v.X, -v.Y, -v.Z)</c>.
            This operation flips the direction of the vector while
            keeping the same magnitude.
            With floats, the number zero can be either positive or negative.
            </summary>
            <param name="vec">The vector to negate/flip.</param>
            <returns>The negated/flipped vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Multiply(Godot.Vector3,System.Single)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector3"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Multiply(System.Single,Godot.Vector3)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector3"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="scale">The scale to multiply by.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Multiply(Godot.Vector3,Godot.Vector3)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector3"/>
            by the components of the given <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Division(Godot.Vector3,System.Single)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector3"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Division(Godot.Vector3,Godot.Vector3)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector3"/>
            by the components of the given <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Modulus(Godot.Vector3,System.Single)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector3"/>
            with the components of the given <see cref="T:System.Single"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Vector3.PosMod(System.Single)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector3(10, -20, 30) % 7); // Prints "(3, -6, 2)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Modulus(Godot.Vector3,Godot.Vector3)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector3"/>
            with the components of the given <see cref="T:Godot.Vector3"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Vector3.PosMod(Godot.Vector3)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector3(10, -20, 30) % new Vector3(7, 8, 9)); // Prints "(3, -4, 3)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Equality(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if the vectors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are exactly equal.</returns>
        </member>
        <member name="M:Godot.Vector3.op_Inequality(Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if the vectors are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are not equal.</returns>
        </member>
        <member name="M:Godot.Vector3.op_LessThan(Godot.Vector3,Godot.Vector3)">
            <summary>
            Compares two <see cref="T:Godot.Vector3"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Vector3.op_GreaterThan(Godot.Vector3,Godot.Vector3)">
            <summary>
            Compares two <see cref="T:Godot.Vector3"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Vector3.op_LessThanOrEqual(Godot.Vector3,Godot.Vector3)">
            <summary>
            Compares two <see cref="T:Godot.Vector3"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector3.op_GreaterThanOrEqual(Godot.Vector3,Godot.Vector3)">
            <summary>
            Compares two <see cref="T:Godot.Vector3"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector3.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the vector is exactly equal
            to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Vector3.Equals(Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if the vectors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether or not the vectors are exactly equal.</returns>
        </member>
        <member name="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)">
            <summary>
            Returns <see langword="true"/> if this vector and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other vector to compare.</param>
            <returns>Whether or not the vectors are approximately equal.</returns>
        </member>
        <member name="M:Godot.Vector3.IsZeroApprox">
            <summary>
            Returns <see langword="true"/> if this vector's values are approximately zero,
            by running <see cref="M:Godot.Mathf.IsZeroApprox(System.Single)"/> on each component.
            This method is faster than using <see cref="M:Godot.Vector3.IsEqualApprox(Godot.Vector3)"/> with one value
            as a zero vector.
            </summary>
            <returns>Whether or not the vector is approximately zero.</returns>
        </member>
        <member name="M:Godot.Vector3.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Vector3"/>.
            </summary>
            <returns>A hash code for this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.ToString">
            <summary>
            Converts this <see cref="T:Godot.Vector3"/> to a string.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Vector3"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="T:Godot.Vector3I">
            <summary>
            3-element structure that can be used to represent 3D grid coordinates or sets of integers.
            </summary>
        </member>
        <member name="T:Godot.Vector3I.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector3I.MaxAxisIndex"/> and <see cref="M:Godot.Vector3I.MinAxisIndex"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector3I.Axis.X">
            <summary>
            The vector's X axis.
            </summary>
        </member>
        <member name="F:Godot.Vector3I.Axis.Y">
            <summary>
            The vector's Y axis.
            </summary>
        </member>
        <member name="F:Godot.Vector3I.Axis.Z">
            <summary>
            The vector's Z axis.
            </summary>
        </member>
        <member name="F:Godot.Vector3I.X">
            <summary>
            The vector's X component. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector3I.Y">
            <summary>
            The vector's Y component. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector3I.Z">
            <summary>
            The vector's Z component. Also accessible by using the index position <c>[2]</c>.
            </summary>
        </member>
        <member name="P:Godot.Vector3I.Item(System.Int32)">
            <summary>
            Access vector components using their <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0, 1 or 2.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Vector3I.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Vector3I.Y"/>,
            <c>[2]</c> is equivalent to <see cref="F:Godot.Vector3I.Z"/>.
            </value>
        </member>
        <member name="M:Godot.Vector3I.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Helper method for deconstruction into a tuple.
            </summary>
        </member>
        <member name="M:Godot.Vector3I.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:System.Int32.Abs(System.Int32)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector3I.Clamp(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Returns a new vector with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Int32.Clamp(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="min">The vector with minimum allowed values.</param>
            <param name="max">The vector with maximum allowed values.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector3I.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns a new vector with all components clamped between the
            <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Int32.Clamp(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector3I.DistanceSquaredTo(Godot.Vector3I)">
            <summary>
            Returns the squared distance between this vector and <paramref name="to"/>.
            This method runs faster than <see cref="M:Godot.Vector3I.DistanceTo(Godot.Vector3I)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3I.DistanceTo(Godot.Vector3I)">
            <summary>
            Returns the distance between this vector and <paramref name="to"/>.
            </summary>
            <seealso cref="M:Godot.Vector3I.DistanceSquaredTo(Godot.Vector3I)"/>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector3I.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <seealso cref="M:Godot.Vector3I.LengthSquared"/>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector3I.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.Max(Godot.Vector3I)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Max(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.Max(System.Int32)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Max(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.Min(Godot.Vector3I)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Min(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.Min(System.Int32)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Min(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.MaxAxisIndex">
            <summary>
            Returns the axis of the vector's highest value. See <see cref="T:Godot.Vector3I.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3I.Axis.X"/>.
            </summary>
            <returns>The index of the highest axis.</returns>
        </member>
        <member name="M:Godot.Vector3I.MinAxisIndex">
            <summary>
            Returns the axis of the vector's lowest value. See <see cref="T:Godot.Vector3I.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector3I.Axis.Z"/>.
            </summary>
            <returns>The index of the lowest axis.</returns>
        </member>
        <member name="M:Godot.Vector3I.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:System.Int32.Sign(System.Int32)"/> on each component.
            </summary>
            <returns>A vector with all components as either <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Vector3I.Snapped(Godot.Vector3I)">
            <summary>
            Returns a new vector with each component snapped to the closest multiple of the corresponding component in <paramref name="step"/>.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.Snapped(System.Int32)">
            <summary>
            Returns a new vector with each component snapped to the closest multiple of <paramref name="step"/>.
            </summary>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="P:Godot.Vector3I.MinValue">
            <summary>
            Min vector, a vector with all components equal to <see cref="F:System.Int32.MinValue"/>. Can be used as a negative integer equivalent of <see cref="P:Godot.Vector3.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector3I(int.MinValue, int.MinValue, int.MinValue)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.MaxValue">
            <summary>
            Max vector, a vector with all components equal to <see cref="F:System.Int32.MaxValue"/>. Can be used as an integer equivalent of <see cref="P:Godot.Vector3.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector3I(int.MaxValue, int.MaxValue, int.MaxValue)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Zero">
            <summary>
            Zero vector, a vector with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Vector3I(0, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.One">
            <summary>
            One vector, a vector with all components set to <c>1</c>.
            </summary>
            <value>Equivalent to <c>new Vector3I(1, 1, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Up">
            <summary>
            Up unit vector.
            </summary>
            <value>Equivalent to <c>new Vector3I(0, 1, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Down">
            <summary>
            Down unit vector.
            </summary>
            <value>Equivalent to <c>new Vector3I(0, -1, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Right">
            <summary>
            Right unit vector. Represents the local direction of right,
            and the global direction of east.
            </summary>
            <value>Equivalent to <c>new Vector3I(1, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Left">
            <summary>
            Left unit vector. Represents the local direction of left,
            and the global direction of west.
            </summary>
            <value>Equivalent to <c>new Vector3I(-1, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Forward">
            <summary>
            Forward unit vector. Represents the local direction of forward,
            and the global direction of north.
            </summary>
            <value>Equivalent to <c>new Vector3I(0, 0, -1)</c>.</value>
        </member>
        <member name="P:Godot.Vector3I.Back">
            <summary>
            Back unit vector. Represents the local direction of back,
            and the global direction of south.
            </summary>
            <value>Equivalent to <c>new Vector3I(0, 0, 1)</c>.</value>
        </member>
        <member name="M:Godot.Vector3I.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector3I"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
            <param name="z">The vector's Z component.</param>
        </member>
        <member name="M:Godot.Vector3I.op_Addition(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Adds each component of the <see cref="T:Godot.Vector3I"/>
            with the components of the given <see cref="T:Godot.Vector3I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The added vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Subtraction(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Vector3I"/>
            by the components of the given <see cref="T:Godot.Vector3I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The subtracted vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_UnaryNegation(Godot.Vector3I)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Vector3I"/>.
            This is the same as writing <c>new Vector3I(-v.X, -v.Y, -v.Z)</c>.
            This operation flips the direction of the vector while
            keeping the same magnitude.
            </summary>
            <param name="vec">The vector to negate/flip.</param>
            <returns>The negated/flipped vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Multiply(Godot.Vector3I,System.Int32)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector3I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Multiply(System.Int32,Godot.Vector3I)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector3I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="scale">The scale to multiply by.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Multiply(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector3I"/>
            by the components of the given <see cref="T:Godot.Vector3I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Division(Godot.Vector3I,System.Int32)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector3I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Division(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector3I"/>
            by the components of the given <see cref="T:Godot.Vector3I"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Modulus(Godot.Vector3I,System.Int32)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector3I"/>
            with the components of the given <see langword="int"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector3I(10, -20, 30) % 7); // Prints "(3, -6, 2)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Modulus(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector3I"/>
            with the components of the given <see cref="T:Godot.Vector3I"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector3I(10, -20, 30) % new Vector3I(7, 8, 9)); // Prints "(3, -4, 3)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Equality(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Returns <see langword="true"/> if the vectors are equal.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are equal.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Inequality(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Returns <see langword="true"/> if the vectors are not equal.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are not equal.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_LessThan(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Compares two <see cref="T:Godot.Vector3I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_GreaterThan(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Compares two <see cref="T:Godot.Vector3I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_LessThanOrEqual(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Compares two <see cref="T:Godot.Vector3I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_GreaterThanOrEqual(Godot.Vector3I,Godot.Vector3I)">
            <summary>
            Compares two <see cref="T:Godot.Vector3I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y values of the two vectors, and then with the Z values.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector3I.op_Implicit(Godot.Vector3I)~Godot.Vector3">
            <summary>
            Converts this <see cref="T:Godot.Vector3I"/> to a <see cref="T:Godot.Vector3"/>.
            </summary>
            <param name="value">The vector to convert.</param>
        </member>
        <member name="M:Godot.Vector3I.op_Explicit(Godot.Vector3)~Godot.Vector3I">
            <summary>
            Converts a <see cref="T:Godot.Vector3"/> to a <see cref="T:Godot.Vector3I"/> by truncating
            components' fractional parts (rounding towards zero). For a different
            behavior consider passing the result of <see cref="M:Godot.Vector3.Ceil"/>,
            <see cref="M:Godot.Vector3.Floor"/> or <see cref="M:Godot.Vector3.Round"/> to this conversion operator instead.
            </summary>
            <param name="value">The vector to convert.</param>
        </member>
        <member name="M:Godot.Vector3I.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the vector is equal
            to the given object (<paramref name="obj"/>).
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Vector3I.Equals(Godot.Vector3I)">
            <summary>
            Returns <see langword="true"/> if the vectors are equal.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether or not the vectors are equal.</returns>
        </member>
        <member name="M:Godot.Vector3I.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Vector3I"/>.
            </summary>
            <returns>A hash code for this vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.ToString">
            <summary>
            Converts this <see cref="T:Godot.Vector3I"/> to a string.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Vector3I.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Vector3I"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="T:Godot.Vector4">
            <summary>
            4-element structure that can be used to represent positions in 4D space or any other pair of numeric values.
            </summary>
        </member>
        <member name="T:Godot.Vector4.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector4.MaxAxisIndex"/> and <see cref="M:Godot.Vector4.MinAxisIndex"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector4.Axis.X">
            <summary>
            The vector's X axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4.Axis.Y">
            <summary>
            The vector's Y axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4.Axis.Z">
            <summary>
            The vector's Z axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4.Axis.W">
            <summary>
            The vector's W axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4.X">
            <summary>
            The vector's X component. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector4.Y">
            <summary>
            The vector's Y component. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector4.Z">
            <summary>
            The vector's Z component. Also accessible by using the index position <c>[2]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector4.W">
            <summary>
            The vector's W component. Also accessible by using the index position <c>[3]</c>.
            </summary>
        </member>
        <member name="P:Godot.Vector4.Item(System.Int32)">
            <summary>
            Access vector components using their index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0, 1, 2 or 3.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Vector4.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Vector4.Y"/>,
            <c>[2]</c> is equivalent to <see cref="F:Godot.Vector4.Z"/>.
            <c>[3]</c> is equivalent to <see cref="F:Godot.Vector4.W"/>.
            </value>
        </member>
        <member name="M:Godot.Vector4.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Helper method for deconstruction into a tuple.
            </summary>
        </member>
        <member name="M:Godot.Vector4.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Abs(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector4.Ceil">
            <summary>
            Returns a new vector with all components rounded up (towards positive infinity).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Ceiling(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector4.Clamp(Godot.Vector4,Godot.Vector4)">
            <summary>
            Returns a new vector with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The vector with minimum allowed values.</param>
            <param name="max">The vector with maximum allowed values.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector4.Clamp(System.Single,System.Single)">
            <summary>
            Returns a new vector with all components clamped between the
            <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Single.Clamp(System.Single,System.Single,System.Single)"/>.
            </summary>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector4.CubicInterpolate(Godot.Vector4,Godot.Vector4,Godot.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors <paramref name="preA"/>, this vector,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector4.CubicInterpolateInTime(Godot.Vector4,Godot.Vector4,Godot.Vector4,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation between vectors <paramref name="preA"/>, this vector,
            <paramref name="b"/>, and <paramref name="postB"/>, by the given amount <paramref name="weight"/>.
            It can perform smoother interpolation than <see cref="M:Godot.Vector4.CubicInterpolate(Godot.Vector4,Godot.Vector4,Godot.Vector4,System.Single)"/>
            by the time values.
            </summary>
            <param name="b">The destination vector.</param>
            <param name="preA">A vector before this vector.</param>
            <param name="postB">A vector after <paramref name="b"/>.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <param name="t"></param>
            <param name="preAT"></param>
            <param name="postBT"></param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Godot.Vector4.DirectionTo(Godot.Vector4)">
            <summary>
            Returns the normalized vector pointing from this vector to <paramref name="to"/>.
            </summary>
            <param name="to">The other vector to point towards.</param>
            <returns>The direction from this vector to <paramref name="to"/>.</returns>
        </member>
        <member name="M:Godot.Vector4.DistanceSquaredTo(Godot.Vector4)">
            <summary>
            Returns the squared distance between this vector and <paramref name="to"/>.
            This method runs faster than <see cref="M:Godot.Vector4.DistanceTo(Godot.Vector4)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector4.DistanceTo(Godot.Vector4)">
            <summary>
            Returns the distance between this vector and <paramref name="to"/>.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector4.Dot(Godot.Vector4)">
            <summary>
            Returns the dot product of this vector and <paramref name="with"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector4.Floor">
            <summary>
            Returns a new vector with all components rounded down (towards negative infinity).
            </summary>
            <returns>A vector with <see cref="M:System.Single.Floor(System.Single)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector4.Inverse">
            <summary>
            Returns the inverse of this vector. This is the same as <c>new Vector4(1 / v.X, 1 / v.Y, 1 / v.Z, 1 / v.W)</c>.
            </summary>
            <returns>The inverse of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4.IsFinite">
            <summary>
            Returns <see langword="true"/> if this vector is finite, by calling
            <see cref="M:System.Single.IsFinite(System.Single)"/> on each component.
            </summary>
            <returns>Whether this vector is finite or not.</returns>
        </member>
        <member name="M:Godot.Vector4.IsNormalized">
            <summary>
            Returns <see langword="true"/> if the vector is normalized, and <see langword="false"/> otherwise.
            </summary>
            <returns>A <see langword="bool"/> indicating whether or not the vector is normalized.</returns>
        </member>
        <member name="M:Godot.Vector4.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <seealso cref="M:Godot.Vector4.LengthSquared"/>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector4.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4.Lerp(Godot.Vector4,System.Single)">
            <summary>
            Returns the result of the linear interpolation between
            this vector and <paramref name="to"/> by amount <paramref name="weight"/>.
            </summary>
            <param name="to">The destination vector for interpolation.</param>
            <param name="weight">A value on the range of 0.0 to 1.0, representing the amount of interpolation.</param>
            <returns>The resulting vector of the interpolation.</returns>
        </member>
        <member name="M:Godot.Vector4.Max(Godot.Vector4)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Max(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector4.Max(System.Single)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Max(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector4.Min(Godot.Vector4)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Min(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector4.Min(System.Single)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Single.Min(System.Single,System.Single)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector4.MaxAxisIndex">
            <summary>
            Returns the axis of the vector's highest value. See <see cref="T:Godot.Vector4.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector4.Axis.X"/>.
            </summary>
            <returns>The index of the highest axis.</returns>
        </member>
        <member name="M:Godot.Vector4.MinAxisIndex">
            <summary>
            Returns the axis of the vector's lowest value. See <see cref="T:Godot.Vector4.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector4.Axis.W"/>.
            </summary>
            <returns>The index of the lowest axis.</returns>
        </member>
        <member name="M:Godot.Vector4.Normalized">
            <summary>
            Returns the vector scaled to unit length. Equivalent to <c>v / v.Length()</c>.
            </summary>
            <returns>A normalized version of the vector.</returns>
        </member>
        <member name="M:Godot.Vector4.PosMod(System.Single)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components
            and <paramref name="mod"/>.
            </summary>
            <param name="mod">A value representing the divisor of the operation.</param>
            <returns>
            A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by <paramref name="mod"/>.
            </returns>
        </member>
        <member name="M:Godot.Vector4.PosMod(Godot.Vector4)">
            <summary>
            Returns a vector composed of the <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> of this vector's components
            and <paramref name="modv"/>'s components.
            </summary>
            <param name="modv">A vector representing the divisors of the operation.</param>
            <returns>
            A vector with each component <see cref="M:Godot.Mathf.PosMod(System.Single,System.Single)"/> by <paramref name="modv"/>'s components.
            </returns>
        </member>
        <member name="M:Godot.Vector4.Round">
            <summary>
            Returns this vector with all components rounded to the nearest integer,
            with halfway cases rounded towards the nearest multiple of two.
            </summary>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:Godot.Vector4.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:System.Single.Sign(System.Single)"/> on each component.
            </summary>
            <returns>A vector with all components as either <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Vector4.Snapped(Godot.Vector4)">
            <summary>
            Returns a new vector with each component snapped to the nearest multiple of the corresponding component
            in <paramref name="step"/>.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector4.Snapped(System.Single)">
            <summary>
            Returns a new vector with each component snapped to the nearest multiple of <paramref name="step"/>.
            This can also be used to round to an arbitrary number of decimals.
            </summary>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="P:Godot.Vector4.Zero">
            <summary>
            Zero vector, a vector with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Vector4(0, 0, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector4.One">
            <summary>
            One vector, a vector with all components set to <c>1</c>.
            </summary>
            <value>Equivalent to <c>new Vector4(1, 1, 1, 1)</c>.</value>
        </member>
        <member name="P:Godot.Vector4.Inf">
            <summary>
            Infinity vector, a vector with all components set to <see cref="F:Godot.Mathf.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector4(Mathf.Inf, Mathf.Inf, Mathf.Inf, Mathf.Inf)</c>.</value>
        </member>
        <member name="M:Godot.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector4"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
            <param name="z">The vector's Z component.</param>
            <param name="w">The vector's W component.</param>
        </member>
        <member name="M:Godot.Vector4.op_Addition(Godot.Vector4,Godot.Vector4)">
            <summary>
            Adds each component of the <see cref="T:Godot.Vector4"/>
            with the components of the given <see cref="T:Godot.Vector4"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The added vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Subtraction(Godot.Vector4,Godot.Vector4)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Vector4"/>
            by the components of the given <see cref="T:Godot.Vector4"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The subtracted vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_UnaryNegation(Godot.Vector4)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Vector4"/>.
            This is the same as writing <c>new Vector4(-v.X, -v.Y, -v.Z, -v.W)</c>.
            This operation flips the direction of the vector while
            keeping the same magnitude.
            With floats, the number zero can be either positive or negative.
            </summary>
            <param name="vec">The vector to negate/flip.</param>
            <returns>The negated/flipped vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Multiply(Godot.Vector4,System.Single)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector4"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Multiply(System.Single,Godot.Vector4)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector4"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="scale">The scale to multiply by.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Multiply(Godot.Vector4,Godot.Vector4)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector4"/>
            by the components of the given <see cref="T:Godot.Vector4"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Division(Godot.Vector4,System.Single)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector4"/>
            by the given <see cref="T:System.Single"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Division(Godot.Vector4,Godot.Vector4)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector4"/>
            by the components of the given <see cref="T:Godot.Vector4"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Modulus(Godot.Vector4,System.Single)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector4"/>
            with the components of the given <see cref="T:System.Single"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Vector4.PosMod(System.Single)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector4(10, -20, 30, 40) % 7); // Prints "(3, -6, 2, 5)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Modulus(Godot.Vector4,Godot.Vector4)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector4"/>
            with the components of the given <see cref="T:Godot.Vector4"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Vector4.PosMod(Godot.Vector4)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector4(10, -20, 30, 10) % new Vector4(7, 8, 9, 10)); // Prints "(3, -4, 3, 0)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Equality(Godot.Vector4,Godot.Vector4)">
            <summary>
            Returns <see langword="true"/> if the vectors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector4.IsEqualApprox(Godot.Vector4)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are exactly equal.</returns>
        </member>
        <member name="M:Godot.Vector4.op_Inequality(Godot.Vector4,Godot.Vector4)">
            <summary>
            Returns <see langword="true"/> if the vectors are not equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector4.IsEqualApprox(Godot.Vector4)"/> instead, which is more reliable.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are not equal.</returns>
        </member>
        <member name="M:Godot.Vector4.op_LessThan(Godot.Vector4,Godot.Vector4)">
            <summary>
            Compares two <see cref="T:Godot.Vector4"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Vector4.op_GreaterThan(Godot.Vector4,Godot.Vector4)">
            <summary>
            Compares two <see cref="T:Godot.Vector4"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Vector4.op_LessThanOrEqual(Godot.Vector4,Godot.Vector4)">
            <summary>
            Compares two <see cref="T:Godot.Vector4"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector4.op_GreaterThanOrEqual(Godot.Vector4,Godot.Vector4)">
            <summary>
            Compares two <see cref="T:Godot.Vector4"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector4.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the vector is exactly equal
            to the given object (<paramref name="obj"/>).
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector4.IsEqualApprox(Godot.Vector4)"/> instead, which is more reliable.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Vector4.Equals(Godot.Vector4)">
            <summary>
            Returns <see langword="true"/> if the vectors are exactly equal.
            Note: Due to floating-point precision errors, consider using
            <see cref="M:Godot.Vector4.IsEqualApprox(Godot.Vector4)"/> instead, which is more reliable.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether or not the vectors are exactly equal.</returns>
        </member>
        <member name="M:Godot.Vector4.IsEqualApprox(Godot.Vector4)">
            <summary>
            Returns <see langword="true"/> if this vector and <paramref name="other"/> are approximately equal,
            by running <see cref="M:Godot.Mathf.IsEqualApprox(System.Single,System.Single)"/> on each component.
            </summary>
            <param name="other">The other vector to compare.</param>
            <returns>Whether or not the vectors are approximately equal.</returns>
        </member>
        <member name="M:Godot.Vector4.IsZeroApprox">
            <summary>
            Returns <see langword="true"/> if this vector's values are approximately zero,
            by running <see cref="M:Godot.Mathf.IsZeroApprox(System.Single)"/> on each component.
            This method is faster than using <see cref="M:Godot.Vector4.IsEqualApprox(Godot.Vector4)"/> with one value
            as a zero vector.
            </summary>
            <returns>Whether or not the vector is approximately zero.</returns>
        </member>
        <member name="M:Godot.Vector4.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Vector4"/>.
            </summary>
            <returns>A hash code for this vector.</returns>
        </member>
        <member name="M:Godot.Vector4.ToString">
            <summary>
            Converts this <see cref="T:Godot.Vector4"/> to a string.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Vector4"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="T:Godot.Vector4I">
            <summary>
            4-element structure that can be used to represent 4D grid coordinates or sets of integers.
            </summary>
        </member>
        <member name="T:Godot.Vector4I.Axis">
            <summary>
            Enumerated index values for the axes.
            Returned by <see cref="M:Godot.Vector4I.MaxAxisIndex"/> and <see cref="M:Godot.Vector4I.MinAxisIndex"/>.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.Axis.X">
            <summary>
            The vector's X axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.Axis.Y">
            <summary>
            The vector's Y axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.Axis.Z">
            <summary>
            The vector's Z axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.Axis.W">
            <summary>
            The vector's W axis.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.X">
            <summary>
            The vector's X component. Also accessible by using the index position <c>[0]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.Y">
            <summary>
            The vector's Y component. Also accessible by using the index position <c>[1]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.Z">
            <summary>
            The vector's Z component. Also accessible by using the index position <c>[2]</c>.
            </summary>
        </member>
        <member name="F:Godot.Vector4I.W">
            <summary>
            The vector's W component. Also accessible by using the index position <c>[3]</c>.
            </summary>
        </member>
        <member name="P:Godot.Vector4I.Item(System.Int32)">
            <summary>
            Access vector components using their <paramref name="index"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not 0, 1, 2 or 3.
            </exception>
            <value>
            <c>[0]</c> is equivalent to <see cref="F:Godot.Vector4I.X"/>,
            <c>[1]</c> is equivalent to <see cref="F:Godot.Vector4I.Y"/>,
            <c>[2]</c> is equivalent to <see cref="F:Godot.Vector4I.Z"/>.
            <c>[3]</c> is equivalent to <see cref="F:Godot.Vector4I.W"/>.
            </value>
        </member>
        <member name="M:Godot.Vector4I.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Helper method for deconstruction into a tuple.
            </summary>
        </member>
        <member name="M:Godot.Vector4I.Abs">
            <summary>
            Returns a new vector with all components in absolute values (i.e. positive).
            </summary>
            <returns>A vector with <see cref="M:System.Int32.Abs(System.Int32)"/> called on each component.</returns>
        </member>
        <member name="M:Godot.Vector4I.Clamp(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Returns a new vector with all components clamped between the
            components of <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Int32.Clamp(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="min">The vector with minimum allowed values.</param>
            <param name="max">The vector with maximum allowed values.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector4I.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns a new vector with all components clamped between
            <paramref name="min"/> and <paramref name="max"/> using
            <see cref="M:System.Int32.Clamp(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <returns>The vector with all components clamped.</returns>
        </member>
        <member name="M:Godot.Vector4I.DistanceSquaredTo(Godot.Vector4I)">
            <summary>
            Returns the squared distance between this vector and <paramref name="to"/>.
            This method runs faster than <see cref="M:Godot.Vector4I.DistanceTo(Godot.Vector4I)"/>, so prefer it if
            you need to compare vectors or need the squared distance for some formula.
            </summary>
            <param name="to">The other vector to use.</param>
            <returns>The squared distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector4I.DistanceTo(Godot.Vector4I)">
            <summary>
            Returns the distance between this vector and <paramref name="to"/>.
            </summary>
            <seealso cref="M:Godot.Vector4I.DistanceSquaredTo(Godot.Vector4I)"/>
            <param name="to">The other vector to use.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:Godot.Vector4I.Length">
            <summary>
            Returns the length (magnitude) of this vector.
            </summary>
            <seealso cref="M:Godot.Vector4I.LengthSquared"/>
            <returns>The length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.LengthSquared">
            <summary>
            Returns the squared length (squared magnitude) of this vector.
            This method runs faster than <see cref="M:Godot.Vector4I.Length"/>, so prefer it if
            you need to compare vectors or need the squared length for some formula.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.Max(Godot.Vector4I)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Max(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.Max(System.Int32)">
            <summary>
            Returns the result of the component-wise maximum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Max(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting maximum vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.Min(Godot.Vector4I)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Min(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other vector to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.Min(System.Int32)">
            <summary>
            Returns the result of the component-wise minimum between this vector
            and <paramref name="with"/> using <see cref="M:System.Int32.Min(System.Int32,System.Int32)"/>.
            </summary>
            <param name="with">The other value to use.</param>
            <returns>The resulting minimum vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.MaxAxisIndex">
            <summary>
            Returns the axis of the vector's highest value. See <see cref="T:Godot.Vector4I.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector4I.Axis.X"/>.
            </summary>
            <returns>The index of the highest axis.</returns>
        </member>
        <member name="M:Godot.Vector4I.MinAxisIndex">
            <summary>
            Returns the axis of the vector's lowest value. See <see cref="T:Godot.Vector4I.Axis"/>.
            If all components are equal, this method returns <see cref="F:Godot.Vector4I.Axis.W"/>.
            </summary>
            <returns>The index of the lowest axis.</returns>
        </member>
        <member name="M:Godot.Vector4I.Sign">
            <summary>
            Returns a vector with each component set to one or negative one, depending
            on the signs of this vector's components, or zero if the component is zero,
            by calling <see cref="M:System.Int32.Sign(System.Int32)"/> on each component.
            </summary>
            <returns>A vector with all components as either <c>1</c>, <c>-1</c>, or <c>0</c>.</returns>
        </member>
        <member name="M:Godot.Vector4I.Snapped(Godot.Vector4I)">
            <summary>
            Returns a new vector with each component snapped to the closest multiple of the corresponding component
            in <paramref name="step"/>.
            </summary>
            <param name="step">A vector value representing the step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.Snapped(System.Int32)">
            <summary>
            Returns a new vector with each component snapped to the closest multiple of <paramref name="step"/>.
            </summary>
            <param name="step">The step size to snap to.</param>
            <returns>The snapped vector.</returns>
        </member>
        <member name="P:Godot.Vector4I.MinValue">
            <summary>
            Min vector, a vector with all components equal to <see cref="F:System.Int32.MinValue"/>. Can be used as a negative integer equivalent of <see cref="P:Godot.Vector4.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector4I(int.MinValue, int.MinValue, int.MinValue, int.MinValue)</c>.</value>
        </member>
        <member name="P:Godot.Vector4I.MaxValue">
            <summary>
            Max vector, a vector with all components equal to <see cref="F:System.Int32.MaxValue"/>. Can be used as an integer equivalent of <see cref="P:Godot.Vector4.Inf"/>.
            </summary>
            <value>Equivalent to <c>new Vector4I(int.MaxValue, int.MaxValue, int.MaxValue, int.MaxValue)</c>.</value>
        </member>
        <member name="P:Godot.Vector4I.Zero">
            <summary>
            Zero vector, a vector with all components set to <c>0</c>.
            </summary>
            <value>Equivalent to <c>new Vector4I(0, 0, 0, 0)</c>.</value>
        </member>
        <member name="P:Godot.Vector4I.One">
            <summary>
            One vector, a vector with all components set to <c>1</c>.
            </summary>
            <value>Equivalent to <c>new Vector4I(1, 1, 1, 1)</c>.</value>
        </member>
        <member name="M:Godot.Vector4I.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Godot.Vector4I"/> with the given components.
            </summary>
            <param name="x">The vector's X component.</param>
            <param name="y">The vector's Y component.</param>
            <param name="z">The vector's Z component.</param>
            <param name="w">The vector's W component.</param>
        </member>
        <member name="M:Godot.Vector4I.op_Addition(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Adds each component of the <see cref="T:Godot.Vector4I"/>
            with the components of the given <see cref="T:Godot.Vector4I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The added vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Subtraction(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Subtracts each component of the <see cref="T:Godot.Vector4I"/>
            by the components of the given <see cref="T:Godot.Vector4I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The subtracted vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_UnaryNegation(Godot.Vector4I)">
            <summary>
            Returns the negative value of the <see cref="T:Godot.Vector4I"/>.
            This is the same as writing <c>new Vector4I(-v.X, -v.Y, -v.Z, -v.W)</c>.
            This operation flips the direction of the vector while
            keeping the same magnitude.
            </summary>
            <param name="vec">The vector to negate/flip.</param>
            <returns>The negated/flipped vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Multiply(Godot.Vector4I,System.Int32)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector4I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="scale">The scale to multiply by.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Multiply(System.Int32,Godot.Vector4I)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector4I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="scale">The scale to multiply by.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Multiply(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Multiplies each component of the <see cref="T:Godot.Vector4I"/>
            by the components of the given <see cref="T:Godot.Vector4I"/>.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>The multiplied vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Division(Godot.Vector4I,System.Int32)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector4I"/>
            by the given <see langword="int"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Division(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Divides each component of the <see cref="T:Godot.Vector4I"/>
            by the components of the given <see cref="T:Godot.Vector4I"/>.
            </summary>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The divided vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Modulus(Godot.Vector4I,System.Int32)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector4I"/>
            with the components of the given <see langword="int"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector4I(10, -20, 30, -40) % 7); // Prints "(3, -6, 2, -5)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisor">The divisor value.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Modulus(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Gets the remainder of each component of the <see cref="T:Godot.Vector4I"/>
            with the components of the given <see cref="T:Godot.Vector4I"/>.
            This operation uses truncated division, which is often not desired
            as it does not work well with negative numbers.
            Consider using <see cref="M:Godot.Mathf.PosMod(System.Int32,System.Int32)"/> instead
            if you want to handle negative numbers.
            </summary>
            <example>
            <code>
            GD.Print(new Vector4I(10, -20, 30, -40) % new Vector4I(6, 7, 8, 9)); // Prints "(4, -6, 6, -4)"
            </code>
            </example>
            <param name="vec">The dividend vector.</param>
            <param name="divisorv">The divisor vector.</param>
            <returns>The remainder vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Equality(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Returns <see langword="true"/> if the vectors are equal.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are equal.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Inequality(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Returns <see langword="true"/> if the vectors are not equal.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the vectors are not equal.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_LessThan(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Compares two <see cref="T:Godot.Vector4I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than the right.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_GreaterThan(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Compares two <see cref="T:Godot.Vector4I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than the right.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_LessThanOrEqual(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Compares two <see cref="T:Godot.Vector4I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is less than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is less than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_GreaterThanOrEqual(Godot.Vector4I,Godot.Vector4I)">
            <summary>
            Compares two <see cref="T:Godot.Vector4I"/> vectors by first checking if
            the X value of the <paramref name="left"/> vector is greater than
            or equal to the X value of the <paramref name="right"/> vector.
            If the X values are exactly equal, then it repeats this check
            with the Y, Z and finally W values of the two vectors.
            This operator is useful for sorting vectors.
            </summary>
            <param name="left">The left vector.</param>
            <param name="right">The right vector.</param>
            <returns>Whether or not the left is greater than or equal to the right.</returns>
        </member>
        <member name="M:Godot.Vector4I.op_Implicit(Godot.Vector4I)~Godot.Vector4">
            <summary>
            Converts this <see cref="T:Godot.Vector4I"/> to a <see cref="T:Godot.Vector4"/>.
            </summary>
            <param name="value">The vector to convert.</param>
        </member>
        <member name="M:Godot.Vector4I.op_Explicit(Godot.Vector4)~Godot.Vector4I">
            <summary>
            Converts a <see cref="T:Godot.Vector4"/> to a <see cref="T:Godot.Vector4I"/> by truncating
            components' fractional parts (rounding towards zero). For a different
            behavior consider passing the result of <see cref="M:Godot.Vector4.Ceil"/>,
            <see cref="M:Godot.Vector4.Floor"/> or <see cref="M:Godot.Vector4.Round"/> to this conversion operator instead.
            </summary>
            <param name="value">The vector to convert.</param>
        </member>
        <member name="M:Godot.Vector4I.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the vector is equal
            to the given object (<paramref name="obj"/>).
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Whether or not the vector and the object are equal.</returns>
        </member>
        <member name="M:Godot.Vector4I.Equals(Godot.Vector4I)">
            <summary>
            Returns <see langword="true"/> if the vectors are equal.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether or not the vectors are equal.</returns>
        </member>
        <member name="M:Godot.Vector4I.GetHashCode">
            <summary>
            Serves as the hash function for <see cref="T:Godot.Vector4I"/>.
            </summary>
            <returns>A hash code for this vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.ToString">
            <summary>
            Converts this <see cref="T:Godot.Vector4I"/> to a string.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Vector4I.ToString(System.String)">
            <summary>
            Converts this <see cref="T:Godot.Vector4I"/> to a string with the given <paramref name="format"/>.
            </summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:Godot.Node.GetNode``1(Godot.NodePath)">
            <summary>
            Fetches a node. The <see cref="T:Godot.NodePath"/> can be either a relative path (from
            the current node) or an absolute path (in the scene tree) to a node. If the path
            does not exist, a <see langword="null"/> instance is returned and an error
            is logged. Attempts to access methods on the return value will result in an
            "Attempt to call &lt;method&gt; on a null instance." error.
            Note: Fetching absolute paths only works when the node is inside the scene tree
            (see <see cref="M:Godot.Node.IsInsideTree"/>).
            </summary>
            <example>
            Example: Assume your current node is Character and the following tree:
            <code>
            /root
            /root/Character
            /root/Character/Sword
            /root/Character/Backpack/Dagger
            /root/MyGame
            /root/Swamp/Alligator
            /root/Swamp/Mosquito
            /root/Swamp/Goblin
            </code>
            Possible paths are:
            <code>
            GetNode("Sword");
            GetNode("Backpack/Dagger");
            GetNode("../Swamp/Alligator");
            GetNode("/root/MyGame");
            </code>
            </example>
            <seealso cref="M:Godot.Node.GetNodeOrNull``1(Godot.NodePath)"/>
            <param name="path">The path to the node to fetch.</param>
            <exception cref="T:System.InvalidCastException">
            The fetched node can't be casted to the given type <typeparamref name="T"/>.
            </exception>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The <see cref="T:Godot.Node"/> at the given <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Godot.Node.GetNodeOrNull``1(Godot.NodePath)">
            <summary>
            Similar to <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>, but does not log an error if <paramref name="path"/>
            does not point to a valid <see cref="T:Godot.Node"/>.
            </summary>
            <example>
            Example: Assume your current node is Character and the following tree:
            <code>
            /root
            /root/Character
            /root/Character/Sword
            /root/Character/Backpack/Dagger
            /root/MyGame
            /root/Swamp/Alligator
            /root/Swamp/Mosquito
            /root/Swamp/Goblin
            </code>
            Possible paths are:
            <code>
            GetNode("Sword");
            GetNode("Backpack/Dagger");
            GetNode("../Swamp/Alligator");
            GetNode("/root/MyGame");
            </code>
            </example>
            <seealso cref="M:Godot.Node.GetNode``1(Godot.NodePath)"/>
            <param name="path">The path to the node to fetch.</param>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The <see cref="T:Godot.Node"/> at the given <paramref name="path"/>, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Godot.Node.GetChild``1(System.Int32,System.Boolean)">
            <summary>
            Returns a child node by its index (see <see cref="M:Godot.Node.GetChildCount(System.Boolean)"/>).
            This method is often used for iterating all children of a node.
            Negative indices access the children from the last one.
            To access a child node via its name, use <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>.
            </summary>
            <seealso cref="M:Godot.Node.GetChildOrNull``1(System.Int32,System.Boolean)"/>
            <param name="idx">Child index.</param>
            <param name="includeInternal">
            If <see langword="false"/>, internal children are skipped (see <c>internal</c>
            parameter in <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean,Godot.Node.InternalMode)"/>).
            </param>
            <exception cref="T:System.InvalidCastException">
            The fetched node can't be casted to the given type <typeparamref name="T"/>.
            </exception>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The child <see cref="T:Godot.Node"/> at the given index <paramref name="idx"/>.
            </returns>
        </member>
        <member name="M:Godot.Node.GetChildOrNull``1(System.Int32,System.Boolean)">
            <summary>
            Returns a child node by its index (see <see cref="M:Godot.Node.GetChildCount(System.Boolean)"/>).
            This method is often used for iterating all children of a node.
            Negative indices access the children from the last one.
            To access a child node via its name, use <see cref="M:Godot.Node.GetNode(Godot.NodePath)"/>.
            </summary>
            <seealso cref="M:Godot.Node.GetChild``1(System.Int32,System.Boolean)"/>
            <param name="idx">Child index.</param>
            <param name="includeInternal">
            If <see langword="false"/>, internal children are skipped (see <c>internal</c>
            parameter in <see cref="M:Godot.Node.AddChild(Godot.Node,System.Boolean,Godot.Node.InternalMode)"/>).
            </param>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The child <see cref="T:Godot.Node"/> at the given index <paramref name="idx"/>, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:Godot.Node.GetOwner``1">
            <summary>
            The node owner. A node can have any other node as owner (as long as it is
            a valid parent, grandparent, etc. ascending in the tree). When saving a
            node (using <see cref="T:Godot.PackedScene"/>), all the nodes it owns will be saved
            with it. This allows for the creation of complex <see cref="T:Godot.SceneTree"/>s,
            with instancing and subinstancing.
            </summary>
            <seealso cref="M:Godot.Node.GetOwnerOrNull``1"/>
            <exception cref="T:System.InvalidCastException">
            The fetched node can't be casted to the given type <typeparamref name="T"/>.
            </exception>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The owner <see cref="T:Godot.Node"/>.
            </returns>
        </member>
        <member name="M:Godot.Node.GetOwnerOrNull``1">
            <summary>
            The node owner. A node can have any other node as owner (as long as it is
            a valid parent, grandparent, etc. ascending in the tree). When saving a
            node (using <see cref="T:Godot.PackedScene"/>), all the nodes it owns will be saved
            with it. This allows for the creation of complex <see cref="T:Godot.SceneTree"/>s,
            with instancing and subinstancing.
            </summary>
            <seealso cref="M:Godot.Node.GetOwner``1"/>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The owner <see cref="T:Godot.Node"/>, or <see langword="null"/> if there is no owner.
            </returns>
        </member>
        <member name="M:Godot.Node.GetParent``1">
            <summary>
            Returns the parent node of the current node, or a <see langword="null"/> instance
            if the node lacks a parent.
            </summary>
            <seealso cref="M:Godot.Node.GetParentOrNull``1"/>
            <exception cref="T:System.InvalidCastException">
            The fetched node can't be casted to the given type <typeparamref name="T"/>.
            </exception>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The parent <see cref="T:Godot.Node"/>.
            </returns>
        </member>
        <member name="M:Godot.Node.GetParentOrNull``1">
            <summary>
            Returns the parent node of the current node, or a <see langword="null"/> instance
            if the node lacks a parent.
            </summary>
            <seealso cref="M:Godot.Node.GetParent``1"/>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>
            The parent <see cref="T:Godot.Node"/>, or <see langword="null"/> if the node has no parent.
            </returns>
        </member>
        <member name="M:Godot.PackedScene.Instantiate``1(Godot.PackedScene.GenEditState)">
            <summary>
            Instantiates the scene's node hierarchy, erroring on failure.
            Triggers child scene instantiation(s). Triggers a
            <see cref="F:Godot.Node.NotificationSceneInstantiated"/> notification on the root node.
            </summary>
            <seealso cref="M:Godot.PackedScene.InstantiateOrNull``1(Godot.PackedScene.GenEditState)"/>
            <exception cref="T:System.InvalidCastException">
            The instantiated node can't be casted to the given type <typeparamref name="T"/>.
            </exception>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>The instantiated scene.</returns>
        </member>
        <member name="M:Godot.PackedScene.InstantiateOrNull``1(Godot.PackedScene.GenEditState)">
            <summary>
            Instantiates the scene's node hierarchy, returning <see langword="null"/> on failure.
            Triggers child scene instantiation(s). Triggers a
            <see cref="F:Godot.Node.NotificationSceneInstantiated"/> notification on the root node.
            </summary>
            <seealso cref="M:Godot.PackedScene.Instantiate``1(Godot.PackedScene.GenEditState)"/>
            <typeparam name="T">The type to cast to. Should be a descendant of <see cref="T:Godot.Node"/>.</typeparam>
            <returns>The instantiated scene.</returns>
        </member>
        <member name="T:Godot.NativeInterop.NativeTypeNameAttribute">
            <summary>Defines the type of a member as it was used in the native signature.</summary>
        </member>
        <member name="M:Godot.NativeInterop.NativeTypeNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Godot.NativeInterop.NativeTypeNameAttribute" /> class.</summary>
            <param name="name">The name of the type that was used in the native signature.</param>
        </member>
        <member name="P:Godot.NativeInterop.NativeTypeNameAttribute.Name">
            <summary>Gets the name of the type that was used in the native signature.</summary>
        </member>
        <member name="M:Godot.NativeInterop.Marshallers.GodotObjectMarshaller.GetOrCreateManagedInstance(System.IntPtr)">
            <summary>
            Retrieves the existing managed instance of a <see cref="T:Godot.GodotObject"/> for the given
            native pointer if one already exists; otherwise, it creates a new managed instance
            for the unmanaged instance referenced by the native pointer.
            </summary>
            <param name="nativePtr">Pointer to the unmanaged <see cref="T:Godot.GodotObject"/> instance.</param>
            <returns>
            A managed <see cref="T:Godot.GodotObject"/> instance that represents the unmanaged instance in C#.
            </returns>
        </member>
        <member name="T:Godot.NativeInterop.NativeGodotVariantPtrSpan">
            <summary>
            Represents a contiguous region of memory that contains pointers to <see cref="T:Godot.NativeInterop.NativeGodotVariant"/>,
            similar to a <c>Span&lt;NativeGodotVariant*&gt;</c>.
            </summary>
        </member>
        <member name="P:Godot.NativeInterop.NativeGodotVariantPtrSpan.Length">
            <summary>
            Returns the number of arguments.
            </summary>
        </member>
        <member name="P:Godot.SR.Argument_AbstractTypeCantBeRegisteredAsNonAbstract">
            <summary>Can't register abstract type '{typeName}' as a non-abstract class.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_AbstractTypeCantBeRegisteredAsNonAbstract(System.Object)">
            <summary>Can't register abstract type '{typeName}' as a non-abstract class.</summary>
        </member>
        <member name="P:Godot.SR.Argument_BytesAreNotValidAscii">
            <summary>The bytes are not using ASCII encoding or contain invalid characters.</summary>
        </member>
        <member name="P:Godot.SR.Argument_CallableArgumentCountMismatch">
            <summary>Invalid argument count for invoking callable. Expected {argCountExpected} arguments, received {argCountReceived}.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_CallableArgumentCountMismatch(System.Object,System.Object)">
            <summary>Invalid argument count for invoking callable. Expected {argCountExpected} arguments, received {argCountReceived}.</summary>
        </member>
        <member name="P:Godot.SR.Argument_ConstantAlreadyRegistered">
            <summary>Constant '{constantName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_ConstantAlreadyRegistered(System.Object,System.Object)">
            <summary>Constant '{constantName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="P:Godot.SR.Argument_ConstantWithoutEnumCantBeFlag">
            <summary>Constant '{constantName}' not contained in an enum can't be a flag.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_ConstantWithoutEnumCantBeFlag(System.Object)">
            <summary>Constant '{constantName}' not contained in an enum can't be a flag.</summary>
        </member>
        <member name="P:Godot.SR.Argument_DictionaryKeyAlreadyExists">
            <summary>An element with the same key already exists.</summary>
        </member>
        <member name="P:Godot.SR.Argument_DisposableGodotObjectNotRegistered">
            <summary>Godot Object not registered.</summary>
        </member>
        <member name="P:Godot.SR.Argument_DisposableNotRegistered">
            <summary>Disposable not registered.</summary>
        </member>
        <member name="P:Godot.SR.Argument_MethodAlreadyRegistered">
            <summary>Method '{methodName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_MethodAlreadyRegistered(System.Object,System.Object)">
            <summary>Method '{methodName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="P:Godot.SR.Argument_PropertyAlreadyRegistered">
            <summary>Property '{propertyName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_PropertyAlreadyRegistered(System.Object,System.Object)">
            <summary>Property '{propertyName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="P:Godot.SR.Argument_SignalAlreadyRegistered">
            <summary>Signal '{signalName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_SignalAlreadyRegistered(System.Object,System.Object)">
            <summary>Signal '{signalName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="P:Godot.SR.Argument_TargetVectorAndUpVectorCantBeParallel">
            <summary>The target vector and up vector can't be parallel to each other.</summary>
        </member>
        <member name="P:Godot.SR.Argument_ValueIsNotNormalized">
            <summary>Argument is not normalized.</summary>
        </member>
        <member name="P:Godot.SR.Argument_VectorCantBeZero">
            <summary>The vector can't be zero.</summary>
        </member>
        <member name="P:Godot.SR.Argument_VirtualMethodOverrideAlreadyRegistered">
            <summary>Virtual method override '{methodName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgument_VirtualMethodOverrideAlreadyRegistered(System.Object,System.Object)">
            <summary>Virtual method override '{methodName}' already registered in class '{typeName}'.</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_AabbEndPointIndex">
            <summary>Index is {endpointIndex}, but a value from 0 to 7 is expected.</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_AabbEndPointIndex(System.Object)">
            <summary>Index is {endpointIndex}, but a value from 0 to 7 is expected.</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_ColorCodeInvalidAlphaPart">
            <summary>Invalid color code. Alpha part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_ColorCodeInvalidAlphaPart(System.Object)">
            <summary>Invalid color code. Alpha part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_ColorCodeInvalidBluePart">
            <summary>Invalid color code. Blue part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_ColorCodeInvalidBluePart(System.Object)">
            <summary>Invalid color code. Blue part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_ColorCodeInvalidGreenPart">
            <summary>Invalid color code. Green part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_ColorCodeInvalidGreenPart(System.Object)">
            <summary>Invalid color code. Green part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_ColorCodeInvalidLength">
            <summary>Invalid color code. Length is {colorCodeLength}, but a length of 6 or 8 is expected: {colorCode}</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_ColorCodeInvalidLength(System.Object,System.Object)">
            <summary>Invalid color code. Length is {colorCodeLength}, but a length of 6 or 8 is expected: {colorCode}</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_ColorCodeInvalidRedPart">
            <summary>Invalid color code. Red part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_ColorCodeInvalidRedPart(System.Object)">
            <summary>Invalid color code. Red part is not valid hexadecimal: {colorCode}</summary>
        </member>
        <member name="P:Godot.SR.ArgumentOutOfRange_ColorNameInvalid">
            <summary>Invalid Color Name: {colorName}</summary>
        </member>
        <member name="M:Godot.SR.FormatArgumentOutOfRange_ColorNameInvalid(System.Object)">
            <summary>Invalid Color Name: {colorName}</summary>
        </member>
        <member name="P:Godot.SR.CallError_ArgumentCountMismatch">
            <summary>Invalid call to {methodName}. Expected {expectedArgumentCount} arguments.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_ArgumentCountMismatch(System.Object,System.Object)">
            <summary>Invalid call to {methodName}. Expected {expectedArgumentCount} arguments.</summary>
        </member>
        <member name="P:Godot.SR.CallError_InstanceIsNull">
            <summary>Attempt to call {methodName} on a null instance.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_InstanceIsNull(System.Object)">
            <summary>Attempt to call {methodName} on a null instance.</summary>
        </member>
        <member name="P:Godot.SR.CallError_InvalidArgument_TypeMismatch">
            <summary>Invalid type in {methodName}. Cannot convert argument {argumentIndex} from {variantType} to {expectedVariantType}.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_InvalidArgument_TypeMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>Invalid type in {methodName}. Cannot convert argument {argumentIndex} from {variantType} to {expectedVariantType}.</summary>
        </member>
        <member name="P:Godot.SR.CallError_InvalidArgument_TypeMismatchArrayElementType">
            <summary>Invalid type in {methodName}. The array of argument {argumentIndex} ({variantType}) does not have the same element type as the expected typed array argument.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_InvalidArgument_TypeMismatchArrayElementType(System.Object,System.Object,System.Object)">
            <summary>Invalid type in {methodName}. The array of argument {argumentIndex} ({variantType}) does not have the same element type as the expected typed array argument.</summary>
        </member>
        <member name="P:Godot.SR.CallError_InvalidArgument_TypeMismatchObjectDerived">
            <summary>Invalid type in {methodName}. The Object-derived class of argument {argumentIndex} ({variantType}) is not a subclass of the expected argument class.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_InvalidArgument_TypeMismatchObjectDerived(System.Object,System.Object,System.Object)">
            <summary>Invalid type in {methodName}. The Object-derived class of argument {argumentIndex} ({variantType}) is not a subclass of the expected argument class.</summary>
        </member>
        <member name="P:Godot.SR.CallError_InvalidMethod">
            <summary>Invalid call. Nonexistent {methodName}.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_InvalidMethod(System.Object)">
            <summary>Invalid call. Nonexistent {methodName}.</summary>
        </member>
        <member name="P:Godot.SR.CallError_MethodNotConst">
            <summary>Attempt to call {methodName} on a const instance.</summary>
        </member>
        <member name="M:Godot.SR.FormatCallError_MethodNotConst(System.Object)">
            <summary>Attempt to call {methodName} on a const instance.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_ArrayIsReadOnly">
            <summary>Array instance is read-only.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_CantInstantiateTypeConstructorNotRegistered">
            <summary>Can't instantiate type '{typeName}'. A constructor has not been registered for the type.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_CantInstantiateTypeConstructorNotRegistered(System.Object)">
            <summary>Can't instantiate type '{typeName}'. A constructor has not been registered for the type.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_DictionaryIsReadOnly">
            <summary>Dictionary instance is read-only.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_EditorPluginAlreadyRegistered">
            <summary>Type '{typeName}' has already been registered as an editor plugin.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_EditorPluginAlreadyRegistered(System.Object)">
            <summary>Type '{typeName}' has already been registered as an editor plugin.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_GodotBridgeAlreadyInitialized">
            <summary>GodotBridge has already been initialized.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_MarshallingUnsupportedForType">
            <summary>Marshalling is not supported for the type '{typeName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_MarshallingUnsupportedForType(System.Object)">
            <summary>Marshalling is not supported for the type '{typeName}'.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_MatrixDeterminantIsZeroAndCantBeInverted">
            <summary>Matrix determinant is zero and cannot be inverted.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_MethodOptionalParametersMustAppearAfterRequiredParameters">
            <summary>Optional parameters must appear after all required parameters.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_QuaternionIsNotNormalized">
            <summary>Quaternion is not normalized.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_RequiredVirtualMethodMustBeOverridden">
            <summary>Required virtual method '{typeName}.{methodName}' must be overridden before calling.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_RequiredVirtualMethodMustBeOverridden(System.Object,System.Object)">
            <summary>Required virtual method '{typeName}.{methodName}' must be overridden before calling.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_SignalAwaiterFailedToConnect">
            <summary>Error connecting to signal '{signalName}' during await.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_SignalAwaiterFailedToConnect(System.Object)">
            <summary>Error connecting to signal '{signalName}' during await.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_SignalNameIsNull">
            <summary>Signal name is null.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_SignalOwnerIsNull">
            <summary>Signal owner is null.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_UnableToLoadGDExtensionFunction">
            <summary>Unable to load GDExtension interface function '{functionName}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_UnableToLoadGDExtensionFunction(System.Object)">
            <summary>Unable to load GDExtension interface function '{functionName}'.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_UnableToParseString">
            <summary>Unable to parse string '{value}' with encoding '{encoding}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_UnableToParseString(System.Object,System.Object)">
            <summary>Unable to parse string '{value}' with encoding '{encoding}'.</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_VariantTypeInvalid">
            <summary>Invalid Variant type: {variantType}</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_VariantTypeInvalid(System.Object)">
            <summary>Invalid Variant type: {variantType}</summary>
        </member>
        <member name="P:Godot.SR.InvalidOperation_VariantCantBeEnumerated">
            <summary>Can't enumerate Variant '{variantValue}'.</summary>
        </member>
        <member name="M:Godot.SR.FormatInvalidOperation_VariantCantBeEnumerated(System.Object)">
            <summary>Can't enumerate Variant '{variantValue}'.</summary>
        </member>
        <member name="P:Godot.SR.KeyNotFound_DictionaryKeyNotFound">
            <summary>The given key '{key}' was not present in the dictionary.</summary>
        </member>
        <member name="M:Godot.SR.FormatKeyNotFound_DictionaryKeyNotFound(System.Object)">
            <summary>The given key '{key}' was not present in the dictionary.</summary>
        </member>
        <member name="P:Godot.SR.MissingGodotMethod_BuiltInNotFound">
            <summary>Built-in method was not found. Likely the engine method changed to an incompatible version.</summary>
        </member>
        <member name="P:Godot.SR.MissingGodotMethod_ConstructorNotFound">
            <summary>Constructor was not found. Likely the engine method changed to an incompatible version.</summary>
        </member>
        <member name="P:Godot.SR.MissingGodotMethod_DestructorNotFound">
            <summary>Destructor was not found. Likely the engine method changed to an incompatible version.</summary>
        </member>
        <member name="P:Godot.SR.MissingGodotMethod_MethodBindNotFound">
            <summary>Method bind was not found. Likely the engine method changed to an incompatible version.</summary>
        </member>
        <member name="P:Godot.SR.MissingGodotMethod_OperatorEvaluatorNotFound">
            <summary>Operator evaluator was not found. Likely the engine method changed to an incompatible version.</summary>
        </member>
        <member name="P:Godot.SR.MissingGodotMethod_UtilityFunctionNotFound">
            <summary>Utility function was not found. Likely the engine method changed to an incompatible version.</summary>
        </member>
    </members>
</doc>
